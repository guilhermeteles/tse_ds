/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@markdoc";
exports.ids = ["vendor-chunks/@markdoc"];
exports.modules = {

/***/ "(rsc)/./node_modules/@markdoc/markdoc/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@markdoc/markdoc/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target)=>__defProp(target, \"__esModule\", {\n        value: true\n    });\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[Object.keys(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __export = (target, all)=>{\n    __markAsModule(target);\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __reExport = (target, module2, desc)=>{\n    if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n        for (let key of __getOwnPropNames(module2))if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n            get: ()=>module2[key],\n            enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n        });\n    }\n    return target;\n};\nvar __toModule = (module2)=>{\n    return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n        get: ()=>module2.default,\n        enumerable: true\n    } : {\n        value: module2,\n        enumerable: true\n    })), module2);\n};\n// src/grammar/tag.js\nvar require_tag = __commonJS({\n    \"src/grammar/tag.js\" (exports1, module2) {\n        \"use strict\";\n        function peg$subclass(child, parent) {\n            function C() {\n                this.constructor = child;\n            }\n            C.prototype = parent.prototype;\n            child.prototype = new C();\n        }\n        function peg$SyntaxError(message, expected, found, location) {\n            this.message = message;\n            this.expected = expected;\n            this.found = found;\n            this.location = location;\n            this.name = \"SyntaxError\";\n            if (typeof Error.captureStackTrace === \"function\") {\n                Error.captureStackTrace(this, peg$SyntaxError);\n            }\n        }\n        peg$subclass(peg$SyntaxError, Error);\n        peg$SyntaxError.buildMessage = function(expected, found, location) {\n            var DESCRIBE_EXPECTATION_FNS = {\n                literal: function(expectation) {\n                    return '\"' + literalEscape(expectation.text) + '\"';\n                },\n                class: function(expectation) {\n                    var escapedParts = expectation.parts.map(function(part) {\n                        return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                },\n                any: function() {\n                    return \"any character\";\n                },\n                end: function() {\n                    return \"end of input\";\n                },\n                other: function(expectation) {\n                    return expectation.description;\n                },\n                not: function(expectation) {\n                    return \"not \" + describeExpectation(expectation.expected);\n                }\n            };\n            function hex(ch) {\n                return ch.charCodeAt(0).toString(16).toUpperCase();\n            }\n            function literalEscape(s2) {\n                return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n                    return \"\\\\x0\" + hex(ch);\n                }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n                    return \"\\\\x\" + hex(ch);\n                });\n            }\n            function classEscape(s2) {\n                return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n                    return \"\\\\x0\" + hex(ch);\n                }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n                    return \"\\\\x\" + hex(ch);\n                });\n            }\n            function describeExpectation(expectation) {\n                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n            }\n            function describeExpected(expected2) {\n                var descriptions = expected2.map(describeExpectation);\n                var i, j;\n                descriptions.sort();\n                if (descriptions.length > 0) {\n                    for(i = 1, j = 1; i < descriptions.length; i++){\n                        if (descriptions[i - 1] !== descriptions[i]) {\n                            descriptions[j] = descriptions[i];\n                            j++;\n                        }\n                    }\n                    descriptions.length = j;\n                }\n                switch(descriptions.length){\n                    case 1:\n                        return descriptions[0];\n                    case 2:\n                        return descriptions[0] + \" or \" + descriptions[1];\n                    default:\n                        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n                }\n            }\n            function describeFound(found2) {\n                return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n            }\n            return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n        };\n        function peg$parse(input, options) {\n            options = options !== void 0 ? options : {};\n            var peg$FAILED = {};\n            var peg$startRuleFunctions = {\n                Top: peg$parseTop\n            };\n            var peg$startRuleFunction = peg$parseTop;\n            var peg$c0 = \"/\";\n            var peg$c1 = \".\";\n            var peg$c2 = \"#\";\n            var peg$c3 = \"=\";\n            var peg$c4 = \"(\";\n            var peg$c5 = \")\";\n            var peg$c6 = \",\";\n            var peg$c7 = \"[\";\n            var peg$c8 = \"]\";\n            var peg$c9 = \"null\";\n            var peg$c10 = \"true\";\n            var peg$c11 = \"false\";\n            var peg$c12 = \"{\";\n            var peg$c13 = \"}\";\n            var peg$c14 = \":\";\n            var peg$c15 = \"-\";\n            var peg$c16 = '\"';\n            var peg$c17 = \"\\\\\";\n            var peg$c18 = \"n\";\n            var peg$c19 = \"r\";\n            var peg$c20 = \"t\";\n            var peg$r0 = /^[$@]/;\n            var peg$r1 = /^[0-9]/;\n            var peg$r2 = /^[^\\0-\\x1F\"\\\\]/;\n            var peg$r3 = /^[a-zA-Z0-9_\\-]/;\n            var peg$r4 = /^[ \\n\\t]/;\n            var peg$e0 = peg$literalExpectation(\"/\", false);\n            var peg$e1 = peg$otherExpectation(\"tag name\");\n            var peg$e2 = peg$otherExpectation(\"class\");\n            var peg$e3 = peg$otherExpectation(\"id\");\n            var peg$e4 = peg$literalExpectation(\"=\", false);\n            var peg$e5 = peg$literalExpectation(\"(\", false);\n            var peg$e6 = peg$literalExpectation(\")\", false);\n            var peg$e7 = peg$literalExpectation(\",\", false);\n            var peg$e8 = peg$otherExpectation(\"variable\");\n            var peg$e9 = peg$otherExpectation(\"null\");\n            var peg$e10 = peg$otherExpectation(\"boolean\");\n            var peg$e11 = peg$literalExpectation(\"[\", false);\n            var peg$e12 = peg$literalExpectation(\"]\", false);\n            var peg$e13 = peg$literalExpectation(\"{\", false);\n            var peg$e14 = peg$literalExpectation(\"}\", false);\n            var peg$e15 = peg$literalExpectation(\":\", false);\n            var peg$e16 = peg$otherExpectation(\"number\");\n            var peg$e17 = peg$otherExpectation(\"string\");\n            var peg$e18 = peg$otherExpectation(\"identifier\");\n            var peg$e19 = peg$otherExpectation(\"whitespace\");\n            var peg$f0 = function(variable) {\n                return {\n                    type: \"variable\",\n                    meta: {\n                        variable\n                    }\n                };\n            };\n            var peg$f1 = function(attributes) {\n                return {\n                    type: \"annotation\",\n                    meta: {\n                        attributes\n                    }\n                };\n            };\n            var peg$f2 = function(tag, value) {\n                return value;\n            };\n            var peg$f3 = function(tag, primary, attributes, close) {\n                if (primary) {\n                    attributes = attributes || [];\n                    attributes.unshift({\n                        type: \"attribute\",\n                        name: \"primary\",\n                        value: primary\n                    });\n                }\n                const [type, nesting] = close ? [\n                    \"tag\",\n                    0\n                ] : [\n                    \"tag_open\",\n                    1\n                ];\n                return {\n                    type,\n                    nesting,\n                    meta: {\n                        tag,\n                        attributes\n                    }\n                };\n            };\n            var peg$f4 = function(tag) {\n                return {\n                    type: \"tag_close\",\n                    nesting: -1,\n                    meta: {\n                        tag\n                    }\n                };\n            };\n            var peg$f5 = function(head, tail) {\n                return !head ? [] : [\n                    head,\n                    ...tail\n                ];\n            };\n            var peg$f6 = function(item2) {\n                return item2;\n            };\n            var peg$f7 = function(ids) {\n                return ids;\n            };\n            var peg$f8 = function(classes) {\n                return classes;\n            };\n            var peg$f9 = function(attribute) {\n                return attribute;\n            };\n            var peg$f10 = function(name) {\n                return {\n                    type: \"class\",\n                    name,\n                    value: true\n                };\n            };\n            var peg$f11 = function(value) {\n                return {\n                    type: \"attribute\",\n                    name: \"id\",\n                    value\n                };\n            };\n            var peg$f12 = function(name, value) {\n                return {\n                    type: \"attribute\",\n                    name,\n                    value\n                };\n            };\n            var peg$f13 = function(name, head, tail) {\n                return head ? [\n                    head,\n                    ...tail\n                ] : [];\n            };\n            var peg$f14 = function(name, params) {\n                let parameters = {};\n                for (let [index, { name: name2, value }] of params.entries())parameters[name2 || index] = value;\n                return new Function3(name, parameters);\n            };\n            var peg$f15 = function(name) {\n                return name;\n            };\n            var peg$f16 = function(name, value) {\n                return {\n                    name,\n                    value\n                };\n            };\n            var peg$f17 = function(value) {\n                return value;\n            };\n            var peg$f18 = function(prefix, head, tail) {\n                if (prefix === \"@\") return [\n                    head,\n                    ...tail\n                ];\n                return new Variable2([\n                    head,\n                    ...tail\n                ]);\n            };\n            var peg$f19 = function() {\n                return null;\n            };\n            var peg$f20 = function() {\n                return true;\n            };\n            var peg$f21 = function() {\n                return false;\n            };\n            var peg$f22 = function(head, tail) {\n                return [\n                    head,\n                    ...tail\n                ];\n            };\n            var peg$f23 = function(value) {\n                return value || [];\n            };\n            var peg$f24 = function(head, tail) {\n                return Object.assign(head, ...tail);\n            };\n            var peg$f25 = function(value) {\n                return value || {};\n            };\n            var peg$f26 = function(key, value) {\n                return key === \"$$mdtype\" ? {} : {\n                    [key]: value\n                };\n            };\n            var peg$f27 = function() {\n                return parseFloat(text2());\n            };\n            var peg$f28 = function(value) {\n                return value.join(\"\");\n            };\n            var peg$f29 = function() {\n                return \"\\n\";\n            };\n            var peg$f30 = function() {\n                return \"\\r\";\n            };\n            var peg$f31 = function() {\n                return \"\t\";\n            };\n            var peg$f32 = function(sequence) {\n                return sequence;\n            };\n            var peg$currPos = 0;\n            var peg$savedPos = 0;\n            var peg$posDetailsCache = [\n                {\n                    line: 1,\n                    column: 1\n                }\n            ];\n            var peg$expected = [];\n            var peg$silentFails = 0;\n            var peg$result;\n            if (\"startRule\" in options) {\n                if (!(options.startRule in peg$startRuleFunctions)) {\n                    throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n                }\n                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n            }\n            function text2() {\n                return input.substring(peg$savedPos, peg$currPos);\n            }\n            function offset() {\n                return peg$savedPos;\n            }\n            function range() {\n                return [\n                    peg$savedPos,\n                    peg$currPos\n                ];\n            }\n            function location() {\n                return peg$computeLocation(peg$savedPos, peg$currPos);\n            }\n            function expected(description, location2) {\n                location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n                throw peg$buildStructuredError([\n                    peg$otherExpectation(description)\n                ], input.substring(peg$savedPos, peg$currPos), location2);\n            }\n            function error2(message, location2) {\n                location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n                throw peg$buildSimpleError(message, location2);\n            }\n            function peg$literalExpectation(text3, ignoreCase) {\n                return {\n                    type: \"literal\",\n                    text: text3,\n                    ignoreCase\n                };\n            }\n            function peg$classExpectation(parts, inverted, ignoreCase) {\n                return {\n                    type: \"class\",\n                    parts,\n                    inverted,\n                    ignoreCase\n                };\n            }\n            function peg$anyExpectation() {\n                return {\n                    type: \"any\"\n                };\n            }\n            function peg$endExpectation() {\n                return {\n                    type: \"end\"\n                };\n            }\n            function peg$otherExpectation(description) {\n                return {\n                    type: \"other\",\n                    description\n                };\n            }\n            function peg$computePosDetails(pos) {\n                var details = peg$posDetailsCache[pos];\n                var p;\n                if (details) {\n                    return details;\n                } else {\n                    p = pos - 1;\n                    while(!peg$posDetailsCache[p]){\n                        p--;\n                    }\n                    details = peg$posDetailsCache[p];\n                    details = {\n                        line: details.line,\n                        column: details.column\n                    };\n                    while(p < pos){\n                        if (input.charCodeAt(p) === 10) {\n                            details.line++;\n                            details.column = 1;\n                        } else {\n                            details.column++;\n                        }\n                        p++;\n                    }\n                    peg$posDetailsCache[pos] = details;\n                    return details;\n                }\n            }\n            var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n            function peg$computeLocation(startPos, endPos) {\n                var loc = {};\n                if (peg$VALIDFILENAME) loc.filename = options.filename;\n                var startPosDetails = peg$computePosDetails(startPos);\n                loc.start = {\n                    offset: startPos,\n                    line: startPosDetails.line,\n                    column: startPosDetails.column\n                };\n                var endPosDetails = peg$computePosDetails(endPos);\n                loc.end = {\n                    offset: endPos,\n                    line: endPosDetails.line,\n                    column: endPosDetails.column\n                };\n                return loc;\n            }\n            function peg$begin() {\n                peg$expected.push({\n                    pos: peg$currPos,\n                    variants: []\n                });\n            }\n            function peg$expect(expected2) {\n                var top = peg$expected[peg$expected.length - 1];\n                if (peg$currPos < top.pos) {\n                    return;\n                }\n                if (peg$currPos > top.pos) {\n                    top.pos = peg$currPos;\n                    top.variants = [];\n                }\n                top.variants.push(expected2);\n            }\n            function peg$end(invert) {\n                var expected2 = peg$expected.pop();\n                var top = peg$expected[peg$expected.length - 1];\n                var variants = expected2.variants;\n                if (top.pos !== expected2.pos) {\n                    return;\n                }\n                if (invert) {\n                    variants = variants.map(function(e) {\n                        return e.type === \"not\" ? e.expected : {\n                            type: \"not\",\n                            expected: e\n                        };\n                    });\n                }\n                Array.prototype.push.apply(top.variants, variants);\n            }\n            function peg$buildSimpleError(message, location2) {\n                return new peg$SyntaxError(message, null, null, location2);\n            }\n            function peg$buildStructuredError(expected2, found, location2) {\n                return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);\n            }\n            function peg$buildError() {\n                var expected2 = peg$expected[0];\n                var failPos = expected2.pos;\n                return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));\n            }\n            function peg$parseTop() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$parseTopLevelValue();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseAnnotation();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseTagOpen();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parseTagClose();\n                        }\n                    }\n                }\n                return s0;\n            }\n            function peg$parseTopLevelValue() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseVariable();\n                if (s1 === peg$FAILED) {\n                    s1 = peg$parseFunction();\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f0(s1);\n                }\n                s0 = s1;\n                return s0;\n            }\n            function peg$parseAnnotation() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagAttributes();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f1(s1);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagOpen() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagName();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    s3 = peg$currPos;\n                    s4 = peg$parseValue();\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parse_();\n                        if (s5 === peg$FAILED) {\n                            s5 = null;\n                        }\n                        peg$savedPos = s3;\n                        s3 = peg$f2(s1, s4);\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    s4 = peg$parseTagAttributes();\n                    if (s4 === peg$FAILED) {\n                        s4 = null;\n                    }\n                    s5 = [];\n                    s6 = peg$parse_();\n                    while(s6 !== peg$FAILED){\n                        s5.push(s6);\n                        s6 = peg$parse_();\n                    }\n                    rule$expects(peg$e0);\n                    if (input.charCodeAt(peg$currPos) === 47) {\n                        s6 = peg$c0;\n                        peg$currPos++;\n                    } else {\n                        s6 = peg$FAILED;\n                    }\n                    if (s6 === peg$FAILED) {\n                        s6 = null;\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f3(s1, s3, s4, s6);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagClose() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                rule$expects(peg$e0);\n                if (input.charCodeAt(peg$currPos) === 47) {\n                    s1 = peg$c0;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseTagName();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f4(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagName() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e1);\n                peg$silentFails++;\n                s0 = peg$parseIdentifier();\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseTagAttributes() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagAttributesItem();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseTagAttributesTail();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parseTagAttributesTail();\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f5(s1, s2);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagAttributesTail() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                    while(s2 !== peg$FAILED){\n                        s1.push(s2);\n                        s2 = peg$parse_();\n                    }\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseTagAttributesItem();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f6(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagAttributesItem() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagShortcutId();\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f7(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseTagShortcutClass();\n                    if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$f8(s1);\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseTagAttribute();\n                        if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$f9(s1);\n                        }\n                        s0 = s1;\n                    }\n                }\n                return s0;\n            }\n            function peg$parseTagShortcutClass() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e2);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 46) {\n                    s1 = peg$c1;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f10(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseTagShortcutId() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e3);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 35) {\n                    s1 = peg$c2;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f11(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseTagAttribute() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseIdentifier();\n                if (s1 !== peg$FAILED) {\n                    rule$expects(peg$e4);\n                    if (input.charCodeAt(peg$currPos) === 61) {\n                        s2 = peg$c3;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = peg$parseValue();\n                        if (s3 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f12(s1, s3);\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseFunction() {\n                var s0, s1, s2, s3, s4, s5, s6, s7;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseIdentifier();\n                if (s1 !== peg$FAILED) {\n                    rule$expects(peg$e5);\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                        s2 = peg$c4;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parse_();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parse_();\n                        }\n                        s4 = peg$currPos;\n                        s5 = peg$parseFunctionParameter();\n                        if (s5 === peg$FAILED) {\n                            s5 = null;\n                        }\n                        s6 = [];\n                        s7 = peg$parseFunctionParameterTail();\n                        while(s7 !== peg$FAILED){\n                            s6.push(s7);\n                            s7 = peg$parseFunctionParameterTail();\n                        }\n                        peg$savedPos = s4;\n                        s4 = peg$f13(s1, s5, s6);\n                        rule$expects(peg$e6);\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                            s5 = peg$c5;\n                            peg$currPos++;\n                        } else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f14(s1, s4);\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseFunctionParameter() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                s2 = peg$parseIdentifier();\n                if (s2 !== peg$FAILED) {\n                    rule$expects(peg$e4);\n                    if (input.charCodeAt(peg$currPos) === 61) {\n                        s3 = peg$c3;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s1;\n                        s1 = peg$f15(s2);\n                    } else {\n                        peg$currPos = s1;\n                        s1 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n                if (s1 === peg$FAILED) {\n                    s1 = null;\n                }\n                s2 = peg$parseValue();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f16(s1, s2);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseFunctionParameterTail() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parse_();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parse_();\n                    }\n                    s4 = peg$parseFunctionParameter();\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f17(s4);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTrailingComma() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s1 = [\n                        s1,\n                        s2\n                    ];\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = null;\n                }\n                return s0;\n            }\n            function peg$parseVariable() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e8);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (peg$r0.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parseVariableTail();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parseVariableTail();\n                        }\n                        peg$savedPos = s0;\n                        s0 = peg$f18(s1, s2, s3);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseVariableTail() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 46) {\n                    s1 = peg$c1;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f15(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 91) {\n                        s1 = peg$c7;\n                        peg$currPos++;\n                    } else {\n                        s1 = peg$FAILED;\n                    }\n                    if (s1 !== peg$FAILED) {\n                        s2 = peg$parseValueNumber();\n                        if (s2 === peg$FAILED) {\n                            s2 = peg$parseValueString();\n                        }\n                        if (s2 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 93) {\n                                s3 = peg$c8;\n                                peg$currPos++;\n                            } else {\n                                s3 = peg$FAILED;\n                            }\n                            if (s3 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s0 = peg$f17(s2);\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                return s0;\n            }\n            function peg$parseValue() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$parseValueNull();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseValueBoolean();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseValueString();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parseValueNumber();\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parseValueArray();\n                                if (s0 === peg$FAILED) {\n                                    s0 = peg$parseValueHash();\n                                    if (s0 === peg$FAILED) {\n                                        s0 = peg$parseFunction();\n                                        if (s0 === peg$FAILED) {\n                                            s0 = peg$parseVariable();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return s0;\n            }\n            function peg$parseValueNull() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e9);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 4) === peg$c9) {\n                    s1 = peg$c9;\n                    peg$currPos += 4;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f19();\n                }\n                s0 = s1;\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueBoolean() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e10);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 4) === peg$c10) {\n                    s1 = peg$c10;\n                    peg$currPos += 4;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f20();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 5) === peg$c11) {\n                        s1 = peg$c11;\n                        peg$currPos += 5;\n                    } else {\n                        s1 = peg$FAILED;\n                    }\n                    if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$f21();\n                    }\n                    s0 = s1;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueArray() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                rule$expects(peg$e11);\n                if (input.charCodeAt(peg$currPos) === 91) {\n                    s1 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    s3 = peg$currPos;\n                    s4 = peg$parseValue();\n                    if (s4 !== peg$FAILED) {\n                        s5 = [];\n                        s6 = peg$parseValueArrayTail();\n                        while(s6 !== peg$FAILED){\n                            s5.push(s6);\n                            s6 = peg$parseValueArrayTail();\n                        }\n                        s6 = peg$parseTrailingComma();\n                        peg$savedPos = s3;\n                        s3 = peg$f22(s4, s5);\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    s4 = [];\n                    s5 = peg$parse_();\n                    while(s5 !== peg$FAILED){\n                        s4.push(s5);\n                        s5 = peg$parse_();\n                    }\n                    rule$expects(peg$e12);\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                        s5 = peg$c8;\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                    }\n                    if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f23(s3);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueArrayTail() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parse_();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parse_();\n                    }\n                    s4 = peg$parseValue();\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f17(s4);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueHash() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                rule$expects(peg$e13);\n                if (input.charCodeAt(peg$currPos) === 123) {\n                    s1 = peg$c12;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    s3 = peg$currPos;\n                    s4 = peg$parseValueHashItem();\n                    if (s4 !== peg$FAILED) {\n                        s5 = [];\n                        s6 = peg$parseValueHashTail();\n                        while(s6 !== peg$FAILED){\n                            s5.push(s6);\n                            s6 = peg$parseValueHashTail();\n                        }\n                        s6 = peg$parseTrailingComma();\n                        peg$savedPos = s3;\n                        s3 = peg$f24(s4, s5);\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    s4 = [];\n                    s5 = peg$parse_();\n                    while(s5 !== peg$FAILED){\n                        s4.push(s5);\n                        s5 = peg$parse_();\n                    }\n                    rule$expects(peg$e14);\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                        s5 = peg$c13;\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                    }\n                    if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f25(s3);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueHashTail() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parse_();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parse_();\n                    }\n                    s4 = peg$parseValueHashItem();\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f6(s4);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueHashItem() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseIdentifier();\n                if (s1 === peg$FAILED) {\n                    s1 = peg$parseValueString();\n                }\n                if (s1 !== peg$FAILED) {\n                    rule$expects(peg$e15);\n                    if (input.charCodeAt(peg$currPos) === 58) {\n                        s2 = peg$c14;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parse_();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parse_();\n                        }\n                        s4 = peg$parseValue();\n                        if (s4 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f26(s1, s4);\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueNumber() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e16);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s1 = peg$c15;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 === peg$FAILED) {\n                    s1 = null;\n                }\n                s2 = [];\n                if (peg$r1.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        if (peg$r1.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s3 = peg$FAILED;\n                        }\n                    }\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 46) {\n                        s4 = peg$c1;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = [];\n                        if (peg$r1.test(input.charAt(peg$currPos))) {\n                            s6 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s6 = peg$FAILED;\n                        }\n                        if (s6 !== peg$FAILED) {\n                            while(s6 !== peg$FAILED){\n                                s5.push(s6);\n                                if (peg$r1.test(input.charAt(peg$currPos))) {\n                                    s6 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s6 = peg$FAILED;\n                                }\n                            }\n                        } else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s4 = [\n                                s4,\n                                s5\n                            ];\n                            s3 = s4;\n                        } else {\n                            peg$currPos = s3;\n                            s3 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f27();\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueString() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e17);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                    s1 = peg$c16;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseValueStringChars();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parseValueStringChars();\n                    }\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s3 = peg$c16;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f28(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueStringChars() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                if (peg$r2.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseValueStringEscapes();\n                }\n                return s0;\n            }\n            function peg$parseValueStringEscapes() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 92) {\n                    s1 = peg$c17;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s2 = peg$c16;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                            s2 = peg$c17;\n                            peg$currPos++;\n                        } else {\n                            s2 = peg$FAILED;\n                        }\n                        if (s2 === peg$FAILED) {\n                            s2 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 110) {\n                                s3 = peg$c18;\n                                peg$currPos++;\n                            } else {\n                                s3 = peg$FAILED;\n                            }\n                            if (s3 !== peg$FAILED) {\n                                peg$savedPos = s2;\n                                s3 = peg$f29();\n                            }\n                            s2 = s3;\n                            if (s2 === peg$FAILED) {\n                                s2 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 114) {\n                                    s3 = peg$c19;\n                                    peg$currPos++;\n                                } else {\n                                    s3 = peg$FAILED;\n                                }\n                                if (s3 !== peg$FAILED) {\n                                    peg$savedPos = s2;\n                                    s3 = peg$f30();\n                                }\n                                s2 = s3;\n                                if (s2 === peg$FAILED) {\n                                    s2 = peg$currPos;\n                                    if (input.charCodeAt(peg$currPos) === 116) {\n                                        s3 = peg$c20;\n                                        peg$currPos++;\n                                    } else {\n                                        s3 = peg$FAILED;\n                                    }\n                                    if (s3 !== peg$FAILED) {\n                                        peg$savedPos = s2;\n                                        s3 = peg$f31();\n                                    }\n                                    s2 = s3;\n                                }\n                            }\n                        }\n                    }\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f32(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseIdentifier() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e18);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                s1 = [];\n                if (peg$r3.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    while(s2 !== peg$FAILED){\n                        s1.push(s2);\n                        if (peg$r3.test(input.charAt(peg$currPos))) {\n                            s2 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s2 = peg$FAILED;\n                        }\n                    }\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s0 = input.substring(s0, peg$currPos);\n                } else {\n                    s0 = s1;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parse_() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e19);\n                peg$silentFails++;\n                if (peg$r4.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            const { Variable: Variable2, Function: Function3 } = options;\n            peg$begin();\n            peg$result = peg$startRuleFunction();\n            if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n                return peg$result;\n            } else {\n                if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n                    peg$expect(peg$endExpectation());\n                }\n                throw peg$buildError();\n            }\n        }\n        module2.exports = {\n            SyntaxError: peg$SyntaxError,\n            parse: peg$parse\n        };\n    }\n});\n// node_modules/entities/lib/maps/entities.json\nvar require_entities = __commonJS({\n    \"node_modules/entities/lib/maps/entities.json\" (exports1, module2) {\n        module2.exports = {\n            Aacute: \"\\xc1\",\n            aacute: \"\\xe1\",\n            Abreve: \"Ă\",\n            abreve: \"ă\",\n            ac: \"∾\",\n            acd: \"∿\",\n            acE: \"∾̳\",\n            Acirc: \"\\xc2\",\n            acirc: \"\\xe2\",\n            acute: \"\\xb4\",\n            Acy: \"А\",\n            acy: \"а\",\n            AElig: \"\\xc6\",\n            aelig: \"\\xe6\",\n            af: \"⁡\",\n            Afr: \"\\uD835\\uDD04\",\n            afr: \"\\uD835\\uDD1E\",\n            Agrave: \"\\xc0\",\n            agrave: \"\\xe0\",\n            alefsym: \"ℵ\",\n            aleph: \"ℵ\",\n            Alpha: \"Α\",\n            alpha: \"α\",\n            Amacr: \"Ā\",\n            amacr: \"ā\",\n            amalg: \"⨿\",\n            amp: \"&\",\n            AMP: \"&\",\n            andand: \"⩕\",\n            And: \"⩓\",\n            and: \"∧\",\n            andd: \"⩜\",\n            andslope: \"⩘\",\n            andv: \"⩚\",\n            ang: \"∠\",\n            ange: \"⦤\",\n            angle: \"∠\",\n            angmsdaa: \"⦨\",\n            angmsdab: \"⦩\",\n            angmsdac: \"⦪\",\n            angmsdad: \"⦫\",\n            angmsdae: \"⦬\",\n            angmsdaf: \"⦭\",\n            angmsdag: \"⦮\",\n            angmsdah: \"⦯\",\n            angmsd: \"∡\",\n            angrt: \"∟\",\n            angrtvb: \"⊾\",\n            angrtvbd: \"⦝\",\n            angsph: \"∢\",\n            angst: \"\\xc5\",\n            angzarr: \"⍼\",\n            Aogon: \"Ą\",\n            aogon: \"ą\",\n            Aopf: \"\\uD835\\uDD38\",\n            aopf: \"\\uD835\\uDD52\",\n            apacir: \"⩯\",\n            ap: \"≈\",\n            apE: \"⩰\",\n            ape: \"≊\",\n            apid: \"≋\",\n            apos: \"'\",\n            ApplyFunction: \"⁡\",\n            approx: \"≈\",\n            approxeq: \"≊\",\n            Aring: \"\\xc5\",\n            aring: \"\\xe5\",\n            Ascr: \"\\uD835\\uDC9C\",\n            ascr: \"\\uD835\\uDCB6\",\n            Assign: \"≔\",\n            ast: \"*\",\n            asymp: \"≈\",\n            asympeq: \"≍\",\n            Atilde: \"\\xc3\",\n            atilde: \"\\xe3\",\n            Auml: \"\\xc4\",\n            auml: \"\\xe4\",\n            awconint: \"∳\",\n            awint: \"⨑\",\n            backcong: \"≌\",\n            backepsilon: \"϶\",\n            backprime: \"‵\",\n            backsim: \"∽\",\n            backsimeq: \"⋍\",\n            Backslash: \"∖\",\n            Barv: \"⫧\",\n            barvee: \"⊽\",\n            barwed: \"⌅\",\n            Barwed: \"⌆\",\n            barwedge: \"⌅\",\n            bbrk: \"⎵\",\n            bbrktbrk: \"⎶\",\n            bcong: \"≌\",\n            Bcy: \"Б\",\n            bcy: \"б\",\n            bdquo: \"„\",\n            becaus: \"∵\",\n            because: \"∵\",\n            Because: \"∵\",\n            bemptyv: \"⦰\",\n            bepsi: \"϶\",\n            bernou: \"ℬ\",\n            Bernoullis: \"ℬ\",\n            Beta: \"Β\",\n            beta: \"β\",\n            beth: \"ℶ\",\n            between: \"≬\",\n            Bfr: \"\\uD835\\uDD05\",\n            bfr: \"\\uD835\\uDD1F\",\n            bigcap: \"⋂\",\n            bigcirc: \"◯\",\n            bigcup: \"⋃\",\n            bigodot: \"⨀\",\n            bigoplus: \"⨁\",\n            bigotimes: \"⨂\",\n            bigsqcup: \"⨆\",\n            bigstar: \"★\",\n            bigtriangledown: \"▽\",\n            bigtriangleup: \"△\",\n            biguplus: \"⨄\",\n            bigvee: \"⋁\",\n            bigwedge: \"⋀\",\n            bkarow: \"⤍\",\n            blacklozenge: \"⧫\",\n            blacksquare: \"▪\",\n            blacktriangle: \"▴\",\n            blacktriangledown: \"▾\",\n            blacktriangleleft: \"◂\",\n            blacktriangleright: \"▸\",\n            blank: \"␣\",\n            blk12: \"▒\",\n            blk14: \"░\",\n            blk34: \"▓\",\n            block: \"█\",\n            bne: \"=⃥\",\n            bnequiv: \"≡⃥\",\n            bNot: \"⫭\",\n            bnot: \"⌐\",\n            Bopf: \"\\uD835\\uDD39\",\n            bopf: \"\\uD835\\uDD53\",\n            bot: \"⊥\",\n            bottom: \"⊥\",\n            bowtie: \"⋈\",\n            boxbox: \"⧉\",\n            boxdl: \"┐\",\n            boxdL: \"╕\",\n            boxDl: \"╖\",\n            boxDL: \"╗\",\n            boxdr: \"┌\",\n            boxdR: \"╒\",\n            boxDr: \"╓\",\n            boxDR: \"╔\",\n            boxh: \"─\",\n            boxH: \"═\",\n            boxhd: \"┬\",\n            boxHd: \"╤\",\n            boxhD: \"╥\",\n            boxHD: \"╦\",\n            boxhu: \"┴\",\n            boxHu: \"╧\",\n            boxhU: \"╨\",\n            boxHU: \"╩\",\n            boxminus: \"⊟\",\n            boxplus: \"⊞\",\n            boxtimes: \"⊠\",\n            boxul: \"┘\",\n            boxuL: \"╛\",\n            boxUl: \"╜\",\n            boxUL: \"╝\",\n            boxur: \"└\",\n            boxuR: \"╘\",\n            boxUr: \"╙\",\n            boxUR: \"╚\",\n            boxv: \"│\",\n            boxV: \"║\",\n            boxvh: \"┼\",\n            boxvH: \"╪\",\n            boxVh: \"╫\",\n            boxVH: \"╬\",\n            boxvl: \"┤\",\n            boxvL: \"╡\",\n            boxVl: \"╢\",\n            boxVL: \"╣\",\n            boxvr: \"├\",\n            boxvR: \"╞\",\n            boxVr: \"╟\",\n            boxVR: \"╠\",\n            bprime: \"‵\",\n            breve: \"˘\",\n            Breve: \"˘\",\n            brvbar: \"\\xa6\",\n            bscr: \"\\uD835\\uDCB7\",\n            Bscr: \"ℬ\",\n            bsemi: \"⁏\",\n            bsim: \"∽\",\n            bsime: \"⋍\",\n            bsolb: \"⧅\",\n            bsol: \"\\\\\",\n            bsolhsub: \"⟈\",\n            bull: \"•\",\n            bullet: \"•\",\n            bump: \"≎\",\n            bumpE: \"⪮\",\n            bumpe: \"≏\",\n            Bumpeq: \"≎\",\n            bumpeq: \"≏\",\n            Cacute: \"Ć\",\n            cacute: \"ć\",\n            capand: \"⩄\",\n            capbrcup: \"⩉\",\n            capcap: \"⩋\",\n            cap: \"∩\",\n            Cap: \"⋒\",\n            capcup: \"⩇\",\n            capdot: \"⩀\",\n            CapitalDifferentialD: \"ⅅ\",\n            caps: \"∩︀\",\n            caret: \"⁁\",\n            caron: \"ˇ\",\n            Cayleys: \"ℭ\",\n            ccaps: \"⩍\",\n            Ccaron: \"Č\",\n            ccaron: \"č\",\n            Ccedil: \"\\xc7\",\n            ccedil: \"\\xe7\",\n            Ccirc: \"Ĉ\",\n            ccirc: \"ĉ\",\n            Cconint: \"∰\",\n            ccups: \"⩌\",\n            ccupssm: \"⩐\",\n            Cdot: \"Ċ\",\n            cdot: \"ċ\",\n            cedil: \"\\xb8\",\n            Cedilla: \"\\xb8\",\n            cemptyv: \"⦲\",\n            cent: \"\\xa2\",\n            centerdot: \"\\xb7\",\n            CenterDot: \"\\xb7\",\n            cfr: \"\\uD835\\uDD20\",\n            Cfr: \"ℭ\",\n            CHcy: \"Ч\",\n            chcy: \"ч\",\n            check: \"✓\",\n            checkmark: \"✓\",\n            Chi: \"Χ\",\n            chi: \"χ\",\n            circ: \"ˆ\",\n            circeq: \"≗\",\n            circlearrowleft: \"↺\",\n            circlearrowright: \"↻\",\n            circledast: \"⊛\",\n            circledcirc: \"⊚\",\n            circleddash: \"⊝\",\n            CircleDot: \"⊙\",\n            circledR: \"\\xae\",\n            circledS: \"Ⓢ\",\n            CircleMinus: \"⊖\",\n            CirclePlus: \"⊕\",\n            CircleTimes: \"⊗\",\n            cir: \"○\",\n            cirE: \"⧃\",\n            cire: \"≗\",\n            cirfnint: \"⨐\",\n            cirmid: \"⫯\",\n            cirscir: \"⧂\",\n            ClockwiseContourIntegral: \"∲\",\n            CloseCurlyDoubleQuote: \"”\",\n            CloseCurlyQuote: \"’\",\n            clubs: \"♣\",\n            clubsuit: \"♣\",\n            colon: \":\",\n            Colon: \"∷\",\n            Colone: \"⩴\",\n            colone: \"≔\",\n            coloneq: \"≔\",\n            comma: \",\",\n            commat: \"@\",\n            comp: \"∁\",\n            compfn: \"∘\",\n            complement: \"∁\",\n            complexes: \"ℂ\",\n            cong: \"≅\",\n            congdot: \"⩭\",\n            Congruent: \"≡\",\n            conint: \"∮\",\n            Conint: \"∯\",\n            ContourIntegral: \"∮\",\n            copf: \"\\uD835\\uDD54\",\n            Copf: \"ℂ\",\n            coprod: \"∐\",\n            Coproduct: \"∐\",\n            copy: \"\\xa9\",\n            COPY: \"\\xa9\",\n            copysr: \"℗\",\n            CounterClockwiseContourIntegral: \"∳\",\n            crarr: \"↵\",\n            cross: \"✗\",\n            Cross: \"⨯\",\n            Cscr: \"\\uD835\\uDC9E\",\n            cscr: \"\\uD835\\uDCB8\",\n            csub: \"⫏\",\n            csube: \"⫑\",\n            csup: \"⫐\",\n            csupe: \"⫒\",\n            ctdot: \"⋯\",\n            cudarrl: \"⤸\",\n            cudarrr: \"⤵\",\n            cuepr: \"⋞\",\n            cuesc: \"⋟\",\n            cularr: \"↶\",\n            cularrp: \"⤽\",\n            cupbrcap: \"⩈\",\n            cupcap: \"⩆\",\n            CupCap: \"≍\",\n            cup: \"∪\",\n            Cup: \"⋓\",\n            cupcup: \"⩊\",\n            cupdot: \"⊍\",\n            cupor: \"⩅\",\n            cups: \"∪︀\",\n            curarr: \"↷\",\n            curarrm: \"⤼\",\n            curlyeqprec: \"⋞\",\n            curlyeqsucc: \"⋟\",\n            curlyvee: \"⋎\",\n            curlywedge: \"⋏\",\n            curren: \"\\xa4\",\n            curvearrowleft: \"↶\",\n            curvearrowright: \"↷\",\n            cuvee: \"⋎\",\n            cuwed: \"⋏\",\n            cwconint: \"∲\",\n            cwint: \"∱\",\n            cylcty: \"⌭\",\n            dagger: \"†\",\n            Dagger: \"‡\",\n            daleth: \"ℸ\",\n            darr: \"↓\",\n            Darr: \"↡\",\n            dArr: \"⇓\",\n            dash: \"‐\",\n            Dashv: \"⫤\",\n            dashv: \"⊣\",\n            dbkarow: \"⤏\",\n            dblac: \"˝\",\n            Dcaron: \"Ď\",\n            dcaron: \"ď\",\n            Dcy: \"Д\",\n            dcy: \"д\",\n            ddagger: \"‡\",\n            ddarr: \"⇊\",\n            DD: \"ⅅ\",\n            dd: \"ⅆ\",\n            DDotrahd: \"⤑\",\n            ddotseq: \"⩷\",\n            deg: \"\\xb0\",\n            Del: \"∇\",\n            Delta: \"Δ\",\n            delta: \"δ\",\n            demptyv: \"⦱\",\n            dfisht: \"⥿\",\n            Dfr: \"\\uD835\\uDD07\",\n            dfr: \"\\uD835\\uDD21\",\n            dHar: \"⥥\",\n            dharl: \"⇃\",\n            dharr: \"⇂\",\n            DiacriticalAcute: \"\\xb4\",\n            DiacriticalDot: \"˙\",\n            DiacriticalDoubleAcute: \"˝\",\n            DiacriticalGrave: \"`\",\n            DiacriticalTilde: \"˜\",\n            diam: \"⋄\",\n            diamond: \"⋄\",\n            Diamond: \"⋄\",\n            diamondsuit: \"♦\",\n            diams: \"♦\",\n            die: \"\\xa8\",\n            DifferentialD: \"ⅆ\",\n            digamma: \"ϝ\",\n            disin: \"⋲\",\n            div: \"\\xf7\",\n            divide: \"\\xf7\",\n            divideontimes: \"⋇\",\n            divonx: \"⋇\",\n            DJcy: \"Ђ\",\n            djcy: \"ђ\",\n            dlcorn: \"⌞\",\n            dlcrop: \"⌍\",\n            dollar: \"$\",\n            Dopf: \"\\uD835\\uDD3B\",\n            dopf: \"\\uD835\\uDD55\",\n            Dot: \"\\xa8\",\n            dot: \"˙\",\n            DotDot: \"⃜\",\n            doteq: \"≐\",\n            doteqdot: \"≑\",\n            DotEqual: \"≐\",\n            dotminus: \"∸\",\n            dotplus: \"∔\",\n            dotsquare: \"⊡\",\n            doublebarwedge: \"⌆\",\n            DoubleContourIntegral: \"∯\",\n            DoubleDot: \"\\xa8\",\n            DoubleDownArrow: \"⇓\",\n            DoubleLeftArrow: \"⇐\",\n            DoubleLeftRightArrow: \"⇔\",\n            DoubleLeftTee: \"⫤\",\n            DoubleLongLeftArrow: \"⟸\",\n            DoubleLongLeftRightArrow: \"⟺\",\n            DoubleLongRightArrow: \"⟹\",\n            DoubleRightArrow: \"⇒\",\n            DoubleRightTee: \"⊨\",\n            DoubleUpArrow: \"⇑\",\n            DoubleUpDownArrow: \"⇕\",\n            DoubleVerticalBar: \"∥\",\n            DownArrowBar: \"⤓\",\n            downarrow: \"↓\",\n            DownArrow: \"↓\",\n            Downarrow: \"⇓\",\n            DownArrowUpArrow: \"⇵\",\n            DownBreve: \"̑\",\n            downdownarrows: \"⇊\",\n            downharpoonleft: \"⇃\",\n            downharpoonright: \"⇂\",\n            DownLeftRightVector: \"⥐\",\n            DownLeftTeeVector: \"⥞\",\n            DownLeftVectorBar: \"⥖\",\n            DownLeftVector: \"↽\",\n            DownRightTeeVector: \"⥟\",\n            DownRightVectorBar: \"⥗\",\n            DownRightVector: \"⇁\",\n            DownTeeArrow: \"↧\",\n            DownTee: \"⊤\",\n            drbkarow: \"⤐\",\n            drcorn: \"⌟\",\n            drcrop: \"⌌\",\n            Dscr: \"\\uD835\\uDC9F\",\n            dscr: \"\\uD835\\uDCB9\",\n            DScy: \"Ѕ\",\n            dscy: \"ѕ\",\n            dsol: \"⧶\",\n            Dstrok: \"Đ\",\n            dstrok: \"đ\",\n            dtdot: \"⋱\",\n            dtri: \"▿\",\n            dtrif: \"▾\",\n            duarr: \"⇵\",\n            duhar: \"⥯\",\n            dwangle: \"⦦\",\n            DZcy: \"Џ\",\n            dzcy: \"џ\",\n            dzigrarr: \"⟿\",\n            Eacute: \"\\xc9\",\n            eacute: \"\\xe9\",\n            easter: \"⩮\",\n            Ecaron: \"Ě\",\n            ecaron: \"ě\",\n            Ecirc: \"\\xca\",\n            ecirc: \"\\xea\",\n            ecir: \"≖\",\n            ecolon: \"≕\",\n            Ecy: \"Э\",\n            ecy: \"э\",\n            eDDot: \"⩷\",\n            Edot: \"Ė\",\n            edot: \"ė\",\n            eDot: \"≑\",\n            ee: \"ⅇ\",\n            efDot: \"≒\",\n            Efr: \"\\uD835\\uDD08\",\n            efr: \"\\uD835\\uDD22\",\n            eg: \"⪚\",\n            Egrave: \"\\xc8\",\n            egrave: \"\\xe8\",\n            egs: \"⪖\",\n            egsdot: \"⪘\",\n            el: \"⪙\",\n            Element: \"∈\",\n            elinters: \"⏧\",\n            ell: \"ℓ\",\n            els: \"⪕\",\n            elsdot: \"⪗\",\n            Emacr: \"Ē\",\n            emacr: \"ē\",\n            empty: \"∅\",\n            emptyset: \"∅\",\n            EmptySmallSquare: \"◻\",\n            emptyv: \"∅\",\n            EmptyVerySmallSquare: \"▫\",\n            emsp13: \" \",\n            emsp14: \" \",\n            emsp: \" \",\n            ENG: \"Ŋ\",\n            eng: \"ŋ\",\n            ensp: \" \",\n            Eogon: \"Ę\",\n            eogon: \"ę\",\n            Eopf: \"\\uD835\\uDD3C\",\n            eopf: \"\\uD835\\uDD56\",\n            epar: \"⋕\",\n            eparsl: \"⧣\",\n            eplus: \"⩱\",\n            epsi: \"ε\",\n            Epsilon: \"Ε\",\n            epsilon: \"ε\",\n            epsiv: \"ϵ\",\n            eqcirc: \"≖\",\n            eqcolon: \"≕\",\n            eqsim: \"≂\",\n            eqslantgtr: \"⪖\",\n            eqslantless: \"⪕\",\n            Equal: \"⩵\",\n            equals: \"=\",\n            EqualTilde: \"≂\",\n            equest: \"≟\",\n            Equilibrium: \"⇌\",\n            equiv: \"≡\",\n            equivDD: \"⩸\",\n            eqvparsl: \"⧥\",\n            erarr: \"⥱\",\n            erDot: \"≓\",\n            escr: \"ℯ\",\n            Escr: \"ℰ\",\n            esdot: \"≐\",\n            Esim: \"⩳\",\n            esim: \"≂\",\n            Eta: \"Η\",\n            eta: \"η\",\n            ETH: \"\\xd0\",\n            eth: \"\\xf0\",\n            Euml: \"\\xcb\",\n            euml: \"\\xeb\",\n            euro: \"€\",\n            excl: \"!\",\n            exist: \"∃\",\n            Exists: \"∃\",\n            expectation: \"ℰ\",\n            exponentiale: \"ⅇ\",\n            ExponentialE: \"ⅇ\",\n            fallingdotseq: \"≒\",\n            Fcy: \"Ф\",\n            fcy: \"ф\",\n            female: \"♀\",\n            ffilig: \"ﬃ\",\n            fflig: \"ﬀ\",\n            ffllig: \"ﬄ\",\n            Ffr: \"\\uD835\\uDD09\",\n            ffr: \"\\uD835\\uDD23\",\n            filig: \"ﬁ\",\n            FilledSmallSquare: \"◼\",\n            FilledVerySmallSquare: \"▪\",\n            fjlig: \"fj\",\n            flat: \"♭\",\n            fllig: \"ﬂ\",\n            fltns: \"▱\",\n            fnof: \"ƒ\",\n            Fopf: \"\\uD835\\uDD3D\",\n            fopf: \"\\uD835\\uDD57\",\n            forall: \"∀\",\n            ForAll: \"∀\",\n            fork: \"⋔\",\n            forkv: \"⫙\",\n            Fouriertrf: \"ℱ\",\n            fpartint: \"⨍\",\n            frac12: \"\\xbd\",\n            frac13: \"⅓\",\n            frac14: \"\\xbc\",\n            frac15: \"⅕\",\n            frac16: \"⅙\",\n            frac18: \"⅛\",\n            frac23: \"⅔\",\n            frac25: \"⅖\",\n            frac34: \"\\xbe\",\n            frac35: \"⅗\",\n            frac38: \"⅜\",\n            frac45: \"⅘\",\n            frac56: \"⅚\",\n            frac58: \"⅝\",\n            frac78: \"⅞\",\n            frasl: \"⁄\",\n            frown: \"⌢\",\n            fscr: \"\\uD835\\uDCBB\",\n            Fscr: \"ℱ\",\n            gacute: \"ǵ\",\n            Gamma: \"Γ\",\n            gamma: \"γ\",\n            Gammad: \"Ϝ\",\n            gammad: \"ϝ\",\n            gap: \"⪆\",\n            Gbreve: \"Ğ\",\n            gbreve: \"ğ\",\n            Gcedil: \"Ģ\",\n            Gcirc: \"Ĝ\",\n            gcirc: \"ĝ\",\n            Gcy: \"Г\",\n            gcy: \"г\",\n            Gdot: \"Ġ\",\n            gdot: \"ġ\",\n            ge: \"≥\",\n            gE: \"≧\",\n            gEl: \"⪌\",\n            gel: \"⋛\",\n            geq: \"≥\",\n            geqq: \"≧\",\n            geqslant: \"⩾\",\n            gescc: \"⪩\",\n            ges: \"⩾\",\n            gesdot: \"⪀\",\n            gesdoto: \"⪂\",\n            gesdotol: \"⪄\",\n            gesl: \"⋛︀\",\n            gesles: \"⪔\",\n            Gfr: \"\\uD835\\uDD0A\",\n            gfr: \"\\uD835\\uDD24\",\n            gg: \"≫\",\n            Gg: \"⋙\",\n            ggg: \"⋙\",\n            gimel: \"ℷ\",\n            GJcy: \"Ѓ\",\n            gjcy: \"ѓ\",\n            gla: \"⪥\",\n            gl: \"≷\",\n            glE: \"⪒\",\n            glj: \"⪤\",\n            gnap: \"⪊\",\n            gnapprox: \"⪊\",\n            gne: \"⪈\",\n            gnE: \"≩\",\n            gneq: \"⪈\",\n            gneqq: \"≩\",\n            gnsim: \"⋧\",\n            Gopf: \"\\uD835\\uDD3E\",\n            gopf: \"\\uD835\\uDD58\",\n            grave: \"`\",\n            GreaterEqual: \"≥\",\n            GreaterEqualLess: \"⋛\",\n            GreaterFullEqual: \"≧\",\n            GreaterGreater: \"⪢\",\n            GreaterLess: \"≷\",\n            GreaterSlantEqual: \"⩾\",\n            GreaterTilde: \"≳\",\n            Gscr: \"\\uD835\\uDCA2\",\n            gscr: \"ℊ\",\n            gsim: \"≳\",\n            gsime: \"⪎\",\n            gsiml: \"⪐\",\n            gtcc: \"⪧\",\n            gtcir: \"⩺\",\n            gt: \">\",\n            GT: \">\",\n            Gt: \"≫\",\n            gtdot: \"⋗\",\n            gtlPar: \"⦕\",\n            gtquest: \"⩼\",\n            gtrapprox: \"⪆\",\n            gtrarr: \"⥸\",\n            gtrdot: \"⋗\",\n            gtreqless: \"⋛\",\n            gtreqqless: \"⪌\",\n            gtrless: \"≷\",\n            gtrsim: \"≳\",\n            gvertneqq: \"≩︀\",\n            gvnE: \"≩︀\",\n            Hacek: \"ˇ\",\n            hairsp: \" \",\n            half: \"\\xbd\",\n            hamilt: \"ℋ\",\n            HARDcy: \"Ъ\",\n            hardcy: \"ъ\",\n            harrcir: \"⥈\",\n            harr: \"↔\",\n            hArr: \"⇔\",\n            harrw: \"↭\",\n            Hat: \"^\",\n            hbar: \"ℏ\",\n            Hcirc: \"Ĥ\",\n            hcirc: \"ĥ\",\n            hearts: \"♥\",\n            heartsuit: \"♥\",\n            hellip: \"…\",\n            hercon: \"⊹\",\n            hfr: \"\\uD835\\uDD25\",\n            Hfr: \"ℌ\",\n            HilbertSpace: \"ℋ\",\n            hksearow: \"⤥\",\n            hkswarow: \"⤦\",\n            hoarr: \"⇿\",\n            homtht: \"∻\",\n            hookleftarrow: \"↩\",\n            hookrightarrow: \"↪\",\n            hopf: \"\\uD835\\uDD59\",\n            Hopf: \"ℍ\",\n            horbar: \"―\",\n            HorizontalLine: \"─\",\n            hscr: \"\\uD835\\uDCBD\",\n            Hscr: \"ℋ\",\n            hslash: \"ℏ\",\n            Hstrok: \"Ħ\",\n            hstrok: \"ħ\",\n            HumpDownHump: \"≎\",\n            HumpEqual: \"≏\",\n            hybull: \"⁃\",\n            hyphen: \"‐\",\n            Iacute: \"\\xcd\",\n            iacute: \"\\xed\",\n            ic: \"⁣\",\n            Icirc: \"\\xce\",\n            icirc: \"\\xee\",\n            Icy: \"И\",\n            icy: \"и\",\n            Idot: \"İ\",\n            IEcy: \"Е\",\n            iecy: \"е\",\n            iexcl: \"\\xa1\",\n            iff: \"⇔\",\n            ifr: \"\\uD835\\uDD26\",\n            Ifr: \"ℑ\",\n            Igrave: \"\\xcc\",\n            igrave: \"\\xec\",\n            ii: \"ⅈ\",\n            iiiint: \"⨌\",\n            iiint: \"∭\",\n            iinfin: \"⧜\",\n            iiota: \"℩\",\n            IJlig: \"Ĳ\",\n            ijlig: \"ĳ\",\n            Imacr: \"Ī\",\n            imacr: \"ī\",\n            image: \"ℑ\",\n            ImaginaryI: \"ⅈ\",\n            imagline: \"ℐ\",\n            imagpart: \"ℑ\",\n            imath: \"ı\",\n            Im: \"ℑ\",\n            imof: \"⊷\",\n            imped: \"Ƶ\",\n            Implies: \"⇒\",\n            incare: \"℅\",\n            in: \"∈\",\n            infin: \"∞\",\n            infintie: \"⧝\",\n            inodot: \"ı\",\n            intcal: \"⊺\",\n            int: \"∫\",\n            Int: \"∬\",\n            integers: \"ℤ\",\n            Integral: \"∫\",\n            intercal: \"⊺\",\n            Intersection: \"⋂\",\n            intlarhk: \"⨗\",\n            intprod: \"⨼\",\n            InvisibleComma: \"⁣\",\n            InvisibleTimes: \"⁢\",\n            IOcy: \"Ё\",\n            iocy: \"ё\",\n            Iogon: \"Į\",\n            iogon: \"į\",\n            Iopf: \"\\uD835\\uDD40\",\n            iopf: \"\\uD835\\uDD5A\",\n            Iota: \"Ι\",\n            iota: \"ι\",\n            iprod: \"⨼\",\n            iquest: \"\\xbf\",\n            iscr: \"\\uD835\\uDCBE\",\n            Iscr: \"ℐ\",\n            isin: \"∈\",\n            isindot: \"⋵\",\n            isinE: \"⋹\",\n            isins: \"⋴\",\n            isinsv: \"⋳\",\n            isinv: \"∈\",\n            it: \"⁢\",\n            Itilde: \"Ĩ\",\n            itilde: \"ĩ\",\n            Iukcy: \"І\",\n            iukcy: \"і\",\n            Iuml: \"\\xcf\",\n            iuml: \"\\xef\",\n            Jcirc: \"Ĵ\",\n            jcirc: \"ĵ\",\n            Jcy: \"Й\",\n            jcy: \"й\",\n            Jfr: \"\\uD835\\uDD0D\",\n            jfr: \"\\uD835\\uDD27\",\n            jmath: \"ȷ\",\n            Jopf: \"\\uD835\\uDD41\",\n            jopf: \"\\uD835\\uDD5B\",\n            Jscr: \"\\uD835\\uDCA5\",\n            jscr: \"\\uD835\\uDCBF\",\n            Jsercy: \"Ј\",\n            jsercy: \"ј\",\n            Jukcy: \"Є\",\n            jukcy: \"є\",\n            Kappa: \"Κ\",\n            kappa: \"κ\",\n            kappav: \"ϰ\",\n            Kcedil: \"Ķ\",\n            kcedil: \"ķ\",\n            Kcy: \"К\",\n            kcy: \"к\",\n            Kfr: \"\\uD835\\uDD0E\",\n            kfr: \"\\uD835\\uDD28\",\n            kgreen: \"ĸ\",\n            KHcy: \"Х\",\n            khcy: \"х\",\n            KJcy: \"Ќ\",\n            kjcy: \"ќ\",\n            Kopf: \"\\uD835\\uDD42\",\n            kopf: \"\\uD835\\uDD5C\",\n            Kscr: \"\\uD835\\uDCA6\",\n            kscr: \"\\uD835\\uDCC0\",\n            lAarr: \"⇚\",\n            Lacute: \"Ĺ\",\n            lacute: \"ĺ\",\n            laemptyv: \"⦴\",\n            lagran: \"ℒ\",\n            Lambda: \"Λ\",\n            lambda: \"λ\",\n            lang: \"⟨\",\n            Lang: \"⟪\",\n            langd: \"⦑\",\n            langle: \"⟨\",\n            lap: \"⪅\",\n            Laplacetrf: \"ℒ\",\n            laquo: \"\\xab\",\n            larrb: \"⇤\",\n            larrbfs: \"⤟\",\n            larr: \"←\",\n            Larr: \"↞\",\n            lArr: \"⇐\",\n            larrfs: \"⤝\",\n            larrhk: \"↩\",\n            larrlp: \"↫\",\n            larrpl: \"⤹\",\n            larrsim: \"⥳\",\n            larrtl: \"↢\",\n            latail: \"⤙\",\n            lAtail: \"⤛\",\n            lat: \"⪫\",\n            late: \"⪭\",\n            lates: \"⪭︀\",\n            lbarr: \"⤌\",\n            lBarr: \"⤎\",\n            lbbrk: \"❲\",\n            lbrace: \"{\",\n            lbrack: \"[\",\n            lbrke: \"⦋\",\n            lbrksld: \"⦏\",\n            lbrkslu: \"⦍\",\n            Lcaron: \"Ľ\",\n            lcaron: \"ľ\",\n            Lcedil: \"Ļ\",\n            lcedil: \"ļ\",\n            lceil: \"⌈\",\n            lcub: \"{\",\n            Lcy: \"Л\",\n            lcy: \"л\",\n            ldca: \"⤶\",\n            ldquo: \"“\",\n            ldquor: \"„\",\n            ldrdhar: \"⥧\",\n            ldrushar: \"⥋\",\n            ldsh: \"↲\",\n            le: \"≤\",\n            lE: \"≦\",\n            LeftAngleBracket: \"⟨\",\n            LeftArrowBar: \"⇤\",\n            leftarrow: \"←\",\n            LeftArrow: \"←\",\n            Leftarrow: \"⇐\",\n            LeftArrowRightArrow: \"⇆\",\n            leftarrowtail: \"↢\",\n            LeftCeiling: \"⌈\",\n            LeftDoubleBracket: \"⟦\",\n            LeftDownTeeVector: \"⥡\",\n            LeftDownVectorBar: \"⥙\",\n            LeftDownVector: \"⇃\",\n            LeftFloor: \"⌊\",\n            leftharpoondown: \"↽\",\n            leftharpoonup: \"↼\",\n            leftleftarrows: \"⇇\",\n            leftrightarrow: \"↔\",\n            LeftRightArrow: \"↔\",\n            Leftrightarrow: \"⇔\",\n            leftrightarrows: \"⇆\",\n            leftrightharpoons: \"⇋\",\n            leftrightsquigarrow: \"↭\",\n            LeftRightVector: \"⥎\",\n            LeftTeeArrow: \"↤\",\n            LeftTee: \"⊣\",\n            LeftTeeVector: \"⥚\",\n            leftthreetimes: \"⋋\",\n            LeftTriangleBar: \"⧏\",\n            LeftTriangle: \"⊲\",\n            LeftTriangleEqual: \"⊴\",\n            LeftUpDownVector: \"⥑\",\n            LeftUpTeeVector: \"⥠\",\n            LeftUpVectorBar: \"⥘\",\n            LeftUpVector: \"↿\",\n            LeftVectorBar: \"⥒\",\n            LeftVector: \"↼\",\n            lEg: \"⪋\",\n            leg: \"⋚\",\n            leq: \"≤\",\n            leqq: \"≦\",\n            leqslant: \"⩽\",\n            lescc: \"⪨\",\n            les: \"⩽\",\n            lesdot: \"⩿\",\n            lesdoto: \"⪁\",\n            lesdotor: \"⪃\",\n            lesg: \"⋚︀\",\n            lesges: \"⪓\",\n            lessapprox: \"⪅\",\n            lessdot: \"⋖\",\n            lesseqgtr: \"⋚\",\n            lesseqqgtr: \"⪋\",\n            LessEqualGreater: \"⋚\",\n            LessFullEqual: \"≦\",\n            LessGreater: \"≶\",\n            lessgtr: \"≶\",\n            LessLess: \"⪡\",\n            lesssim: \"≲\",\n            LessSlantEqual: \"⩽\",\n            LessTilde: \"≲\",\n            lfisht: \"⥼\",\n            lfloor: \"⌊\",\n            Lfr: \"\\uD835\\uDD0F\",\n            lfr: \"\\uD835\\uDD29\",\n            lg: \"≶\",\n            lgE: \"⪑\",\n            lHar: \"⥢\",\n            lhard: \"↽\",\n            lharu: \"↼\",\n            lharul: \"⥪\",\n            lhblk: \"▄\",\n            LJcy: \"Љ\",\n            ljcy: \"љ\",\n            llarr: \"⇇\",\n            ll: \"≪\",\n            Ll: \"⋘\",\n            llcorner: \"⌞\",\n            Lleftarrow: \"⇚\",\n            llhard: \"⥫\",\n            lltri: \"◺\",\n            Lmidot: \"Ŀ\",\n            lmidot: \"ŀ\",\n            lmoustache: \"⎰\",\n            lmoust: \"⎰\",\n            lnap: \"⪉\",\n            lnapprox: \"⪉\",\n            lne: \"⪇\",\n            lnE: \"≨\",\n            lneq: \"⪇\",\n            lneqq: \"≨\",\n            lnsim: \"⋦\",\n            loang: \"⟬\",\n            loarr: \"⇽\",\n            lobrk: \"⟦\",\n            longleftarrow: \"⟵\",\n            LongLeftArrow: \"⟵\",\n            Longleftarrow: \"⟸\",\n            longleftrightarrow: \"⟷\",\n            LongLeftRightArrow: \"⟷\",\n            Longleftrightarrow: \"⟺\",\n            longmapsto: \"⟼\",\n            longrightarrow: \"⟶\",\n            LongRightArrow: \"⟶\",\n            Longrightarrow: \"⟹\",\n            looparrowleft: \"↫\",\n            looparrowright: \"↬\",\n            lopar: \"⦅\",\n            Lopf: \"\\uD835\\uDD43\",\n            lopf: \"\\uD835\\uDD5D\",\n            loplus: \"⨭\",\n            lotimes: \"⨴\",\n            lowast: \"∗\",\n            lowbar: \"_\",\n            LowerLeftArrow: \"↙\",\n            LowerRightArrow: \"↘\",\n            loz: \"◊\",\n            lozenge: \"◊\",\n            lozf: \"⧫\",\n            lpar: \"(\",\n            lparlt: \"⦓\",\n            lrarr: \"⇆\",\n            lrcorner: \"⌟\",\n            lrhar: \"⇋\",\n            lrhard: \"⥭\",\n            lrm: \"‎\",\n            lrtri: \"⊿\",\n            lsaquo: \"‹\",\n            lscr: \"\\uD835\\uDCC1\",\n            Lscr: \"ℒ\",\n            lsh: \"↰\",\n            Lsh: \"↰\",\n            lsim: \"≲\",\n            lsime: \"⪍\",\n            lsimg: \"⪏\",\n            lsqb: \"[\",\n            lsquo: \"‘\",\n            lsquor: \"‚\",\n            Lstrok: \"Ł\",\n            lstrok: \"ł\",\n            ltcc: \"⪦\",\n            ltcir: \"⩹\",\n            lt: \"<\",\n            LT: \"<\",\n            Lt: \"≪\",\n            ltdot: \"⋖\",\n            lthree: \"⋋\",\n            ltimes: \"⋉\",\n            ltlarr: \"⥶\",\n            ltquest: \"⩻\",\n            ltri: \"◃\",\n            ltrie: \"⊴\",\n            ltrif: \"◂\",\n            ltrPar: \"⦖\",\n            lurdshar: \"⥊\",\n            luruhar: \"⥦\",\n            lvertneqq: \"≨︀\",\n            lvnE: \"≨︀\",\n            macr: \"\\xaf\",\n            male: \"♂\",\n            malt: \"✠\",\n            maltese: \"✠\",\n            Map: \"⤅\",\n            map: \"↦\",\n            mapsto: \"↦\",\n            mapstodown: \"↧\",\n            mapstoleft: \"↤\",\n            mapstoup: \"↥\",\n            marker: \"▮\",\n            mcomma: \"⨩\",\n            Mcy: \"М\",\n            mcy: \"м\",\n            mdash: \"—\",\n            mDDot: \"∺\",\n            measuredangle: \"∡\",\n            MediumSpace: \" \",\n            Mellintrf: \"ℳ\",\n            Mfr: \"\\uD835\\uDD10\",\n            mfr: \"\\uD835\\uDD2A\",\n            mho: \"℧\",\n            micro: \"\\xb5\",\n            midast: \"*\",\n            midcir: \"⫰\",\n            mid: \"∣\",\n            middot: \"\\xb7\",\n            minusb: \"⊟\",\n            minus: \"−\",\n            minusd: \"∸\",\n            minusdu: \"⨪\",\n            MinusPlus: \"∓\",\n            mlcp: \"⫛\",\n            mldr: \"…\",\n            mnplus: \"∓\",\n            models: \"⊧\",\n            Mopf: \"\\uD835\\uDD44\",\n            mopf: \"\\uD835\\uDD5E\",\n            mp: \"∓\",\n            mscr: \"\\uD835\\uDCC2\",\n            Mscr: \"ℳ\",\n            mstpos: \"∾\",\n            Mu: \"Μ\",\n            mu: \"μ\",\n            multimap: \"⊸\",\n            mumap: \"⊸\",\n            nabla: \"∇\",\n            Nacute: \"Ń\",\n            nacute: \"ń\",\n            nang: \"∠⃒\",\n            nap: \"≉\",\n            napE: \"⩰̸\",\n            napid: \"≋̸\",\n            napos: \"ŉ\",\n            napprox: \"≉\",\n            natural: \"♮\",\n            naturals: \"ℕ\",\n            natur: \"♮\",\n            nbsp: \"\\xa0\",\n            nbump: \"≎̸\",\n            nbumpe: \"≏̸\",\n            ncap: \"⩃\",\n            Ncaron: \"Ň\",\n            ncaron: \"ň\",\n            Ncedil: \"Ņ\",\n            ncedil: \"ņ\",\n            ncong: \"≇\",\n            ncongdot: \"⩭̸\",\n            ncup: \"⩂\",\n            Ncy: \"Н\",\n            ncy: \"н\",\n            ndash: \"–\",\n            nearhk: \"⤤\",\n            nearr: \"↗\",\n            neArr: \"⇗\",\n            nearrow: \"↗\",\n            ne: \"≠\",\n            nedot: \"≐̸\",\n            NegativeMediumSpace: \"​\",\n            NegativeThickSpace: \"​\",\n            NegativeThinSpace: \"​\",\n            NegativeVeryThinSpace: \"​\",\n            nequiv: \"≢\",\n            nesear: \"⤨\",\n            nesim: \"≂̸\",\n            NestedGreaterGreater: \"≫\",\n            NestedLessLess: \"≪\",\n            NewLine: \"\\n\",\n            nexist: \"∄\",\n            nexists: \"∄\",\n            Nfr: \"\\uD835\\uDD11\",\n            nfr: \"\\uD835\\uDD2B\",\n            ngE: \"≧̸\",\n            nge: \"≱\",\n            ngeq: \"≱\",\n            ngeqq: \"≧̸\",\n            ngeqslant: \"⩾̸\",\n            nges: \"⩾̸\",\n            nGg: \"⋙̸\",\n            ngsim: \"≵\",\n            nGt: \"≫⃒\",\n            ngt: \"≯\",\n            ngtr: \"≯\",\n            nGtv: \"≫̸\",\n            nharr: \"↮\",\n            nhArr: \"⇎\",\n            nhpar: \"⫲\",\n            ni: \"∋\",\n            nis: \"⋼\",\n            nisd: \"⋺\",\n            niv: \"∋\",\n            NJcy: \"Њ\",\n            njcy: \"њ\",\n            nlarr: \"↚\",\n            nlArr: \"⇍\",\n            nldr: \"‥\",\n            nlE: \"≦̸\",\n            nle: \"≰\",\n            nleftarrow: \"↚\",\n            nLeftarrow: \"⇍\",\n            nleftrightarrow: \"↮\",\n            nLeftrightarrow: \"⇎\",\n            nleq: \"≰\",\n            nleqq: \"≦̸\",\n            nleqslant: \"⩽̸\",\n            nles: \"⩽̸\",\n            nless: \"≮\",\n            nLl: \"⋘̸\",\n            nlsim: \"≴\",\n            nLt: \"≪⃒\",\n            nlt: \"≮\",\n            nltri: \"⋪\",\n            nltrie: \"⋬\",\n            nLtv: \"≪̸\",\n            nmid: \"∤\",\n            NoBreak: \"⁠\",\n            NonBreakingSpace: \"\\xa0\",\n            nopf: \"\\uD835\\uDD5F\",\n            Nopf: \"ℕ\",\n            Not: \"⫬\",\n            not: \"\\xac\",\n            NotCongruent: \"≢\",\n            NotCupCap: \"≭\",\n            NotDoubleVerticalBar: \"∦\",\n            NotElement: \"∉\",\n            NotEqual: \"≠\",\n            NotEqualTilde: \"≂̸\",\n            NotExists: \"∄\",\n            NotGreater: \"≯\",\n            NotGreaterEqual: \"≱\",\n            NotGreaterFullEqual: \"≧̸\",\n            NotGreaterGreater: \"≫̸\",\n            NotGreaterLess: \"≹\",\n            NotGreaterSlantEqual: \"⩾̸\",\n            NotGreaterTilde: \"≵\",\n            NotHumpDownHump: \"≎̸\",\n            NotHumpEqual: \"≏̸\",\n            notin: \"∉\",\n            notindot: \"⋵̸\",\n            notinE: \"⋹̸\",\n            notinva: \"∉\",\n            notinvb: \"⋷\",\n            notinvc: \"⋶\",\n            NotLeftTriangleBar: \"⧏̸\",\n            NotLeftTriangle: \"⋪\",\n            NotLeftTriangleEqual: \"⋬\",\n            NotLess: \"≮\",\n            NotLessEqual: \"≰\",\n            NotLessGreater: \"≸\",\n            NotLessLess: \"≪̸\",\n            NotLessSlantEqual: \"⩽̸\",\n            NotLessTilde: \"≴\",\n            NotNestedGreaterGreater: \"⪢̸\",\n            NotNestedLessLess: \"⪡̸\",\n            notni: \"∌\",\n            notniva: \"∌\",\n            notnivb: \"⋾\",\n            notnivc: \"⋽\",\n            NotPrecedes: \"⊀\",\n            NotPrecedesEqual: \"⪯̸\",\n            NotPrecedesSlantEqual: \"⋠\",\n            NotReverseElement: \"∌\",\n            NotRightTriangleBar: \"⧐̸\",\n            NotRightTriangle: \"⋫\",\n            NotRightTriangleEqual: \"⋭\",\n            NotSquareSubset: \"⊏̸\",\n            NotSquareSubsetEqual: \"⋢\",\n            NotSquareSuperset: \"⊐̸\",\n            NotSquareSupersetEqual: \"⋣\",\n            NotSubset: \"⊂⃒\",\n            NotSubsetEqual: \"⊈\",\n            NotSucceeds: \"⊁\",\n            NotSucceedsEqual: \"⪰̸\",\n            NotSucceedsSlantEqual: \"⋡\",\n            NotSucceedsTilde: \"≿̸\",\n            NotSuperset: \"⊃⃒\",\n            NotSupersetEqual: \"⊉\",\n            NotTilde: \"≁\",\n            NotTildeEqual: \"≄\",\n            NotTildeFullEqual: \"≇\",\n            NotTildeTilde: \"≉\",\n            NotVerticalBar: \"∤\",\n            nparallel: \"∦\",\n            npar: \"∦\",\n            nparsl: \"⫽⃥\",\n            npart: \"∂̸\",\n            npolint: \"⨔\",\n            npr: \"⊀\",\n            nprcue: \"⋠\",\n            nprec: \"⊀\",\n            npreceq: \"⪯̸\",\n            npre: \"⪯̸\",\n            nrarrc: \"⤳̸\",\n            nrarr: \"↛\",\n            nrArr: \"⇏\",\n            nrarrw: \"↝̸\",\n            nrightarrow: \"↛\",\n            nRightarrow: \"⇏\",\n            nrtri: \"⋫\",\n            nrtrie: \"⋭\",\n            nsc: \"⊁\",\n            nsccue: \"⋡\",\n            nsce: \"⪰̸\",\n            Nscr: \"\\uD835\\uDCA9\",\n            nscr: \"\\uD835\\uDCC3\",\n            nshortmid: \"∤\",\n            nshortparallel: \"∦\",\n            nsim: \"≁\",\n            nsime: \"≄\",\n            nsimeq: \"≄\",\n            nsmid: \"∤\",\n            nspar: \"∦\",\n            nsqsube: \"⋢\",\n            nsqsupe: \"⋣\",\n            nsub: \"⊄\",\n            nsubE: \"⫅̸\",\n            nsube: \"⊈\",\n            nsubset: \"⊂⃒\",\n            nsubseteq: \"⊈\",\n            nsubseteqq: \"⫅̸\",\n            nsucc: \"⊁\",\n            nsucceq: \"⪰̸\",\n            nsup: \"⊅\",\n            nsupE: \"⫆̸\",\n            nsupe: \"⊉\",\n            nsupset: \"⊃⃒\",\n            nsupseteq: \"⊉\",\n            nsupseteqq: \"⫆̸\",\n            ntgl: \"≹\",\n            Ntilde: \"\\xd1\",\n            ntilde: \"\\xf1\",\n            ntlg: \"≸\",\n            ntriangleleft: \"⋪\",\n            ntrianglelefteq: \"⋬\",\n            ntriangleright: \"⋫\",\n            ntrianglerighteq: \"⋭\",\n            Nu: \"Ν\",\n            nu: \"ν\",\n            num: \"#\",\n            numero: \"№\",\n            numsp: \" \",\n            nvap: \"≍⃒\",\n            nvdash: \"⊬\",\n            nvDash: \"⊭\",\n            nVdash: \"⊮\",\n            nVDash: \"⊯\",\n            nvge: \"≥⃒\",\n            nvgt: \">⃒\",\n            nvHarr: \"⤄\",\n            nvinfin: \"⧞\",\n            nvlArr: \"⤂\",\n            nvle: \"≤⃒\",\n            nvlt: \"<⃒\",\n            nvltrie: \"⊴⃒\",\n            nvrArr: \"⤃\",\n            nvrtrie: \"⊵⃒\",\n            nvsim: \"∼⃒\",\n            nwarhk: \"⤣\",\n            nwarr: \"↖\",\n            nwArr: \"⇖\",\n            nwarrow: \"↖\",\n            nwnear: \"⤧\",\n            Oacute: \"\\xd3\",\n            oacute: \"\\xf3\",\n            oast: \"⊛\",\n            Ocirc: \"\\xd4\",\n            ocirc: \"\\xf4\",\n            ocir: \"⊚\",\n            Ocy: \"О\",\n            ocy: \"о\",\n            odash: \"⊝\",\n            Odblac: \"Ő\",\n            odblac: \"ő\",\n            odiv: \"⨸\",\n            odot: \"⊙\",\n            odsold: \"⦼\",\n            OElig: \"Œ\",\n            oelig: \"œ\",\n            ofcir: \"⦿\",\n            Ofr: \"\\uD835\\uDD12\",\n            ofr: \"\\uD835\\uDD2C\",\n            ogon: \"˛\",\n            Ograve: \"\\xd2\",\n            ograve: \"\\xf2\",\n            ogt: \"⧁\",\n            ohbar: \"⦵\",\n            ohm: \"Ω\",\n            oint: \"∮\",\n            olarr: \"↺\",\n            olcir: \"⦾\",\n            olcross: \"⦻\",\n            oline: \"‾\",\n            olt: \"⧀\",\n            Omacr: \"Ō\",\n            omacr: \"ō\",\n            Omega: \"Ω\",\n            omega: \"ω\",\n            Omicron: \"Ο\",\n            omicron: \"ο\",\n            omid: \"⦶\",\n            ominus: \"⊖\",\n            Oopf: \"\\uD835\\uDD46\",\n            oopf: \"\\uD835\\uDD60\",\n            opar: \"⦷\",\n            OpenCurlyDoubleQuote: \"“\",\n            OpenCurlyQuote: \"‘\",\n            operp: \"⦹\",\n            oplus: \"⊕\",\n            orarr: \"↻\",\n            Or: \"⩔\",\n            or: \"∨\",\n            ord: \"⩝\",\n            order: \"ℴ\",\n            orderof: \"ℴ\",\n            ordf: \"\\xaa\",\n            ordm: \"\\xba\",\n            origof: \"⊶\",\n            oror: \"⩖\",\n            orslope: \"⩗\",\n            orv: \"⩛\",\n            oS: \"Ⓢ\",\n            Oscr: \"\\uD835\\uDCAA\",\n            oscr: \"ℴ\",\n            Oslash: \"\\xd8\",\n            oslash: \"\\xf8\",\n            osol: \"⊘\",\n            Otilde: \"\\xd5\",\n            otilde: \"\\xf5\",\n            otimesas: \"⨶\",\n            Otimes: \"⨷\",\n            otimes: \"⊗\",\n            Ouml: \"\\xd6\",\n            ouml: \"\\xf6\",\n            ovbar: \"⌽\",\n            OverBar: \"‾\",\n            OverBrace: \"⏞\",\n            OverBracket: \"⎴\",\n            OverParenthesis: \"⏜\",\n            para: \"\\xb6\",\n            parallel: \"∥\",\n            par: \"∥\",\n            parsim: \"⫳\",\n            parsl: \"⫽\",\n            part: \"∂\",\n            PartialD: \"∂\",\n            Pcy: \"П\",\n            pcy: \"п\",\n            percnt: \"%\",\n            period: \".\",\n            permil: \"‰\",\n            perp: \"⊥\",\n            pertenk: \"‱\",\n            Pfr: \"\\uD835\\uDD13\",\n            pfr: \"\\uD835\\uDD2D\",\n            Phi: \"Φ\",\n            phi: \"φ\",\n            phiv: \"ϕ\",\n            phmmat: \"ℳ\",\n            phone: \"☎\",\n            Pi: \"Π\",\n            pi: \"π\",\n            pitchfork: \"⋔\",\n            piv: \"ϖ\",\n            planck: \"ℏ\",\n            planckh: \"ℎ\",\n            plankv: \"ℏ\",\n            plusacir: \"⨣\",\n            plusb: \"⊞\",\n            pluscir: \"⨢\",\n            plus: \"+\",\n            plusdo: \"∔\",\n            plusdu: \"⨥\",\n            pluse: \"⩲\",\n            PlusMinus: \"\\xb1\",\n            plusmn: \"\\xb1\",\n            plussim: \"⨦\",\n            plustwo: \"⨧\",\n            pm: \"\\xb1\",\n            Poincareplane: \"ℌ\",\n            pointint: \"⨕\",\n            popf: \"\\uD835\\uDD61\",\n            Popf: \"ℙ\",\n            pound: \"\\xa3\",\n            prap: \"⪷\",\n            Pr: \"⪻\",\n            pr: \"≺\",\n            prcue: \"≼\",\n            precapprox: \"⪷\",\n            prec: \"≺\",\n            preccurlyeq: \"≼\",\n            Precedes: \"≺\",\n            PrecedesEqual: \"⪯\",\n            PrecedesSlantEqual: \"≼\",\n            PrecedesTilde: \"≾\",\n            preceq: \"⪯\",\n            precnapprox: \"⪹\",\n            precneqq: \"⪵\",\n            precnsim: \"⋨\",\n            pre: \"⪯\",\n            prE: \"⪳\",\n            precsim: \"≾\",\n            prime: \"′\",\n            Prime: \"″\",\n            primes: \"ℙ\",\n            prnap: \"⪹\",\n            prnE: \"⪵\",\n            prnsim: \"⋨\",\n            prod: \"∏\",\n            Product: \"∏\",\n            profalar: \"⌮\",\n            profline: \"⌒\",\n            profsurf: \"⌓\",\n            prop: \"∝\",\n            Proportional: \"∝\",\n            Proportion: \"∷\",\n            propto: \"∝\",\n            prsim: \"≾\",\n            prurel: \"⊰\",\n            Pscr: \"\\uD835\\uDCAB\",\n            pscr: \"\\uD835\\uDCC5\",\n            Psi: \"Ψ\",\n            psi: \"ψ\",\n            puncsp: \" \",\n            Qfr: \"\\uD835\\uDD14\",\n            qfr: \"\\uD835\\uDD2E\",\n            qint: \"⨌\",\n            qopf: \"\\uD835\\uDD62\",\n            Qopf: \"ℚ\",\n            qprime: \"⁗\",\n            Qscr: \"\\uD835\\uDCAC\",\n            qscr: \"\\uD835\\uDCC6\",\n            quaternions: \"ℍ\",\n            quatint: \"⨖\",\n            quest: \"?\",\n            questeq: \"≟\",\n            quot: '\"',\n            QUOT: '\"',\n            rAarr: \"⇛\",\n            race: \"∽̱\",\n            Racute: \"Ŕ\",\n            racute: \"ŕ\",\n            radic: \"√\",\n            raemptyv: \"⦳\",\n            rang: \"⟩\",\n            Rang: \"⟫\",\n            rangd: \"⦒\",\n            range: \"⦥\",\n            rangle: \"⟩\",\n            raquo: \"\\xbb\",\n            rarrap: \"⥵\",\n            rarrb: \"⇥\",\n            rarrbfs: \"⤠\",\n            rarrc: \"⤳\",\n            rarr: \"→\",\n            Rarr: \"↠\",\n            rArr: \"⇒\",\n            rarrfs: \"⤞\",\n            rarrhk: \"↪\",\n            rarrlp: \"↬\",\n            rarrpl: \"⥅\",\n            rarrsim: \"⥴\",\n            Rarrtl: \"⤖\",\n            rarrtl: \"↣\",\n            rarrw: \"↝\",\n            ratail: \"⤚\",\n            rAtail: \"⤜\",\n            ratio: \"∶\",\n            rationals: \"ℚ\",\n            rbarr: \"⤍\",\n            rBarr: \"⤏\",\n            RBarr: \"⤐\",\n            rbbrk: \"❳\",\n            rbrace: \"}\",\n            rbrack: \"]\",\n            rbrke: \"⦌\",\n            rbrksld: \"⦎\",\n            rbrkslu: \"⦐\",\n            Rcaron: \"Ř\",\n            rcaron: \"ř\",\n            Rcedil: \"Ŗ\",\n            rcedil: \"ŗ\",\n            rceil: \"⌉\",\n            rcub: \"}\",\n            Rcy: \"Р\",\n            rcy: \"р\",\n            rdca: \"⤷\",\n            rdldhar: \"⥩\",\n            rdquo: \"”\",\n            rdquor: \"”\",\n            rdsh: \"↳\",\n            real: \"ℜ\",\n            realine: \"ℛ\",\n            realpart: \"ℜ\",\n            reals: \"ℝ\",\n            Re: \"ℜ\",\n            rect: \"▭\",\n            reg: \"\\xae\",\n            REG: \"\\xae\",\n            ReverseElement: \"∋\",\n            ReverseEquilibrium: \"⇋\",\n            ReverseUpEquilibrium: \"⥯\",\n            rfisht: \"⥽\",\n            rfloor: \"⌋\",\n            rfr: \"\\uD835\\uDD2F\",\n            Rfr: \"ℜ\",\n            rHar: \"⥤\",\n            rhard: \"⇁\",\n            rharu: \"⇀\",\n            rharul: \"⥬\",\n            Rho: \"Ρ\",\n            rho: \"ρ\",\n            rhov: \"ϱ\",\n            RightAngleBracket: \"⟩\",\n            RightArrowBar: \"⇥\",\n            rightarrow: \"→\",\n            RightArrow: \"→\",\n            Rightarrow: \"⇒\",\n            RightArrowLeftArrow: \"⇄\",\n            rightarrowtail: \"↣\",\n            RightCeiling: \"⌉\",\n            RightDoubleBracket: \"⟧\",\n            RightDownTeeVector: \"⥝\",\n            RightDownVectorBar: \"⥕\",\n            RightDownVector: \"⇂\",\n            RightFloor: \"⌋\",\n            rightharpoondown: \"⇁\",\n            rightharpoonup: \"⇀\",\n            rightleftarrows: \"⇄\",\n            rightleftharpoons: \"⇌\",\n            rightrightarrows: \"⇉\",\n            rightsquigarrow: \"↝\",\n            RightTeeArrow: \"↦\",\n            RightTee: \"⊢\",\n            RightTeeVector: \"⥛\",\n            rightthreetimes: \"⋌\",\n            RightTriangleBar: \"⧐\",\n            RightTriangle: \"⊳\",\n            RightTriangleEqual: \"⊵\",\n            RightUpDownVector: \"⥏\",\n            RightUpTeeVector: \"⥜\",\n            RightUpVectorBar: \"⥔\",\n            RightUpVector: \"↾\",\n            RightVectorBar: \"⥓\",\n            RightVector: \"⇀\",\n            ring: \"˚\",\n            risingdotseq: \"≓\",\n            rlarr: \"⇄\",\n            rlhar: \"⇌\",\n            rlm: \"‏\",\n            rmoustache: \"⎱\",\n            rmoust: \"⎱\",\n            rnmid: \"⫮\",\n            roang: \"⟭\",\n            roarr: \"⇾\",\n            robrk: \"⟧\",\n            ropar: \"⦆\",\n            ropf: \"\\uD835\\uDD63\",\n            Ropf: \"ℝ\",\n            roplus: \"⨮\",\n            rotimes: \"⨵\",\n            RoundImplies: \"⥰\",\n            rpar: \")\",\n            rpargt: \"⦔\",\n            rppolint: \"⨒\",\n            rrarr: \"⇉\",\n            Rrightarrow: \"⇛\",\n            rsaquo: \"›\",\n            rscr: \"\\uD835\\uDCC7\",\n            Rscr: \"ℛ\",\n            rsh: \"↱\",\n            Rsh: \"↱\",\n            rsqb: \"]\",\n            rsquo: \"’\",\n            rsquor: \"’\",\n            rthree: \"⋌\",\n            rtimes: \"⋊\",\n            rtri: \"▹\",\n            rtrie: \"⊵\",\n            rtrif: \"▸\",\n            rtriltri: \"⧎\",\n            RuleDelayed: \"⧴\",\n            ruluhar: \"⥨\",\n            rx: \"℞\",\n            Sacute: \"Ś\",\n            sacute: \"ś\",\n            sbquo: \"‚\",\n            scap: \"⪸\",\n            Scaron: \"Š\",\n            scaron: \"š\",\n            Sc: \"⪼\",\n            sc: \"≻\",\n            sccue: \"≽\",\n            sce: \"⪰\",\n            scE: \"⪴\",\n            Scedil: \"Ş\",\n            scedil: \"ş\",\n            Scirc: \"Ŝ\",\n            scirc: \"ŝ\",\n            scnap: \"⪺\",\n            scnE: \"⪶\",\n            scnsim: \"⋩\",\n            scpolint: \"⨓\",\n            scsim: \"≿\",\n            Scy: \"С\",\n            scy: \"с\",\n            sdotb: \"⊡\",\n            sdot: \"⋅\",\n            sdote: \"⩦\",\n            searhk: \"⤥\",\n            searr: \"↘\",\n            seArr: \"⇘\",\n            searrow: \"↘\",\n            sect: \"\\xa7\",\n            semi: \";\",\n            seswar: \"⤩\",\n            setminus: \"∖\",\n            setmn: \"∖\",\n            sext: \"✶\",\n            Sfr: \"\\uD835\\uDD16\",\n            sfr: \"\\uD835\\uDD30\",\n            sfrown: \"⌢\",\n            sharp: \"♯\",\n            SHCHcy: \"Щ\",\n            shchcy: \"щ\",\n            SHcy: \"Ш\",\n            shcy: \"ш\",\n            ShortDownArrow: \"↓\",\n            ShortLeftArrow: \"←\",\n            shortmid: \"∣\",\n            shortparallel: \"∥\",\n            ShortRightArrow: \"→\",\n            ShortUpArrow: \"↑\",\n            shy: \"\\xad\",\n            Sigma: \"Σ\",\n            sigma: \"σ\",\n            sigmaf: \"ς\",\n            sigmav: \"ς\",\n            sim: \"∼\",\n            simdot: \"⩪\",\n            sime: \"≃\",\n            simeq: \"≃\",\n            simg: \"⪞\",\n            simgE: \"⪠\",\n            siml: \"⪝\",\n            simlE: \"⪟\",\n            simne: \"≆\",\n            simplus: \"⨤\",\n            simrarr: \"⥲\",\n            slarr: \"←\",\n            SmallCircle: \"∘\",\n            smallsetminus: \"∖\",\n            smashp: \"⨳\",\n            smeparsl: \"⧤\",\n            smid: \"∣\",\n            smile: \"⌣\",\n            smt: \"⪪\",\n            smte: \"⪬\",\n            smtes: \"⪬︀\",\n            SOFTcy: \"Ь\",\n            softcy: \"ь\",\n            solbar: \"⌿\",\n            solb: \"⧄\",\n            sol: \"/\",\n            Sopf: \"\\uD835\\uDD4A\",\n            sopf: \"\\uD835\\uDD64\",\n            spades: \"♠\",\n            spadesuit: \"♠\",\n            spar: \"∥\",\n            sqcap: \"⊓\",\n            sqcaps: \"⊓︀\",\n            sqcup: \"⊔\",\n            sqcups: \"⊔︀\",\n            Sqrt: \"√\",\n            sqsub: \"⊏\",\n            sqsube: \"⊑\",\n            sqsubset: \"⊏\",\n            sqsubseteq: \"⊑\",\n            sqsup: \"⊐\",\n            sqsupe: \"⊒\",\n            sqsupset: \"⊐\",\n            sqsupseteq: \"⊒\",\n            square: \"□\",\n            Square: \"□\",\n            SquareIntersection: \"⊓\",\n            SquareSubset: \"⊏\",\n            SquareSubsetEqual: \"⊑\",\n            SquareSuperset: \"⊐\",\n            SquareSupersetEqual: \"⊒\",\n            SquareUnion: \"⊔\",\n            squarf: \"▪\",\n            squ: \"□\",\n            squf: \"▪\",\n            srarr: \"→\",\n            Sscr: \"\\uD835\\uDCAE\",\n            sscr: \"\\uD835\\uDCC8\",\n            ssetmn: \"∖\",\n            ssmile: \"⌣\",\n            sstarf: \"⋆\",\n            Star: \"⋆\",\n            star: \"☆\",\n            starf: \"★\",\n            straightepsilon: \"ϵ\",\n            straightphi: \"ϕ\",\n            strns: \"\\xaf\",\n            sub: \"⊂\",\n            Sub: \"⋐\",\n            subdot: \"⪽\",\n            subE: \"⫅\",\n            sube: \"⊆\",\n            subedot: \"⫃\",\n            submult: \"⫁\",\n            subnE: \"⫋\",\n            subne: \"⊊\",\n            subplus: \"⪿\",\n            subrarr: \"⥹\",\n            subset: \"⊂\",\n            Subset: \"⋐\",\n            subseteq: \"⊆\",\n            subseteqq: \"⫅\",\n            SubsetEqual: \"⊆\",\n            subsetneq: \"⊊\",\n            subsetneqq: \"⫋\",\n            subsim: \"⫇\",\n            subsub: \"⫕\",\n            subsup: \"⫓\",\n            succapprox: \"⪸\",\n            succ: \"≻\",\n            succcurlyeq: \"≽\",\n            Succeeds: \"≻\",\n            SucceedsEqual: \"⪰\",\n            SucceedsSlantEqual: \"≽\",\n            SucceedsTilde: \"≿\",\n            succeq: \"⪰\",\n            succnapprox: \"⪺\",\n            succneqq: \"⪶\",\n            succnsim: \"⋩\",\n            succsim: \"≿\",\n            SuchThat: \"∋\",\n            sum: \"∑\",\n            Sum: \"∑\",\n            sung: \"♪\",\n            sup1: \"\\xb9\",\n            sup2: \"\\xb2\",\n            sup3: \"\\xb3\",\n            sup: \"⊃\",\n            Sup: \"⋑\",\n            supdot: \"⪾\",\n            supdsub: \"⫘\",\n            supE: \"⫆\",\n            supe: \"⊇\",\n            supedot: \"⫄\",\n            Superset: \"⊃\",\n            SupersetEqual: \"⊇\",\n            suphsol: \"⟉\",\n            suphsub: \"⫗\",\n            suplarr: \"⥻\",\n            supmult: \"⫂\",\n            supnE: \"⫌\",\n            supne: \"⊋\",\n            supplus: \"⫀\",\n            supset: \"⊃\",\n            Supset: \"⋑\",\n            supseteq: \"⊇\",\n            supseteqq: \"⫆\",\n            supsetneq: \"⊋\",\n            supsetneqq: \"⫌\",\n            supsim: \"⫈\",\n            supsub: \"⫔\",\n            supsup: \"⫖\",\n            swarhk: \"⤦\",\n            swarr: \"↙\",\n            swArr: \"⇙\",\n            swarrow: \"↙\",\n            swnwar: \"⤪\",\n            szlig: \"\\xdf\",\n            Tab: \"\t\",\n            target: \"⌖\",\n            Tau: \"Τ\",\n            tau: \"τ\",\n            tbrk: \"⎴\",\n            Tcaron: \"Ť\",\n            tcaron: \"ť\",\n            Tcedil: \"Ţ\",\n            tcedil: \"ţ\",\n            Tcy: \"Т\",\n            tcy: \"т\",\n            tdot: \"⃛\",\n            telrec: \"⌕\",\n            Tfr: \"\\uD835\\uDD17\",\n            tfr: \"\\uD835\\uDD31\",\n            there4: \"∴\",\n            therefore: \"∴\",\n            Therefore: \"∴\",\n            Theta: \"Θ\",\n            theta: \"θ\",\n            thetasym: \"ϑ\",\n            thetav: \"ϑ\",\n            thickapprox: \"≈\",\n            thicksim: \"∼\",\n            ThickSpace: \"  \",\n            ThinSpace: \" \",\n            thinsp: \" \",\n            thkap: \"≈\",\n            thksim: \"∼\",\n            THORN: \"\\xde\",\n            thorn: \"\\xfe\",\n            tilde: \"˜\",\n            Tilde: \"∼\",\n            TildeEqual: \"≃\",\n            TildeFullEqual: \"≅\",\n            TildeTilde: \"≈\",\n            timesbar: \"⨱\",\n            timesb: \"⊠\",\n            times: \"\\xd7\",\n            timesd: \"⨰\",\n            tint: \"∭\",\n            toea: \"⤨\",\n            topbot: \"⌶\",\n            topcir: \"⫱\",\n            top: \"⊤\",\n            Topf: \"\\uD835\\uDD4B\",\n            topf: \"\\uD835\\uDD65\",\n            topfork: \"⫚\",\n            tosa: \"⤩\",\n            tprime: \"‴\",\n            trade: \"™\",\n            TRADE: \"™\",\n            triangle: \"▵\",\n            triangledown: \"▿\",\n            triangleleft: \"◃\",\n            trianglelefteq: \"⊴\",\n            triangleq: \"≜\",\n            triangleright: \"▹\",\n            trianglerighteq: \"⊵\",\n            tridot: \"◬\",\n            trie: \"≜\",\n            triminus: \"⨺\",\n            TripleDot: \"⃛\",\n            triplus: \"⨹\",\n            trisb: \"⧍\",\n            tritime: \"⨻\",\n            trpezium: \"⏢\",\n            Tscr: \"\\uD835\\uDCAF\",\n            tscr: \"\\uD835\\uDCC9\",\n            TScy: \"Ц\",\n            tscy: \"ц\",\n            TSHcy: \"Ћ\",\n            tshcy: \"ћ\",\n            Tstrok: \"Ŧ\",\n            tstrok: \"ŧ\",\n            twixt: \"≬\",\n            twoheadleftarrow: \"↞\",\n            twoheadrightarrow: \"↠\",\n            Uacute: \"\\xda\",\n            uacute: \"\\xfa\",\n            uarr: \"↑\",\n            Uarr: \"↟\",\n            uArr: \"⇑\",\n            Uarrocir: \"⥉\",\n            Ubrcy: \"Ў\",\n            ubrcy: \"ў\",\n            Ubreve: \"Ŭ\",\n            ubreve: \"ŭ\",\n            Ucirc: \"\\xdb\",\n            ucirc: \"\\xfb\",\n            Ucy: \"У\",\n            ucy: \"у\",\n            udarr: \"⇅\",\n            Udblac: \"Ű\",\n            udblac: \"ű\",\n            udhar: \"⥮\",\n            ufisht: \"⥾\",\n            Ufr: \"\\uD835\\uDD18\",\n            ufr: \"\\uD835\\uDD32\",\n            Ugrave: \"\\xd9\",\n            ugrave: \"\\xf9\",\n            uHar: \"⥣\",\n            uharl: \"↿\",\n            uharr: \"↾\",\n            uhblk: \"▀\",\n            ulcorn: \"⌜\",\n            ulcorner: \"⌜\",\n            ulcrop: \"⌏\",\n            ultri: \"◸\",\n            Umacr: \"Ū\",\n            umacr: \"ū\",\n            uml: \"\\xa8\",\n            UnderBar: \"_\",\n            UnderBrace: \"⏟\",\n            UnderBracket: \"⎵\",\n            UnderParenthesis: \"⏝\",\n            Union: \"⋃\",\n            UnionPlus: \"⊎\",\n            Uogon: \"Ų\",\n            uogon: \"ų\",\n            Uopf: \"\\uD835\\uDD4C\",\n            uopf: \"\\uD835\\uDD66\",\n            UpArrowBar: \"⤒\",\n            uparrow: \"↑\",\n            UpArrow: \"↑\",\n            Uparrow: \"⇑\",\n            UpArrowDownArrow: \"⇅\",\n            updownarrow: \"↕\",\n            UpDownArrow: \"↕\",\n            Updownarrow: \"⇕\",\n            UpEquilibrium: \"⥮\",\n            upharpoonleft: \"↿\",\n            upharpoonright: \"↾\",\n            uplus: \"⊎\",\n            UpperLeftArrow: \"↖\",\n            UpperRightArrow: \"↗\",\n            upsi: \"υ\",\n            Upsi: \"ϒ\",\n            upsih: \"ϒ\",\n            Upsilon: \"Υ\",\n            upsilon: \"υ\",\n            UpTeeArrow: \"↥\",\n            UpTee: \"⊥\",\n            upuparrows: \"⇈\",\n            urcorn: \"⌝\",\n            urcorner: \"⌝\",\n            urcrop: \"⌎\",\n            Uring: \"Ů\",\n            uring: \"ů\",\n            urtri: \"◹\",\n            Uscr: \"\\uD835\\uDCB0\",\n            uscr: \"\\uD835\\uDCCA\",\n            utdot: \"⋰\",\n            Utilde: \"Ũ\",\n            utilde: \"ũ\",\n            utri: \"▵\",\n            utrif: \"▴\",\n            uuarr: \"⇈\",\n            Uuml: \"\\xdc\",\n            uuml: \"\\xfc\",\n            uwangle: \"⦧\",\n            vangrt: \"⦜\",\n            varepsilon: \"ϵ\",\n            varkappa: \"ϰ\",\n            varnothing: \"∅\",\n            varphi: \"ϕ\",\n            varpi: \"ϖ\",\n            varpropto: \"∝\",\n            varr: \"↕\",\n            vArr: \"⇕\",\n            varrho: \"ϱ\",\n            varsigma: \"ς\",\n            varsubsetneq: \"⊊︀\",\n            varsubsetneqq: \"⫋︀\",\n            varsupsetneq: \"⊋︀\",\n            varsupsetneqq: \"⫌︀\",\n            vartheta: \"ϑ\",\n            vartriangleleft: \"⊲\",\n            vartriangleright: \"⊳\",\n            vBar: \"⫨\",\n            Vbar: \"⫫\",\n            vBarv: \"⫩\",\n            Vcy: \"В\",\n            vcy: \"в\",\n            vdash: \"⊢\",\n            vDash: \"⊨\",\n            Vdash: \"⊩\",\n            VDash: \"⊫\",\n            Vdashl: \"⫦\",\n            veebar: \"⊻\",\n            vee: \"∨\",\n            Vee: \"⋁\",\n            veeeq: \"≚\",\n            vellip: \"⋮\",\n            verbar: \"|\",\n            Verbar: \"‖\",\n            vert: \"|\",\n            Vert: \"‖\",\n            VerticalBar: \"∣\",\n            VerticalLine: \"|\",\n            VerticalSeparator: \"❘\",\n            VerticalTilde: \"≀\",\n            VeryThinSpace: \" \",\n            Vfr: \"\\uD835\\uDD19\",\n            vfr: \"\\uD835\\uDD33\",\n            vltri: \"⊲\",\n            vnsub: \"⊂⃒\",\n            vnsup: \"⊃⃒\",\n            Vopf: \"\\uD835\\uDD4D\",\n            vopf: \"\\uD835\\uDD67\",\n            vprop: \"∝\",\n            vrtri: \"⊳\",\n            Vscr: \"\\uD835\\uDCB1\",\n            vscr: \"\\uD835\\uDCCB\",\n            vsubnE: \"⫋︀\",\n            vsubne: \"⊊︀\",\n            vsupnE: \"⫌︀\",\n            vsupne: \"⊋︀\",\n            Vvdash: \"⊪\",\n            vzigzag: \"⦚\",\n            Wcirc: \"Ŵ\",\n            wcirc: \"ŵ\",\n            wedbar: \"⩟\",\n            wedge: \"∧\",\n            Wedge: \"⋀\",\n            wedgeq: \"≙\",\n            weierp: \"℘\",\n            Wfr: \"\\uD835\\uDD1A\",\n            wfr: \"\\uD835\\uDD34\",\n            Wopf: \"\\uD835\\uDD4E\",\n            wopf: \"\\uD835\\uDD68\",\n            wp: \"℘\",\n            wr: \"≀\",\n            wreath: \"≀\",\n            Wscr: \"\\uD835\\uDCB2\",\n            wscr: \"\\uD835\\uDCCC\",\n            xcap: \"⋂\",\n            xcirc: \"◯\",\n            xcup: \"⋃\",\n            xdtri: \"▽\",\n            Xfr: \"\\uD835\\uDD1B\",\n            xfr: \"\\uD835\\uDD35\",\n            xharr: \"⟷\",\n            xhArr: \"⟺\",\n            Xi: \"Ξ\",\n            xi: \"ξ\",\n            xlarr: \"⟵\",\n            xlArr: \"⟸\",\n            xmap: \"⟼\",\n            xnis: \"⋻\",\n            xodot: \"⨀\",\n            Xopf: \"\\uD835\\uDD4F\",\n            xopf: \"\\uD835\\uDD69\",\n            xoplus: \"⨁\",\n            xotime: \"⨂\",\n            xrarr: \"⟶\",\n            xrArr: \"⟹\",\n            Xscr: \"\\uD835\\uDCB3\",\n            xscr: \"\\uD835\\uDCCD\",\n            xsqcup: \"⨆\",\n            xuplus: \"⨄\",\n            xutri: \"△\",\n            xvee: \"⋁\",\n            xwedge: \"⋀\",\n            Yacute: \"\\xdd\",\n            yacute: \"\\xfd\",\n            YAcy: \"Я\",\n            yacy: \"я\",\n            Ycirc: \"Ŷ\",\n            ycirc: \"ŷ\",\n            Ycy: \"Ы\",\n            ycy: \"ы\",\n            yen: \"\\xa5\",\n            Yfr: \"\\uD835\\uDD1C\",\n            yfr: \"\\uD835\\uDD36\",\n            YIcy: \"Ї\",\n            yicy: \"ї\",\n            Yopf: \"\\uD835\\uDD50\",\n            yopf: \"\\uD835\\uDD6A\",\n            Yscr: \"\\uD835\\uDCB4\",\n            yscr: \"\\uD835\\uDCCE\",\n            YUcy: \"Ю\",\n            yucy: \"ю\",\n            yuml: \"\\xff\",\n            Yuml: \"Ÿ\",\n            Zacute: \"Ź\",\n            zacute: \"ź\",\n            Zcaron: \"Ž\",\n            zcaron: \"ž\",\n            Zcy: \"З\",\n            zcy: \"з\",\n            Zdot: \"Ż\",\n            zdot: \"ż\",\n            zeetrf: \"ℨ\",\n            ZeroWidthSpace: \"​\",\n            Zeta: \"Ζ\",\n            zeta: \"ζ\",\n            zfr: \"\\uD835\\uDD37\",\n            Zfr: \"ℨ\",\n            ZHcy: \"Ж\",\n            zhcy: \"ж\",\n            zigrarr: \"⇝\",\n            zopf: \"\\uD835\\uDD6B\",\n            Zopf: \"ℤ\",\n            Zscr: \"\\uD835\\uDCB5\",\n            zscr: \"\\uD835\\uDCCF\",\n            zwj: \"‍\",\n            zwnj: \"‌\"\n        };\n    }\n});\n// node_modules/markdown-it/lib/common/entities.js\nvar require_entities2 = __commonJS({\n    \"node_modules/markdown-it/lib/common/entities.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = require_entities();\n    }\n});\n// node_modules/uc.micro/categories/P/regex.js\nvar require_regex = __commonJS({\n    \"node_modules/uc.micro/categories/P/regex.js\" (exports1, module2) {\n        module2.exports = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n    }\n});\n// node_modules/mdurl/encode.js\nvar require_encode = __commonJS({\n    \"node_modules/mdurl/encode.js\" (exports1, module2) {\n        \"use strict\";\n        var encodeCache = {};\n        function getEncodeCache(exclude) {\n            var i, ch, cache = encodeCache[exclude];\n            if (cache) {\n                return cache;\n            }\n            cache = encodeCache[exclude] = [];\n            for(i = 0; i < 128; i++){\n                ch = String.fromCharCode(i);\n                if (/^[0-9a-z]$/i.test(ch)) {\n                    cache.push(ch);\n                } else {\n                    cache.push(\"%\" + (\"0\" + i.toString(16).toUpperCase()).slice(-2));\n                }\n            }\n            for(i = 0; i < exclude.length; i++){\n                cache[exclude.charCodeAt(i)] = exclude[i];\n            }\n            return cache;\n        }\n        function encode(string, exclude, keepEscaped) {\n            var i, l, code2, nextCode, cache, result = \"\";\n            if (typeof exclude !== \"string\") {\n                keepEscaped = exclude;\n                exclude = encode.defaultChars;\n            }\n            if (typeof keepEscaped === \"undefined\") {\n                keepEscaped = true;\n            }\n            cache = getEncodeCache(exclude);\n            for(i = 0, l = string.length; i < l; i++){\n                code2 = string.charCodeAt(i);\n                if (keepEscaped && code2 === 37 && i + 2 < l) {\n                    if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n                        result += string.slice(i, i + 3);\n                        i += 2;\n                        continue;\n                    }\n                }\n                if (code2 < 128) {\n                    result += cache[code2];\n                    continue;\n                }\n                if (code2 >= 55296 && code2 <= 57343) {\n                    if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {\n                        nextCode = string.charCodeAt(i + 1);\n                        if (nextCode >= 56320 && nextCode <= 57343) {\n                            result += encodeURIComponent(string[i] + string[i + 1]);\n                            i++;\n                            continue;\n                        }\n                    }\n                    result += \"%EF%BF%BD\";\n                    continue;\n                }\n                result += encodeURIComponent(string[i]);\n            }\n            return result;\n        }\n        encode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n        encode.componentChars = \"-_.!~*'()\";\n        module2.exports = encode;\n    }\n});\n// node_modules/mdurl/decode.js\nvar require_decode = __commonJS({\n    \"node_modules/mdurl/decode.js\" (exports1, module2) {\n        \"use strict\";\n        var decodeCache = {};\n        function getDecodeCache(exclude) {\n            var i, ch, cache = decodeCache[exclude];\n            if (cache) {\n                return cache;\n            }\n            cache = decodeCache[exclude] = [];\n            for(i = 0; i < 128; i++){\n                ch = String.fromCharCode(i);\n                cache.push(ch);\n            }\n            for(i = 0; i < exclude.length; i++){\n                ch = exclude.charCodeAt(i);\n                cache[ch] = \"%\" + (\"0\" + ch.toString(16).toUpperCase()).slice(-2);\n            }\n            return cache;\n        }\n        function decode(string, exclude) {\n            var cache;\n            if (typeof exclude !== \"string\") {\n                exclude = decode.defaultChars;\n            }\n            cache = getDecodeCache(exclude);\n            return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n                var i, l, b1, b2, b3, b4, chr, result = \"\";\n                for(i = 0, l = seq.length; i < l; i += 3){\n                    b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n                    if (b1 < 128) {\n                        result += cache[b1];\n                        continue;\n                    }\n                    if ((b1 & 224) === 192 && i + 3 < l) {\n                        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                        if ((b2 & 192) === 128) {\n                            chr = b1 << 6 & 1984 | b2 & 63;\n                            if (chr < 128) {\n                                result += \"��\";\n                            } else {\n                                result += String.fromCharCode(chr);\n                            }\n                            i += 3;\n                            continue;\n                        }\n                    }\n                    if ((b1 & 240) === 224 && i + 6 < l) {\n                        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                        if ((b2 & 192) === 128 && (b3 & 192) === 128) {\n                            chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;\n                            if (chr < 2048 || chr >= 55296 && chr <= 57343) {\n                                result += \"���\";\n                            } else {\n                                result += String.fromCharCode(chr);\n                            }\n                            i += 6;\n                            continue;\n                        }\n                    }\n                    if ((b1 & 248) === 240 && i + 9 < l) {\n                        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n                        if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {\n                            chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;\n                            if (chr < 65536 || chr > 1114111) {\n                                result += \"����\";\n                            } else {\n                                chr -= 65536;\n                                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));\n                            }\n                            i += 9;\n                            continue;\n                        }\n                    }\n                    result += \"�\";\n                }\n                return result;\n            });\n        }\n        decode.defaultChars = \";/?:@&=+$,#\";\n        decode.componentChars = \"\";\n        module2.exports = decode;\n    }\n});\n// node_modules/mdurl/format.js\nvar require_format = __commonJS({\n    \"node_modules/mdurl/format.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function format2(url) {\n            var result = \"\";\n            result += url.protocol || \"\";\n            result += url.slashes ? \"//\" : \"\";\n            result += url.auth ? url.auth + \"@\" : \"\";\n            if (url.hostname && url.hostname.indexOf(\":\") !== -1) {\n                result += \"[\" + url.hostname + \"]\";\n            } else {\n                result += url.hostname || \"\";\n            }\n            result += url.port ? \":\" + url.port : \"\";\n            result += url.pathname || \"\";\n            result += url.search || \"\";\n            result += url.hash || \"\";\n            return result;\n        };\n    }\n});\n// node_modules/mdurl/parse.js\nvar require_parse = __commonJS({\n    \"node_modules/mdurl/parse.js\" (exports1, module2) {\n        \"use strict\";\n        function Url() {\n            this.protocol = null;\n            this.slashes = null;\n            this.auth = null;\n            this.port = null;\n            this.hostname = null;\n            this.hash = null;\n            this.search = null;\n            this.pathname = null;\n        }\n        var protocolPattern = /^([a-z0-9.+-]+:)/i;\n        var portPattern = /:[0-9]*$/;\n        var simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n        var delims = [\n            \"<\",\n            \">\",\n            '\"',\n            \"`\",\n            \" \",\n            \"\\r\",\n            \"\\n\",\n            \"\t\"\n        ];\n        var unwise = [\n            \"{\",\n            \"}\",\n            \"|\",\n            \"\\\\\",\n            \"^\",\n            \"`\"\n        ].concat(delims);\n        var autoEscape = [\n            \"'\"\n        ].concat(unwise);\n        var nonHostChars = [\n            \"%\",\n            \"/\",\n            \"?\",\n            \";\",\n            \"#\"\n        ].concat(autoEscape);\n        var hostEndingChars = [\n            \"/\",\n            \"?\",\n            \"#\"\n        ];\n        var hostnameMaxLen = 255;\n        var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\n        var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n        var hostlessProtocol = {\n            \"javascript\": true,\n            \"javascript:\": true\n        };\n        var slashedProtocol = {\n            \"http\": true,\n            \"https\": true,\n            \"ftp\": true,\n            \"gopher\": true,\n            \"file\": true,\n            \"http:\": true,\n            \"https:\": true,\n            \"ftp:\": true,\n            \"gopher:\": true,\n            \"file:\": true\n        };\n        function urlParse(url, slashesDenoteHost) {\n            if (url && url instanceof Url) {\n                return url;\n            }\n            var u = new Url();\n            u.parse(url, slashesDenoteHost);\n            return u;\n        }\n        Url.prototype.parse = function(url, slashesDenoteHost) {\n            var i, l, lowerProto, hec, slashes, rest = url;\n            rest = rest.trim();\n            if (!slashesDenoteHost && url.split(\"#\").length === 1) {\n                var simplePath = simplePathPattern.exec(rest);\n                if (simplePath) {\n                    this.pathname = simplePath[1];\n                    if (simplePath[2]) {\n                        this.search = simplePath[2];\n                    }\n                    return this;\n                }\n            }\n            var proto = protocolPattern.exec(rest);\n            if (proto) {\n                proto = proto[0];\n                lowerProto = proto.toLowerCase();\n                this.protocol = proto;\n                rest = rest.substr(proto.length);\n            }\n            if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n                slashes = rest.substr(0, 2) === \"//\";\n                if (slashes && !(proto && hostlessProtocol[proto])) {\n                    rest = rest.substr(2);\n                    this.slashes = true;\n                }\n            }\n            if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n                var hostEnd = -1;\n                for(i = 0; i < hostEndingChars.length; i++){\n                    hec = rest.indexOf(hostEndingChars[i]);\n                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n                        hostEnd = hec;\n                    }\n                }\n                var auth, atSign;\n                if (hostEnd === -1) {\n                    atSign = rest.lastIndexOf(\"@\");\n                } else {\n                    atSign = rest.lastIndexOf(\"@\", hostEnd);\n                }\n                if (atSign !== -1) {\n                    auth = rest.slice(0, atSign);\n                    rest = rest.slice(atSign + 1);\n                    this.auth = auth;\n                }\n                hostEnd = -1;\n                for(i = 0; i < nonHostChars.length; i++){\n                    hec = rest.indexOf(nonHostChars[i]);\n                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n                        hostEnd = hec;\n                    }\n                }\n                if (hostEnd === -1) {\n                    hostEnd = rest.length;\n                }\n                if (rest[hostEnd - 1] === \":\") {\n                    hostEnd--;\n                }\n                var host = rest.slice(0, hostEnd);\n                rest = rest.slice(hostEnd);\n                this.parseHost(host);\n                this.hostname = this.hostname || \"\";\n                var ipv6Hostname = this.hostname[0] === \"[\" && this.hostname[this.hostname.length - 1] === \"]\";\n                if (!ipv6Hostname) {\n                    var hostparts = this.hostname.split(/\\./);\n                    for(i = 0, l = hostparts.length; i < l; i++){\n                        var part = hostparts[i];\n                        if (!part) {\n                            continue;\n                        }\n                        if (!part.match(hostnamePartPattern)) {\n                            var newpart = \"\";\n                            for(var j = 0, k = part.length; j < k; j++){\n                                if (part.charCodeAt(j) > 127) {\n                                    newpart += \"x\";\n                                } else {\n                                    newpart += part[j];\n                                }\n                            }\n                            if (!newpart.match(hostnamePartPattern)) {\n                                var validParts = hostparts.slice(0, i);\n                                var notHost = hostparts.slice(i + 1);\n                                var bit = part.match(hostnamePartStart);\n                                if (bit) {\n                                    validParts.push(bit[1]);\n                                    notHost.unshift(bit[2]);\n                                }\n                                if (notHost.length) {\n                                    rest = notHost.join(\".\") + rest;\n                                }\n                                this.hostname = validParts.join(\".\");\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (this.hostname.length > hostnameMaxLen) {\n                    this.hostname = \"\";\n                }\n                if (ipv6Hostname) {\n                    this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n                }\n            }\n            var hash = rest.indexOf(\"#\");\n            if (hash !== -1) {\n                this.hash = rest.substr(hash);\n                rest = rest.slice(0, hash);\n            }\n            var qm = rest.indexOf(\"?\");\n            if (qm !== -1) {\n                this.search = rest.substr(qm);\n                rest = rest.slice(0, qm);\n            }\n            if (rest) {\n                this.pathname = rest;\n            }\n            if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n                this.pathname = \"\";\n            }\n            return this;\n        };\n        Url.prototype.parseHost = function(host) {\n            var port = portPattern.exec(host);\n            if (port) {\n                port = port[0];\n                if (port !== \":\") {\n                    this.port = port.substr(1);\n                }\n                host = host.substr(0, host.length - port.length);\n            }\n            if (host) {\n                this.hostname = host;\n            }\n        };\n        module2.exports = urlParse;\n    }\n});\n// node_modules/mdurl/index.js\nvar require_mdurl = __commonJS({\n    \"node_modules/mdurl/index.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports.encode = require_encode();\n        module2.exports.decode = require_decode();\n        module2.exports.format = require_format();\n        module2.exports.parse = require_parse();\n    }\n});\n// node_modules/uc.micro/properties/Any/regex.js\nvar require_regex2 = __commonJS({\n    \"node_modules/uc.micro/properties/Any/regex.js\" (exports1, module2) {\n        module2.exports = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n    }\n});\n// node_modules/uc.micro/categories/Cc/regex.js\nvar require_regex3 = __commonJS({\n    \"node_modules/uc.micro/categories/Cc/regex.js\" (exports1, module2) {\n        module2.exports = /[\\0-\\x1F\\x7F-\\x9F]/;\n    }\n});\n// node_modules/uc.micro/categories/Cf/regex.js\nvar require_regex4 = __commonJS({\n    \"node_modules/uc.micro/categories/Cf/regex.js\" (exports1, module2) {\n        module2.exports = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n    }\n});\n// node_modules/uc.micro/categories/Z/regex.js\nvar require_regex5 = __commonJS({\n    \"node_modules/uc.micro/categories/Z/regex.js\" (exports1, module2) {\n        module2.exports = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n    }\n});\n// node_modules/uc.micro/index.js\nvar require_uc = __commonJS({\n    \"node_modules/uc.micro/index.js\" (exports1) {\n        \"use strict\";\n        exports1.Any = require_regex2();\n        exports1.Cc = require_regex3();\n        exports1.Cf = require_regex4();\n        exports1.P = require_regex();\n        exports1.Z = require_regex5();\n    }\n});\n// node_modules/markdown-it/lib/common/utils.js\nvar require_utils = __commonJS({\n    \"node_modules/markdown-it/lib/common/utils.js\" (exports1) {\n        \"use strict\";\n        function _class(obj) {\n            return Object.prototype.toString.call(obj);\n        }\n        function isString(obj) {\n            return _class(obj) === \"[object String]\";\n        }\n        var _hasOwnProperty = Object.prototype.hasOwnProperty;\n        function has(object, key) {\n            return _hasOwnProperty.call(object, key);\n        }\n        function assign(obj) {\n            var sources = Array.prototype.slice.call(arguments, 1);\n            sources.forEach(function(source) {\n                if (!source) {\n                    return;\n                }\n                if (typeof source !== \"object\") {\n                    throw new TypeError(source + \"must be object\");\n                }\n                Object.keys(source).forEach(function(key) {\n                    obj[key] = source[key];\n                });\n            });\n            return obj;\n        }\n        function arrayReplaceAt(src, pos, newElements) {\n            return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n        }\n        function isValidEntityCode(c) {\n            if (c >= 55296 && c <= 57343) {\n                return false;\n            }\n            if (c >= 64976 && c <= 65007) {\n                return false;\n            }\n            if ((c & 65535) === 65535 || (c & 65535) === 65534) {\n                return false;\n            }\n            if (c >= 0 && c <= 8) {\n                return false;\n            }\n            if (c === 11) {\n                return false;\n            }\n            if (c >= 14 && c <= 31) {\n                return false;\n            }\n            if (c >= 127 && c <= 159) {\n                return false;\n            }\n            if (c > 1114111) {\n                return false;\n            }\n            return true;\n        }\n        function fromCodePoint(c) {\n            if (c > 65535) {\n                c -= 65536;\n                var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);\n                return String.fromCharCode(surrogate1, surrogate2);\n            }\n            return String.fromCharCode(c);\n        }\n        var UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\n        var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\n        var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + \"|\" + ENTITY_RE.source, \"gi\");\n        var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n        var entities = require_entities2();\n        function replaceEntityPattern(match, name) {\n            var code2 = 0;\n            if (has(entities, name)) {\n                return entities[name];\n            }\n            if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {\n                code2 = name[1].toLowerCase() === \"x\" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n                if (isValidEntityCode(code2)) {\n                    return fromCodePoint(code2);\n                }\n            }\n            return match;\n        }\n        function unescapeMd(str) {\n            if (str.indexOf(\"\\\\\") < 0) {\n                return str;\n            }\n            return str.replace(UNESCAPE_MD_RE, \"$1\");\n        }\n        function unescapeAll(str) {\n            if (str.indexOf(\"\\\\\") < 0 && str.indexOf(\"&\") < 0) {\n                return str;\n            }\n            return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {\n                if (escaped) {\n                    return escaped;\n                }\n                return replaceEntityPattern(match, entity);\n            });\n        }\n        var HTML_ESCAPE_TEST_RE = /[&<>\"]/;\n        var HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\n        var HTML_REPLACEMENTS = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\"\n        };\n        function replaceUnsafeChar(ch) {\n            return HTML_REPLACEMENTS[ch];\n        }\n        function escapeHtml2(str) {\n            if (HTML_ESCAPE_TEST_RE.test(str)) {\n                return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n            }\n            return str;\n        }\n        var REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n        function escapeRE(str) {\n            return str.replace(REGEXP_ESCAPE_RE, \"\\\\$&\");\n        }\n        function isSpace(code2) {\n            switch(code2){\n                case 9:\n                case 32:\n                    return true;\n            }\n            return false;\n        }\n        function isWhiteSpace(code2) {\n            if (code2 >= 8192 && code2 <= 8202) {\n                return true;\n            }\n            switch(code2){\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 32:\n                case 160:\n                case 5760:\n                case 8239:\n                case 8287:\n                case 12288:\n                    return true;\n            }\n            return false;\n        }\n        var UNICODE_PUNCT_RE = require_regex();\n        function isPunctChar(ch) {\n            return UNICODE_PUNCT_RE.test(ch);\n        }\n        function isMdAsciiPunct(ch) {\n            switch(ch){\n                case 33:\n                case 34:\n                case 35:\n                case 36:\n                case 37:\n                case 38:\n                case 39:\n                case 40:\n                case 41:\n                case 42:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                case 58:\n                case 59:\n                case 60:\n                case 61:\n                case 62:\n                case 63:\n                case 64:\n                case 91:\n                case 92:\n                case 93:\n                case 94:\n                case 95:\n                case 96:\n                case 123:\n                case 124:\n                case 125:\n                case 126:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        function normalizeReference(str) {\n            str = str.trim().replace(/\\s+/g, \" \");\n            if (\"ẞ\".toLowerCase() === \"Ṿ\") {\n                str = str.replace(/ẞ/g, \"\\xdf\");\n            }\n            return str.toLowerCase().toUpperCase();\n        }\n        exports1.lib = {};\n        exports1.lib.mdurl = require_mdurl();\n        exports1.lib.ucmicro = require_uc();\n        exports1.assign = assign;\n        exports1.isString = isString;\n        exports1.has = has;\n        exports1.unescapeMd = unescapeMd;\n        exports1.unescapeAll = unescapeAll;\n        exports1.isValidEntityCode = isValidEntityCode;\n        exports1.fromCodePoint = fromCodePoint;\n        exports1.escapeHtml = escapeHtml2;\n        exports1.arrayReplaceAt = arrayReplaceAt;\n        exports1.isSpace = isSpace;\n        exports1.isWhiteSpace = isWhiteSpace;\n        exports1.isMdAsciiPunct = isMdAsciiPunct;\n        exports1.isPunctChar = isPunctChar;\n        exports1.escapeRE = escapeRE;\n        exports1.normalizeReference = normalizeReference;\n    }\n});\n// node_modules/markdown-it/lib/helpers/parse_link_label.js\nvar require_parse_link_label = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/parse_link_label.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function parseLinkLabel(state, start, disableNested) {\n            var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;\n            state.pos = start + 1;\n            level = 1;\n            while(state.pos < max2){\n                marker = state.src.charCodeAt(state.pos);\n                if (marker === 93) {\n                    level--;\n                    if (level === 0) {\n                        found = true;\n                        break;\n                    }\n                }\n                prevPos = state.pos;\n                state.md.inline.skipToken(state);\n                if (marker === 91) {\n                    if (prevPos === state.pos - 1) {\n                        level++;\n                    } else if (disableNested) {\n                        state.pos = oldPos;\n                        return -1;\n                    }\n                }\n            }\n            if (found) {\n                labelEnd = state.pos;\n            }\n            state.pos = oldPos;\n            return labelEnd;\n        };\n    }\n});\n// node_modules/markdown-it/lib/helpers/parse_link_destination.js\nvar require_parse_link_destination = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/parse_link_destination.js\" (exports1, module2) {\n        \"use strict\";\n        var unescapeAll = require_utils().unescapeAll;\n        module2.exports = function parseLinkDestination(str, pos, max2) {\n            var code2, level, lines = 0, start = pos, result = {\n                ok: false,\n                pos: 0,\n                lines: 0,\n                str: \"\"\n            };\n            if (str.charCodeAt(pos) === 60) {\n                pos++;\n                while(pos < max2){\n                    code2 = str.charCodeAt(pos);\n                    if (code2 === 10) {\n                        return result;\n                    }\n                    if (code2 === 60) {\n                        return result;\n                    }\n                    if (code2 === 62) {\n                        result.pos = pos + 1;\n                        result.str = unescapeAll(str.slice(start + 1, pos));\n                        result.ok = true;\n                        return result;\n                    }\n                    if (code2 === 92 && pos + 1 < max2) {\n                        pos += 2;\n                        continue;\n                    }\n                    pos++;\n                }\n                return result;\n            }\n            level = 0;\n            while(pos < max2){\n                code2 = str.charCodeAt(pos);\n                if (code2 === 32) {\n                    break;\n                }\n                if (code2 < 32 || code2 === 127) {\n                    break;\n                }\n                if (code2 === 92 && pos + 1 < max2) {\n                    if (str.charCodeAt(pos + 1) === 32) {\n                        break;\n                    }\n                    pos += 2;\n                    continue;\n                }\n                if (code2 === 40) {\n                    level++;\n                    if (level > 32) {\n                        return result;\n                    }\n                }\n                if (code2 === 41) {\n                    if (level === 0) {\n                        break;\n                    }\n                    level--;\n                }\n                pos++;\n            }\n            if (start === pos) {\n                return result;\n            }\n            if (level !== 0) {\n                return result;\n            }\n            result.str = unescapeAll(str.slice(start, pos));\n            result.lines = lines;\n            result.pos = pos;\n            result.ok = true;\n            return result;\n        };\n    }\n});\n// node_modules/markdown-it/lib/helpers/parse_link_title.js\nvar require_parse_link_title = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/parse_link_title.js\" (exports1, module2) {\n        \"use strict\";\n        var unescapeAll = require_utils().unescapeAll;\n        module2.exports = function parseLinkTitle(str, pos, max2) {\n            var code2, marker, lines = 0, start = pos, result = {\n                ok: false,\n                pos: 0,\n                lines: 0,\n                str: \"\"\n            };\n            if (pos >= max2) {\n                return result;\n            }\n            marker = str.charCodeAt(pos);\n            if (marker !== 34 && marker !== 39 && marker !== 40) {\n                return result;\n            }\n            pos++;\n            if (marker === 40) {\n                marker = 41;\n            }\n            while(pos < max2){\n                code2 = str.charCodeAt(pos);\n                if (code2 === marker) {\n                    result.pos = pos + 1;\n                    result.lines = lines;\n                    result.str = unescapeAll(str.slice(start + 1, pos));\n                    result.ok = true;\n                    return result;\n                } else if (code2 === 40 && marker === 41) {\n                    return result;\n                } else if (code2 === 10) {\n                    lines++;\n                } else if (code2 === 92 && pos + 1 < max2) {\n                    pos++;\n                    if (str.charCodeAt(pos) === 10) {\n                        lines++;\n                    }\n                }\n                pos++;\n            }\n            return result;\n        };\n    }\n});\n// node_modules/markdown-it/lib/helpers/index.js\nvar require_helpers = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/index.js\" (exports1) {\n        \"use strict\";\n        exports1.parseLinkLabel = require_parse_link_label();\n        exports1.parseLinkDestination = require_parse_link_destination();\n        exports1.parseLinkTitle = require_parse_link_title();\n    }\n});\n// node_modules/markdown-it/lib/renderer.js\nvar require_renderer = __commonJS({\n    \"node_modules/markdown-it/lib/renderer.js\" (exports1, module2) {\n        \"use strict\";\n        var assign = require_utils().assign;\n        var unescapeAll = require_utils().unescapeAll;\n        var escapeHtml2 = require_utils().escapeHtml;\n        var default_rules = {};\n        default_rules.code_inline = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx];\n            return \"<code\" + slf.renderAttrs(token) + \">\" + escapeHtml2(tokens[idx].content) + \"</code>\";\n        };\n        default_rules.code_block = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx];\n            return \"<pre\" + slf.renderAttrs(token) + \"><code>\" + escapeHtml2(tokens[idx].content) + \"</code></pre>\\n\";\n        };\n        default_rules.fence = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : \"\", langName = \"\", langAttrs = \"\", highlighted, i, arr, tmpAttrs, tmpToken;\n            if (info) {\n                arr = info.split(/(\\s+)/g);\n                langName = arr[0];\n                langAttrs = arr.slice(2).join(\"\");\n            }\n            if (options.highlight) {\n                highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);\n            } else {\n                highlighted = escapeHtml2(token.content);\n            }\n            if (highlighted.indexOf(\"<pre\") === 0) {\n                return highlighted + \"\\n\";\n            }\n            if (info) {\n                i = token.attrIndex(\"class\");\n                tmpAttrs = token.attrs ? token.attrs.slice() : [];\n                if (i < 0) {\n                    tmpAttrs.push([\n                        \"class\",\n                        options.langPrefix + langName\n                    ]);\n                } else {\n                    tmpAttrs[i] = tmpAttrs[i].slice();\n                    tmpAttrs[i][1] += \" \" + options.langPrefix + langName;\n                }\n                tmpToken = {\n                    attrs: tmpAttrs\n                };\n                return \"<pre><code\" + slf.renderAttrs(tmpToken) + \">\" + highlighted + \"</code></pre>\\n\";\n            }\n            return \"<pre><code\" + slf.renderAttrs(token) + \">\" + highlighted + \"</code></pre>\\n\";\n        };\n        default_rules.image = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx];\n            token.attrs[token.attrIndex(\"alt\")][1] = slf.renderInlineAsText(token.children, options, env);\n            return slf.renderToken(tokens, idx, options);\n        };\n        default_rules.hardbreak = function(tokens, idx, options) {\n            return options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\";\n        };\n        default_rules.softbreak = function(tokens, idx, options) {\n            return options.breaks ? options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\" : \"\\n\";\n        };\n        default_rules.text = function(tokens, idx) {\n            return escapeHtml2(tokens[idx].content);\n        };\n        default_rules.html_block = function(tokens, idx) {\n            return tokens[idx].content;\n        };\n        default_rules.html_inline = function(tokens, idx) {\n            return tokens[idx].content;\n        };\n        function Renderer() {\n            this.rules = assign({}, default_rules);\n        }\n        Renderer.prototype.renderAttrs = function renderAttrs(token) {\n            var i, l, result;\n            if (!token.attrs) {\n                return \"\";\n            }\n            result = \"\";\n            for(i = 0, l = token.attrs.length; i < l; i++){\n                result += \" \" + escapeHtml2(token.attrs[i][0]) + '=\"' + escapeHtml2(token.attrs[i][1]) + '\"';\n            }\n            return result;\n        };\n        Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n            var nextToken, result = \"\", needLf = false, token = tokens[idx];\n            if (token.hidden) {\n                return \"\";\n            }\n            if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n                result += \"\\n\";\n            }\n            result += (token.nesting === -1 ? \"</\" : \"<\") + token.tag;\n            result += this.renderAttrs(token);\n            if (token.nesting === 0 && options.xhtmlOut) {\n                result += \" /\";\n            }\n            if (token.block) {\n                needLf = true;\n                if (token.nesting === 1) {\n                    if (idx + 1 < tokens.length) {\n                        nextToken = tokens[idx + 1];\n                        if (nextToken.type === \"inline\" || nextToken.hidden) {\n                            needLf = false;\n                        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n                            needLf = false;\n                        }\n                    }\n                }\n            }\n            result += needLf ? \">\\n\" : \">\";\n            return result;\n        };\n        Renderer.prototype.renderInline = function(tokens, options, env) {\n            var type, result = \"\", rules = this.rules;\n            for(var i = 0, len = tokens.length; i < len; i++){\n                type = tokens[i].type;\n                if (typeof rules[type] !== \"undefined\") {\n                    result += rules[type](tokens, i, options, env, this);\n                } else {\n                    result += this.renderToken(tokens, i, options);\n                }\n            }\n            return result;\n        };\n        Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n            var result = \"\";\n            for(var i = 0, len = tokens.length; i < len; i++){\n                if (tokens[i].type === \"text\") {\n                    result += tokens[i].content;\n                } else if (tokens[i].type === \"image\") {\n                    result += this.renderInlineAsText(tokens[i].children, options, env);\n                } else if (tokens[i].type === \"softbreak\") {\n                    result += \"\\n\";\n                }\n            }\n            return result;\n        };\n        Renderer.prototype.render = function(tokens, options, env) {\n            var i, len, type, result = \"\", rules = this.rules;\n            for(i = 0, len = tokens.length; i < len; i++){\n                type = tokens[i].type;\n                if (type === \"inline\") {\n                    result += this.renderInline(tokens[i].children, options, env);\n                } else if (typeof rules[type] !== \"undefined\") {\n                    result += rules[tokens[i].type](tokens, i, options, env, this);\n                } else {\n                    result += this.renderToken(tokens, i, options, env);\n                }\n            }\n            return result;\n        };\n        module2.exports = Renderer;\n    }\n});\n// node_modules/markdown-it/lib/ruler.js\nvar require_ruler = __commonJS({\n    \"node_modules/markdown-it/lib/ruler.js\" (exports1, module2) {\n        \"use strict\";\n        function Ruler() {\n            this.__rules__ = [];\n            this.__cache__ = null;\n        }\n        Ruler.prototype.__find__ = function(name) {\n            for(var i = 0; i < this.__rules__.length; i++){\n                if (this.__rules__[i].name === name) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        Ruler.prototype.__compile__ = function() {\n            var self = this;\n            var chains = [\n                \"\"\n            ];\n            self.__rules__.forEach(function(rule) {\n                if (!rule.enabled) {\n                    return;\n                }\n                rule.alt.forEach(function(altName) {\n                    if (chains.indexOf(altName) < 0) {\n                        chains.push(altName);\n                    }\n                });\n            });\n            self.__cache__ = {};\n            chains.forEach(function(chain) {\n                self.__cache__[chain] = [];\n                self.__rules__.forEach(function(rule) {\n                    if (!rule.enabled) {\n                        return;\n                    }\n                    if (chain && rule.alt.indexOf(chain) < 0) {\n                        return;\n                    }\n                    self.__cache__[chain].push(rule.fn);\n                });\n            });\n        };\n        Ruler.prototype.at = function(name, fn, options) {\n            var index = this.__find__(name);\n            var opt = options || {};\n            if (index === -1) {\n                throw new Error(\"Parser rule not found: \" + name);\n            }\n            this.__rules__[index].fn = fn;\n            this.__rules__[index].alt = opt.alt || [];\n            this.__cache__ = null;\n        };\n        Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n            var index = this.__find__(beforeName);\n            var opt = options || {};\n            if (index === -1) {\n                throw new Error(\"Parser rule not found: \" + beforeName);\n            }\n            this.__rules__.splice(index, 0, {\n                name: ruleName,\n                enabled: true,\n                fn,\n                alt: opt.alt || []\n            });\n            this.__cache__ = null;\n        };\n        Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n            var index = this.__find__(afterName);\n            var opt = options || {};\n            if (index === -1) {\n                throw new Error(\"Parser rule not found: \" + afterName);\n            }\n            this.__rules__.splice(index + 1, 0, {\n                name: ruleName,\n                enabled: true,\n                fn,\n                alt: opt.alt || []\n            });\n            this.__cache__ = null;\n        };\n        Ruler.prototype.push = function(ruleName, fn, options) {\n            var opt = options || {};\n            this.__rules__.push({\n                name: ruleName,\n                enabled: true,\n                fn,\n                alt: opt.alt || []\n            });\n            this.__cache__ = null;\n        };\n        Ruler.prototype.enable = function(list2, ignoreInvalid) {\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            var result = [];\n            list2.forEach(function(name) {\n                var idx = this.__find__(name);\n                if (idx < 0) {\n                    if (ignoreInvalid) {\n                        return;\n                    }\n                    throw new Error(\"Rules manager: invalid rule name \" + name);\n                }\n                this.__rules__[idx].enabled = true;\n                result.push(name);\n            }, this);\n            this.__cache__ = null;\n            return result;\n        };\n        Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            this.__rules__.forEach(function(rule) {\n                rule.enabled = false;\n            });\n            this.enable(list2, ignoreInvalid);\n        };\n        Ruler.prototype.disable = function(list2, ignoreInvalid) {\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            var result = [];\n            list2.forEach(function(name) {\n                var idx = this.__find__(name);\n                if (idx < 0) {\n                    if (ignoreInvalid) {\n                        return;\n                    }\n                    throw new Error(\"Rules manager: invalid rule name \" + name);\n                }\n                this.__rules__[idx].enabled = false;\n                result.push(name);\n            }, this);\n            this.__cache__ = null;\n            return result;\n        };\n        Ruler.prototype.getRules = function(chainName) {\n            if (this.__cache__ === null) {\n                this.__compile__();\n            }\n            return this.__cache__[chainName] || [];\n        };\n        module2.exports = Ruler;\n    }\n});\n// node_modules/markdown-it/lib/rules_core/normalize.js\nvar require_normalize = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/normalize.js\" (exports1, module2) {\n        \"use strict\";\n        var NEWLINES_RE = /\\r\\n?|\\n/g;\n        var NULL_RE = /\\0/g;\n        module2.exports = function normalize(state) {\n            var str;\n            str = state.src.replace(NEWLINES_RE, \"\\n\");\n            str = str.replace(NULL_RE, \"�\");\n            state.src = str;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/block.js\nvar require_block = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/block.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function block4(state) {\n            var token;\n            if (state.inlineMode) {\n                token = new state.Token(\"inline\", \"\", 0);\n                token.content = state.src;\n                token.map = [\n                    0,\n                    1\n                ];\n                token.children = [];\n                state.tokens.push(token);\n            } else {\n                state.md.block.parse(state.src, state.md, state.env, state.tokens);\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/inline.js\nvar require_inline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/inline.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function inline4(state) {\n            var tokens = state.tokens, tok, i, l;\n            for(i = 0, l = tokens.length; i < l; i++){\n                tok = tokens[i];\n                if (tok.type === \"inline\") {\n                    state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/linkify.js\nvar require_linkify = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/linkify.js\" (exports1, module2) {\n        \"use strict\";\n        var arrayReplaceAt = require_utils().arrayReplaceAt;\n        function isLinkOpen(str) {\n            return /^<a[>\\s]/i.test(str);\n        }\n        function isLinkClose(str) {\n            return /^<\\/a\\s*>/i.test(str);\n        }\n        module2.exports = function linkify(state) {\n            var i, j, l, tokens, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;\n            if (!state.md.options.linkify) {\n                return;\n            }\n            for(j = 0, l = blockTokens.length; j < l; j++){\n                if (blockTokens[j].type !== \"inline\" || !state.md.linkify.pretest(blockTokens[j].content)) {\n                    continue;\n                }\n                tokens = blockTokens[j].children;\n                htmlLinkLevel = 0;\n                for(i = tokens.length - 1; i >= 0; i--){\n                    currentToken = tokens[i];\n                    if (currentToken.type === \"link_close\") {\n                        i--;\n                        while(tokens[i].level !== currentToken.level && tokens[i].type !== \"link_open\"){\n                            i--;\n                        }\n                        continue;\n                    }\n                    if (currentToken.type === \"html_inline\") {\n                        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n                            htmlLinkLevel--;\n                        }\n                        if (isLinkClose(currentToken.content)) {\n                            htmlLinkLevel++;\n                        }\n                    }\n                    if (htmlLinkLevel > 0) {\n                        continue;\n                    }\n                    if (currentToken.type === \"text\" && state.md.linkify.test(currentToken.content)) {\n                        text2 = currentToken.content;\n                        links = state.md.linkify.match(text2);\n                        nodes = [];\n                        level = currentToken.level;\n                        lastPos = 0;\n                        for(ln = 0; ln < links.length; ln++){\n                            url = links[ln].url;\n                            fullUrl = state.md.normalizeLink(url);\n                            if (!state.md.validateLink(fullUrl)) {\n                                continue;\n                            }\n                            urlText = links[ln].text;\n                            if (!links[ln].schema) {\n                                urlText = state.md.normalizeLinkText(\"http://\" + urlText).replace(/^http:\\/\\//, \"\");\n                            } else if (links[ln].schema === \"mailto:\" && !/^mailto:/i.test(urlText)) {\n                                urlText = state.md.normalizeLinkText(\"mailto:\" + urlText).replace(/^mailto:/, \"\");\n                            } else {\n                                urlText = state.md.normalizeLinkText(urlText);\n                            }\n                            pos = links[ln].index;\n                            if (pos > lastPos) {\n                                token = new state.Token(\"text\", \"\", 0);\n                                token.content = text2.slice(lastPos, pos);\n                                token.level = level;\n                                nodes.push(token);\n                            }\n                            token = new state.Token(\"link_open\", \"a\", 1);\n                            token.attrs = [\n                                [\n                                    \"href\",\n                                    fullUrl\n                                ]\n                            ];\n                            token.level = level++;\n                            token.markup = \"linkify\";\n                            token.info = \"auto\";\n                            nodes.push(token);\n                            token = new state.Token(\"text\", \"\", 0);\n                            token.content = urlText;\n                            token.level = level;\n                            nodes.push(token);\n                            token = new state.Token(\"link_close\", \"a\", -1);\n                            token.level = --level;\n                            token.markup = \"linkify\";\n                            token.info = \"auto\";\n                            nodes.push(token);\n                            lastPos = links[ln].lastIndex;\n                        }\n                        if (lastPos < text2.length) {\n                            token = new state.Token(\"text\", \"\", 0);\n                            token.content = text2.slice(lastPos);\n                            token.level = level;\n                            nodes.push(token);\n                        }\n                        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n                    }\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/replacements.js\nvar require_replacements = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/replacements.js\" (exports1, module2) {\n        \"use strict\";\n        var RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n        var SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n        var SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\n        var SCOPED_ABBR = {\n            c: \"\\xa9\",\n            r: \"\\xae\",\n            p: \"\\xa7\",\n            tm: \"™\"\n        };\n        function replaceFn(match, name) {\n            return SCOPED_ABBR[name.toLowerCase()];\n        }\n        function replace_scoped(inlineTokens) {\n            var i, token, inside_autolink = 0;\n            for(i = inlineTokens.length - 1; i >= 0; i--){\n                token = inlineTokens[i];\n                if (token.type === \"text\" && !inside_autolink) {\n                    token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n                }\n                if (token.type === \"link_open\" && token.info === \"auto\") {\n                    inside_autolink--;\n                }\n                if (token.type === \"link_close\" && token.info === \"auto\") {\n                    inside_autolink++;\n                }\n            }\n        }\n        function replace_rare(inlineTokens) {\n            var i, token, inside_autolink = 0;\n            for(i = inlineTokens.length - 1; i >= 0; i--){\n                token = inlineTokens[i];\n                if (token.type === \"text\" && !inside_autolink) {\n                    if (RARE_RE.test(token.content)) {\n                        token.content = token.content.replace(/\\+-/g, \"\\xb1\").replace(/\\.{2,}/g, \"…\").replace(/([?!])…/g, \"$1..\").replace(/([?!]){4,}/g, \"$1$1$1\").replace(/,{2,}/g, \",\").replace(/(^|[^-])---(?=[^-]|$)/mg, \"$1—\").replace(/(^|\\s)--(?=\\s|$)/mg, \"$1–\").replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, \"$1–\");\n                    }\n                }\n                if (token.type === \"link_open\" && token.info === \"auto\") {\n                    inside_autolink--;\n                }\n                if (token.type === \"link_close\" && token.info === \"auto\") {\n                    inside_autolink++;\n                }\n            }\n        }\n        module2.exports = function replace(state) {\n            var blkIdx;\n            if (!state.md.options.typographer) {\n                return;\n            }\n            for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n                if (state.tokens[blkIdx].type !== \"inline\") {\n                    continue;\n                }\n                if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n                    replace_scoped(state.tokens[blkIdx].children);\n                }\n                if (RARE_RE.test(state.tokens[blkIdx].content)) {\n                    replace_rare(state.tokens[blkIdx].children);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/smartquotes.js\nvar require_smartquotes = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/smartquotes.js\" (exports1, module2) {\n        \"use strict\";\n        var isWhiteSpace = require_utils().isWhiteSpace;\n        var isPunctChar = require_utils().isPunctChar;\n        var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n        var QUOTE_TEST_RE = /['\"]/;\n        var QUOTE_RE = /['\"]/g;\n        var APOSTROPHE = \"’\";\n        function replaceAt(str, index, ch) {\n            return str.substr(0, index) + ch + str.substr(index + 1);\n        }\n        function process_inlines(tokens, state) {\n            var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n            stack = [];\n            for(i = 0; i < tokens.length; i++){\n                token = tokens[i];\n                thisLevel = tokens[i].level;\n                for(j = stack.length - 1; j >= 0; j--){\n                    if (stack[j].level <= thisLevel) {\n                        break;\n                    }\n                }\n                stack.length = j + 1;\n                if (token.type !== \"text\") {\n                    continue;\n                }\n                text2 = token.content;\n                pos = 0;\n                max2 = text2.length;\n                OUTER: while(pos < max2){\n                    QUOTE_RE.lastIndex = pos;\n                    t = QUOTE_RE.exec(text2);\n                    if (!t) {\n                        break;\n                    }\n                    canOpen = canClose = true;\n                    pos = t.index + 1;\n                    isSingle = t[0] === \"'\";\n                    lastChar = 32;\n                    if (t.index - 1 >= 0) {\n                        lastChar = text2.charCodeAt(t.index - 1);\n                    } else {\n                        for(j = i - 1; j >= 0; j--){\n                            if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\") break;\n                            if (!tokens[j].content) continue;\n                            lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n                            break;\n                        }\n                    }\n                    nextChar = 32;\n                    if (pos < max2) {\n                        nextChar = text2.charCodeAt(pos);\n                    } else {\n                        for(j = i + 1; j < tokens.length; j++){\n                            if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\") break;\n                            if (!tokens[j].content) continue;\n                            nextChar = tokens[j].content.charCodeAt(0);\n                            break;\n                        }\n                    }\n                    isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n                    isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n                    isLastWhiteSpace = isWhiteSpace(lastChar);\n                    isNextWhiteSpace = isWhiteSpace(nextChar);\n                    if (isNextWhiteSpace) {\n                        canOpen = false;\n                    } else if (isNextPunctChar) {\n                        if (!(isLastWhiteSpace || isLastPunctChar)) {\n                            canOpen = false;\n                        }\n                    }\n                    if (isLastWhiteSpace) {\n                        canClose = false;\n                    } else if (isLastPunctChar) {\n                        if (!(isNextWhiteSpace || isNextPunctChar)) {\n                            canClose = false;\n                        }\n                    }\n                    if (nextChar === 34 && t[0] === '\"') {\n                        if (lastChar >= 48 && lastChar <= 57) {\n                            canClose = canOpen = false;\n                        }\n                    }\n                    if (canOpen && canClose) {\n                        canOpen = isLastPunctChar;\n                        canClose = isNextPunctChar;\n                    }\n                    if (!canOpen && !canClose) {\n                        if (isSingle) {\n                            token.content = replaceAt(token.content, t.index, APOSTROPHE);\n                        }\n                        continue;\n                    }\n                    if (canClose) {\n                        for(j = stack.length - 1; j >= 0; j--){\n                            item2 = stack[j];\n                            if (stack[j].level < thisLevel) {\n                                break;\n                            }\n                            if (item2.single === isSingle && stack[j].level === thisLevel) {\n                                item2 = stack[j];\n                                if (isSingle) {\n                                    openQuote = state.md.options.quotes[2];\n                                    closeQuote = state.md.options.quotes[3];\n                                } else {\n                                    openQuote = state.md.options.quotes[0];\n                                    closeQuote = state.md.options.quotes[1];\n                                }\n                                token.content = replaceAt(token.content, t.index, closeQuote);\n                                tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);\n                                pos += closeQuote.length - 1;\n                                if (item2.token === i) {\n                                    pos += openQuote.length - 1;\n                                }\n                                text2 = token.content;\n                                max2 = text2.length;\n                                stack.length = j;\n                                continue OUTER;\n                            }\n                        }\n                    }\n                    if (canOpen) {\n                        stack.push({\n                            token: i,\n                            pos: t.index,\n                            single: isSingle,\n                            level: thisLevel\n                        });\n                    } else if (canClose && isSingle) {\n                        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n                    }\n                }\n            }\n        }\n        module2.exports = function smartquotes(state) {\n            var blkIdx;\n            if (!state.md.options.typographer) {\n                return;\n            }\n            for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n                if (state.tokens[blkIdx].type !== \"inline\" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n                    continue;\n                }\n                process_inlines(state.tokens[blkIdx].children, state);\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/token.js\nvar require_token = __commonJS({\n    \"node_modules/markdown-it/lib/token.js\" (exports1, module2) {\n        \"use strict\";\n        function Token(type, tag, nesting) {\n            this.type = type;\n            this.tag = tag;\n            this.attrs = null;\n            this.map = null;\n            this.nesting = nesting;\n            this.level = 0;\n            this.children = null;\n            this.content = \"\";\n            this.markup = \"\";\n            this.info = \"\";\n            this.meta = null;\n            this.block = false;\n            this.hidden = false;\n        }\n        Token.prototype.attrIndex = function attrIndex(name) {\n            var attrs, i, len;\n            if (!this.attrs) {\n                return -1;\n            }\n            attrs = this.attrs;\n            for(i = 0, len = attrs.length; i < len; i++){\n                if (attrs[i][0] === name) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        Token.prototype.attrPush = function attrPush(attrData) {\n            if (this.attrs) {\n                this.attrs.push(attrData);\n            } else {\n                this.attrs = [\n                    attrData\n                ];\n            }\n        };\n        Token.prototype.attrSet = function attrSet(name, value) {\n            var idx = this.attrIndex(name), attrData = [\n                name,\n                value\n            ];\n            if (idx < 0) {\n                this.attrPush(attrData);\n            } else {\n                this.attrs[idx] = attrData;\n            }\n        };\n        Token.prototype.attrGet = function attrGet(name) {\n            var idx = this.attrIndex(name), value = null;\n            if (idx >= 0) {\n                value = this.attrs[idx][1];\n            }\n            return value;\n        };\n        Token.prototype.attrJoin = function attrJoin(name, value) {\n            var idx = this.attrIndex(name);\n            if (idx < 0) {\n                this.attrPush([\n                    name,\n                    value\n                ]);\n            } else {\n                this.attrs[idx][1] = this.attrs[idx][1] + \" \" + value;\n            }\n        };\n        module2.exports = Token;\n    }\n});\n// node_modules/markdown-it/lib/rules_core/state_core.js\nvar require_state_core = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/state_core.js\" (exports1, module2) {\n        \"use strict\";\n        var Token = require_token();\n        function StateCore(src, md, env) {\n            this.src = src;\n            this.env = env;\n            this.tokens = [];\n            this.inlineMode = false;\n            this.md = md;\n        }\n        StateCore.prototype.Token = Token;\n        module2.exports = StateCore;\n    }\n});\n// node_modules/markdown-it/lib/parser_core.js\nvar require_parser_core = __commonJS({\n    \"node_modules/markdown-it/lib/parser_core.js\" (exports1, module2) {\n        \"use strict\";\n        var Ruler = require_ruler();\n        var _rules = [\n            [\n                \"normalize\",\n                require_normalize()\n            ],\n            [\n                \"block\",\n                require_block()\n            ],\n            [\n                \"inline\",\n                require_inline()\n            ],\n            [\n                \"linkify\",\n                require_linkify()\n            ],\n            [\n                \"replacements\",\n                require_replacements()\n            ],\n            [\n                \"smartquotes\",\n                require_smartquotes()\n            ]\n        ];\n        function Core() {\n            this.ruler = new Ruler();\n            for(var i = 0; i < _rules.length; i++){\n                this.ruler.push(_rules[i][0], _rules[i][1]);\n            }\n        }\n        Core.prototype.process = function(state) {\n            var i, l, rules;\n            rules = this.ruler.getRules(\"\");\n            for(i = 0, l = rules.length; i < l; i++){\n                rules[i](state);\n            }\n        };\n        Core.prototype.State = require_state_core();\n        module2.exports = Core;\n    }\n});\n// node_modules/markdown-it/lib/rules_block/table.js\nvar require_table = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/table.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        function getLine2(state, line) {\n            var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];\n            return state.src.substr(pos, max2 - pos);\n        }\n        function escapedSplit(str) {\n            var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = \"\";\n            ch = str.charCodeAt(pos);\n            while(pos < max2){\n                if (ch === 124) {\n                    if (!isEscaped) {\n                        result.push(current + str.substring(lastPos, pos));\n                        current = \"\";\n                        lastPos = pos + 1;\n                    } else {\n                        current += str.substring(lastPos, pos - 1);\n                        lastPos = pos;\n                    }\n                }\n                isEscaped = ch === 92;\n                pos++;\n                ch = str.charCodeAt(pos);\n            }\n            result.push(current + str.substring(lastPos));\n            return result;\n        }\n        module2.exports = function table3(state, startLine, endLine, silent) {\n            var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;\n            if (startLine + 2 > endLine) {\n                return false;\n            }\n            nextLine = startLine + 1;\n            if (state.sCount[nextLine] < state.blkIndent) {\n                return false;\n            }\n            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            pos = state.bMarks[nextLine] + state.tShift[nextLine];\n            if (pos >= state.eMarks[nextLine]) {\n                return false;\n            }\n            firstCh = state.src.charCodeAt(pos++);\n            if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {\n                return false;\n            }\n            if (pos >= state.eMarks[nextLine]) {\n                return false;\n            }\n            secondCh = state.src.charCodeAt(pos++);\n            if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {\n                return false;\n            }\n            if (firstCh === 45 && isSpace(secondCh)) {\n                return false;\n            }\n            while(pos < state.eMarks[nextLine]){\n                ch = state.src.charCodeAt(pos);\n                if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {\n                    return false;\n                }\n                pos++;\n            }\n            lineText = getLine2(state, startLine + 1);\n            columns = lineText.split(\"|\");\n            aligns = [];\n            for(i = 0; i < columns.length; i++){\n                t = columns[i].trim();\n                if (!t) {\n                    if (i === 0 || i === columns.length - 1) {\n                        continue;\n                    } else {\n                        return false;\n                    }\n                }\n                if (!/^:?-+:?$/.test(t)) {\n                    return false;\n                }\n                if (t.charCodeAt(t.length - 1) === 58) {\n                    aligns.push(t.charCodeAt(0) === 58 ? \"center\" : \"right\");\n                } else if (t.charCodeAt(0) === 58) {\n                    aligns.push(\"left\");\n                } else {\n                    aligns.push(\"\");\n                }\n            }\n            lineText = getLine2(state, startLine).trim();\n            if (lineText.indexOf(\"|\") === -1) {\n                return false;\n            }\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            columns = escapedSplit(lineText);\n            if (columns.length && columns[0] === \"\") columns.shift();\n            if (columns.length && columns[columns.length - 1] === \"\") columns.pop();\n            columnCount = columns.length;\n            if (columnCount === 0 || columnCount !== aligns.length) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            oldParentType = state.parentType;\n            state.parentType = \"table\";\n            terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n            token = state.push(\"table_open\", \"table\", 1);\n            token.map = tableLines = [\n                startLine,\n                0\n            ];\n            token = state.push(\"thead_open\", \"thead\", 1);\n            token.map = [\n                startLine,\n                startLine + 1\n            ];\n            token = state.push(\"tr_open\", \"tr\", 1);\n            token.map = [\n                startLine,\n                startLine + 1\n            ];\n            for(i = 0; i < columns.length; i++){\n                token = state.push(\"th_open\", \"th\", 1);\n                if (aligns[i]) {\n                    token.attrs = [\n                        [\n                            \"style\",\n                            \"text-align:\" + aligns[i]\n                        ]\n                    ];\n                }\n                token = state.push(\"inline\", \"\", 0);\n                token.content = columns[i].trim();\n                token.children = [];\n                token = state.push(\"th_close\", \"th\", -1);\n            }\n            token = state.push(\"tr_close\", \"tr\", -1);\n            token = state.push(\"thead_close\", \"thead\", -1);\n            for(nextLine = startLine + 2; nextLine < endLine; nextLine++){\n                if (state.sCount[nextLine] < state.blkIndent) {\n                    break;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n                lineText = getLine2(state, nextLine).trim();\n                if (!lineText) {\n                    break;\n                }\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n                    break;\n                }\n                columns = escapedSplit(lineText);\n                if (columns.length && columns[0] === \"\") columns.shift();\n                if (columns.length && columns[columns.length - 1] === \"\") columns.pop();\n                if (nextLine === startLine + 2) {\n                    token = state.push(\"tbody_open\", \"tbody\", 1);\n                    token.map = tbodyLines = [\n                        startLine + 2,\n                        0\n                    ];\n                }\n                token = state.push(\"tr_open\", \"tr\", 1);\n                token.map = [\n                    nextLine,\n                    nextLine + 1\n                ];\n                for(i = 0; i < columnCount; i++){\n                    token = state.push(\"td_open\", \"td\", 1);\n                    if (aligns[i]) {\n                        token.attrs = [\n                            [\n                                \"style\",\n                                \"text-align:\" + aligns[i]\n                            ]\n                        ];\n                    }\n                    token = state.push(\"inline\", \"\", 0);\n                    token.content = columns[i] ? columns[i].trim() : \"\";\n                    token.children = [];\n                    token = state.push(\"td_close\", \"td\", -1);\n                }\n                token = state.push(\"tr_close\", \"tr\", -1);\n            }\n            if (tbodyLines) {\n                token = state.push(\"tbody_close\", \"tbody\", -1);\n                tbodyLines[1] = nextLine;\n            }\n            token = state.push(\"table_close\", \"table\", -1);\n            tableLines[1] = nextLine;\n            state.parentType = oldParentType;\n            state.line = nextLine;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/code.js\nvar require_code = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/code.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function code2(state, startLine, endLine) {\n            if (state.md.options.allowIndentation) {\n                return false;\n            }\n            var nextLine, last, token;\n            if (state.sCount[startLine] - state.blkIndent < 4) {\n                return false;\n            }\n            last = nextLine = startLine + 1;\n            while(nextLine < endLine){\n                if (state.isEmpty(nextLine)) {\n                    nextLine++;\n                    continue;\n                }\n                if (state.sCount[nextLine] - state.blkIndent >= 4) {\n                    nextLine++;\n                    last = nextLine;\n                    continue;\n                }\n                break;\n            }\n            state.line = last;\n            token = state.push(\"code_block\", \"code\", 0);\n            token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + \"\\n\";\n            token.map = [\n                startLine,\n                state.line\n            ];\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/fence.js\nvar require_fence = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/fence.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function fence3(state, startLine, endLine, silent) {\n            var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (pos + 3 > max2) {\n                return false;\n            }\n            marker = state.src.charCodeAt(pos);\n            if (marker !== 126 && marker !== 96) {\n                return false;\n            }\n            mem = pos;\n            pos = state.skipChars(pos, marker);\n            len = pos - mem;\n            if (len < 3) {\n                return false;\n            }\n            markup = state.src.slice(mem, pos);\n            params = state.src.slice(pos, max2);\n            if (marker === 96) {\n                if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n                    return false;\n                }\n            }\n            if (silent) {\n                return true;\n            }\n            nextLine = startLine;\n            for(;;){\n                nextLine++;\n                if (nextLine >= endLine) {\n                    break;\n                }\n                pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n                max2 = state.eMarks[nextLine];\n                if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {\n                    break;\n                }\n                if (state.src.charCodeAt(pos) !== marker) {\n                    continue;\n                }\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n                    continue;\n                }\n                pos = state.skipChars(pos, marker);\n                if (pos - mem < len) {\n                    continue;\n                }\n                pos = state.skipSpaces(pos);\n                if (pos < max2) {\n                    continue;\n                }\n                haveEndMarker = true;\n                break;\n            }\n            len = state.sCount[startLine];\n            state.line = nextLine + (haveEndMarker ? 1 : 0);\n            token = state.push(\"fence\", \"code\", 0);\n            token.info = params;\n            token.content = state.getLines(startLine + 1, nextLine, len, true);\n            token.markup = markup;\n            token.map = [\n                startLine,\n                state.line\n            ];\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/blockquote.js\nvar require_blockquote = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/blockquote.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module2.exports = function blockquote2(state, startLine, endLine, silent) {\n            var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos++) !== 62) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            initial = offset = state.sCount[startLine] + 1;\n            if (state.src.charCodeAt(pos) === 32) {\n                pos++;\n                initial++;\n                offset++;\n                adjustTab = false;\n                spaceAfterMarker = true;\n            } else if (state.src.charCodeAt(pos) === 9) {\n                spaceAfterMarker = true;\n                if ((state.bsCount[startLine] + offset) % 4 === 3) {\n                    pos++;\n                    initial++;\n                    offset++;\n                    adjustTab = false;\n                } else {\n                    adjustTab = true;\n                }\n            } else {\n                spaceAfterMarker = false;\n            }\n            oldBMarks = [\n                state.bMarks[startLine]\n            ];\n            state.bMarks[startLine] = pos;\n            while(pos < max2){\n                ch = state.src.charCodeAt(pos);\n                if (isSpace(ch)) {\n                    if (ch === 9) {\n                        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n                    } else {\n                        offset++;\n                    }\n                } else {\n                    break;\n                }\n                pos++;\n            }\n            oldBSCount = [\n                state.bsCount[startLine]\n            ];\n            state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n            lastLineEmpty = pos >= max2;\n            oldSCount = [\n                state.sCount[startLine]\n            ];\n            state.sCount[startLine] = offset - initial;\n            oldTShift = [\n                state.tShift[startLine]\n            ];\n            state.tShift[startLine] = pos - state.bMarks[startLine];\n            terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n            oldParentType = state.parentType;\n            state.parentType = \"blockquote\";\n            for(nextLine = startLine + 1; nextLine < endLine; nextLine++){\n                isOutdented = state.sCount[nextLine] < state.blkIndent;\n                pos = state.bMarks[nextLine] + state.tShift[nextLine];\n                max2 = state.eMarks[nextLine];\n                if (pos >= max2) {\n                    break;\n                }\n                if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {\n                    initial = offset = state.sCount[nextLine] + 1;\n                    if (state.src.charCodeAt(pos) === 32) {\n                        pos++;\n                        initial++;\n                        offset++;\n                        adjustTab = false;\n                        spaceAfterMarker = true;\n                    } else if (state.src.charCodeAt(pos) === 9) {\n                        spaceAfterMarker = true;\n                        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n                            pos++;\n                            initial++;\n                            offset++;\n                            adjustTab = false;\n                        } else {\n                            adjustTab = true;\n                        }\n                    } else {\n                        spaceAfterMarker = false;\n                    }\n                    oldBMarks.push(state.bMarks[nextLine]);\n                    state.bMarks[nextLine] = pos;\n                    while(pos < max2){\n                        ch = state.src.charCodeAt(pos);\n                        if (isSpace(ch)) {\n                            if (ch === 9) {\n                                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n                            } else {\n                                offset++;\n                            }\n                        } else {\n                            break;\n                        }\n                        pos++;\n                    }\n                    lastLineEmpty = pos >= max2;\n                    oldBSCount.push(state.bsCount[nextLine]);\n                    state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n                    oldSCount.push(state.sCount[nextLine]);\n                    state.sCount[nextLine] = offset - initial;\n                    oldTShift.push(state.tShift[nextLine]);\n                    state.tShift[nextLine] = pos - state.bMarks[nextLine];\n                    continue;\n                }\n                if (lastLineEmpty) {\n                    break;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    state.lineMax = nextLine;\n                    if (state.blkIndent !== 0) {\n                        oldBMarks.push(state.bMarks[nextLine]);\n                        oldBSCount.push(state.bsCount[nextLine]);\n                        oldTShift.push(state.tShift[nextLine]);\n                        oldSCount.push(state.sCount[nextLine]);\n                        state.sCount[nextLine] -= state.blkIndent;\n                    }\n                    break;\n                }\n                oldBMarks.push(state.bMarks[nextLine]);\n                oldBSCount.push(state.bsCount[nextLine]);\n                oldTShift.push(state.tShift[nextLine]);\n                oldSCount.push(state.sCount[nextLine]);\n                state.sCount[nextLine] = -1;\n            }\n            oldIndent = state.blkIndent;\n            state.blkIndent = 0;\n            token = state.push(\"blockquote_open\", \"blockquote\", 1);\n            token.markup = \">\";\n            token.map = lines = [\n                startLine,\n                0\n            ];\n            state.md.block.tokenize(state, startLine, nextLine);\n            token = state.push(\"blockquote_close\", \"blockquote\", -1);\n            token.markup = \">\";\n            state.lineMax = oldLineMax;\n            state.parentType = oldParentType;\n            lines[1] = state.line;\n            for(i = 0; i < oldTShift.length; i++){\n                state.bMarks[i + startLine] = oldBMarks[i];\n                state.tShift[i + startLine] = oldTShift[i];\n                state.sCount[i + startLine] = oldSCount[i];\n                state.bsCount[i + startLine] = oldBSCount[i];\n            }\n            state.blkIndent = oldIndent;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/hr.js\nvar require_hr = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/hr.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module2.exports = function hr2(state, startLine, endLine, silent) {\n            var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            marker = state.src.charCodeAt(pos++);\n            if (marker !== 42 && marker !== 45 && marker !== 95) {\n                return false;\n            }\n            cnt = 1;\n            while(pos < max2){\n                ch = state.src.charCodeAt(pos++);\n                if (ch !== marker && !isSpace(ch)) {\n                    return false;\n                }\n                if (ch === marker) {\n                    cnt++;\n                }\n            }\n            if (cnt < 3) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            state.line = startLine + 1;\n            token = state.push(\"hr\", \"hr\", 0);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/list.js\nvar require_list = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/list.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        function skipBulletListMarker(state, startLine) {\n            var marker, pos, max2, ch;\n            pos = state.bMarks[startLine] + state.tShift[startLine];\n            max2 = state.eMarks[startLine];\n            marker = state.src.charCodeAt(pos++);\n            if (marker !== 42 && marker !== 45 && marker !== 43) {\n                return -1;\n            }\n            if (pos < max2) {\n                ch = state.src.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    return -1;\n                }\n            }\n            return pos;\n        }\n        function skipOrderedListMarker(state, startLine) {\n            var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max2 = state.eMarks[startLine];\n            if (pos + 1 >= max2) {\n                return -1;\n            }\n            ch = state.src.charCodeAt(pos++);\n            if (ch < 48 || ch > 57) {\n                return -1;\n            }\n            for(;;){\n                if (pos >= max2) {\n                    return -1;\n                }\n                ch = state.src.charCodeAt(pos++);\n                if (ch >= 48 && ch <= 57) {\n                    if (pos - start >= 10) {\n                        return -1;\n                    }\n                    continue;\n                }\n                if (ch === 41 || ch === 46) {\n                    break;\n                }\n                return -1;\n            }\n            if (pos < max2) {\n                ch = state.src.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    return -1;\n                }\n            }\n            return pos;\n        }\n        function markTightParagraphs(state, idx) {\n            var i, l, level = state.level + 2;\n            for(i = idx + 2, l = state.tokens.length - 2; i < l; i++){\n                if (state.tokens[i].level === level && state.tokens[i].type === \"paragraph_open\") {\n                    state.tokens[i + 2].hidden = true;\n                    state.tokens[i].hidden = true;\n                    i += 2;\n                }\n            }\n        }\n        module2.exports = function list2(state, startLine, endLine, silent) {\n            var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {\n                return false;\n            }\n            if (silent && state.parentType === \"paragraph\") {\n                if (state.sCount[startLine] >= state.blkIndent) {\n                    isTerminatingParagraph = true;\n                }\n            }\n            if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n                isOrdered = true;\n                start = state.bMarks[startLine] + state.tShift[startLine];\n                markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n                if (isTerminatingParagraph && markerValue !== 1) return false;\n            } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n                isOrdered = false;\n            } else {\n                return false;\n            }\n            if (isTerminatingParagraph) {\n                if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n            }\n            markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n            if (silent) {\n                return true;\n            }\n            listTokIdx = state.tokens.length;\n            if (isOrdered) {\n                token = state.push(\"ordered_list_open\", \"ol\", 1);\n                if (markerValue !== 1) {\n                    token.attrs = [\n                        [\n                            \"start\",\n                            markerValue\n                        ]\n                    ];\n                }\n            } else {\n                token = state.push(\"bullet_list_open\", \"ul\", 1);\n            }\n            token.map = listLines = [\n                startLine,\n                0\n            ];\n            token.markup = String.fromCharCode(markerCharCode);\n            nextLine = startLine;\n            prevEmptyEnd = false;\n            terminatorRules = state.md.block.ruler.getRules(\"list\");\n            oldParentType = state.parentType;\n            state.parentType = \"list\";\n            while(nextLine < endLine){\n                pos = posAfterMarker;\n                max2 = state.eMarks[nextLine];\n                initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n                while(pos < max2){\n                    ch = state.src.charCodeAt(pos);\n                    if (ch === 9) {\n                        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n                    } else if (ch === 32) {\n                        offset++;\n                    } else {\n                        break;\n                    }\n                    pos++;\n                }\n                contentStart = pos;\n                if (contentStart >= max2) {\n                    indentAfterMarker = 1;\n                } else {\n                    indentAfterMarker = offset - initial;\n                }\n                if (!state.md.options.allowIndentation && indentAfterMarker > 4) {\n                    indentAfterMarker = 1;\n                }\n                indent = initial + indentAfterMarker;\n                token = state.push(\"list_item_open\", \"li\", 1);\n                token.markup = String.fromCharCode(markerCharCode);\n                token.map = itemLines = [\n                    startLine,\n                    0\n                ];\n                if (isOrdered) {\n                    token.info = state.src.slice(start, posAfterMarker - 1);\n                }\n                oldTight = state.tight;\n                oldTShift = state.tShift[startLine];\n                oldSCount = state.sCount[startLine];\n                oldListIndent = state.listIndent;\n                state.listIndent = state.blkIndent;\n                state.blkIndent = indent;\n                state.tight = true;\n                state.tShift[startLine] = contentStart - state.bMarks[startLine];\n                state.sCount[startLine] = offset;\n                if (contentStart >= max2 && state.isEmpty(startLine + 1)) {\n                    state.line = Math.min(state.line + 2, endLine);\n                } else {\n                    state.md.block.tokenize(state, startLine, endLine, true);\n                }\n                if (!state.tight || prevEmptyEnd) {\n                    tight = false;\n                }\n                prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);\n                state.blkIndent = state.listIndent;\n                state.listIndent = oldListIndent;\n                state.tShift[startLine] = oldTShift;\n                state.sCount[startLine] = oldSCount;\n                state.tight = oldTight;\n                token = state.push(\"list_item_close\", \"li\", -1);\n                token.markup = String.fromCharCode(markerCharCode);\n                nextLine = startLine = state.line;\n                itemLines[1] = nextLine;\n                contentStart = state.bMarks[startLine];\n                if (nextLine >= endLine) {\n                    break;\n                }\n                if (state.sCount[nextLine] < state.blkIndent) {\n                    break;\n                }\n                if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                    break;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n                if (isOrdered) {\n                    posAfterMarker = skipOrderedListMarker(state, nextLine);\n                    if (posAfterMarker < 0) {\n                        break;\n                    }\n                    start = state.bMarks[nextLine] + state.tShift[nextLine];\n                } else {\n                    posAfterMarker = skipBulletListMarker(state, nextLine);\n                    if (posAfterMarker < 0) {\n                        break;\n                    }\n                }\n                if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n                    break;\n                }\n            }\n            if (isOrdered) {\n                token = state.push(\"ordered_list_close\", \"ol\", -1);\n            } else {\n                token = state.push(\"bullet_list_close\", \"ul\", -1);\n            }\n            token.markup = String.fromCharCode(markerCharCode);\n            listLines[1] = nextLine;\n            state.line = nextLine;\n            state.parentType = oldParentType;\n            if (tight) {\n                markTightParagraphs(state, listTokIdx);\n            }\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/reference.js\nvar require_reference = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/reference.js\" (exports1, module2) {\n        \"use strict\";\n        var normalizeReference = require_utils().normalizeReference;\n        var isSpace = require_utils().isSpace;\n        module2.exports = function reference(state, startLine, _endLine, silent) {\n            var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos) !== 91) {\n                return false;\n            }\n            while(++pos < max2){\n                if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {\n                    if (pos + 1 === max2) {\n                        return false;\n                    }\n                    if (state.src.charCodeAt(pos + 1) !== 58) {\n                        return false;\n                    }\n                    break;\n                }\n            }\n            endLine = state.lineMax;\n            terminatorRules = state.md.block.ruler.getRules(\"reference\");\n            oldParentType = state.parentType;\n            state.parentType = \"reference\";\n            for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n                    continue;\n                }\n                if (state.sCount[nextLine] < 0) {\n                    continue;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n            }\n            str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n            max2 = str.length;\n            for(pos = 1; pos < max2; pos++){\n                ch = str.charCodeAt(pos);\n                if (ch === 91) {\n                    return false;\n                } else if (ch === 93) {\n                    labelEnd = pos;\n                    break;\n                } else if (ch === 10) {\n                    lines++;\n                } else if (ch === 92) {\n                    pos++;\n                    if (pos < max2 && str.charCodeAt(pos) === 10) {\n                        lines++;\n                    }\n                }\n            }\n            if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {\n                return false;\n            }\n            for(pos = labelEnd + 2; pos < max2; pos++){\n                ch = str.charCodeAt(pos);\n                if (ch === 10) {\n                    lines++;\n                } else if (isSpace(ch)) {} else {\n                    break;\n                }\n            }\n            res = state.md.helpers.parseLinkDestination(str, pos, max2);\n            if (!res.ok) {\n                return false;\n            }\n            href = state.md.normalizeLink(res.str);\n            if (!state.md.validateLink(href)) {\n                return false;\n            }\n            pos = res.pos;\n            lines += res.lines;\n            destEndPos = pos;\n            destEndLineNo = lines;\n            start = pos;\n            for(; pos < max2; pos++){\n                ch = str.charCodeAt(pos);\n                if (ch === 10) {\n                    lines++;\n                } else if (isSpace(ch)) {} else {\n                    break;\n                }\n            }\n            res = state.md.helpers.parseLinkTitle(str, pos, max2);\n            if (pos < max2 && start !== pos && res.ok) {\n                title = res.str;\n                pos = res.pos;\n                lines += res.lines;\n            } else {\n                title = \"\";\n                pos = destEndPos;\n                lines = destEndLineNo;\n            }\n            while(pos < max2){\n                ch = str.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    break;\n                }\n                pos++;\n            }\n            if (pos < max2 && str.charCodeAt(pos) !== 10) {\n                if (title) {\n                    title = \"\";\n                    pos = destEndPos;\n                    lines = destEndLineNo;\n                    while(pos < max2){\n                        ch = str.charCodeAt(pos);\n                        if (!isSpace(ch)) {\n                            break;\n                        }\n                        pos++;\n                    }\n                }\n            }\n            if (pos < max2 && str.charCodeAt(pos) !== 10) {\n                return false;\n            }\n            label = normalizeReference(str.slice(1, labelEnd));\n            if (!label) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            if (typeof state.env.references === \"undefined\") {\n                state.env.references = {};\n            }\n            if (typeof state.env.references[label] === \"undefined\") {\n                state.env.references[label] = {\n                    title,\n                    href\n                };\n            }\n            state.parentType = oldParentType;\n            state.line = startLine + lines + 1;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/common/html_blocks.js\nvar require_html_blocks = __commonJS({\n    \"node_modules/markdown-it/lib/common/html_blocks.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = [\n            \"address\",\n            \"article\",\n            \"aside\",\n            \"base\",\n            \"basefont\",\n            \"blockquote\",\n            \"body\",\n            \"caption\",\n            \"center\",\n            \"col\",\n            \"colgroup\",\n            \"dd\",\n            \"details\",\n            \"dialog\",\n            \"dir\",\n            \"div\",\n            \"dl\",\n            \"dt\",\n            \"fieldset\",\n            \"figcaption\",\n            \"figure\",\n            \"footer\",\n            \"form\",\n            \"frame\",\n            \"frameset\",\n            \"h1\",\n            \"h2\",\n            \"h3\",\n            \"h4\",\n            \"h5\",\n            \"h6\",\n            \"head\",\n            \"header\",\n            \"hr\",\n            \"html\",\n            \"iframe\",\n            \"legend\",\n            \"li\",\n            \"link\",\n            \"main\",\n            \"menu\",\n            \"menuitem\",\n            \"nav\",\n            \"noframes\",\n            \"ol\",\n            \"optgroup\",\n            \"option\",\n            \"p\",\n            \"param\",\n            \"section\",\n            \"source\",\n            \"summary\",\n            \"table\",\n            \"tbody\",\n            \"td\",\n            \"tfoot\",\n            \"th\",\n            \"thead\",\n            \"title\",\n            \"tr\",\n            \"track\",\n            \"ul\"\n        ];\n    }\n});\n// node_modules/markdown-it/lib/common/html_re.js\nvar require_html_re = __commonJS({\n    \"node_modules/markdown-it/lib/common/html_re.js\" (exports1, module2) {\n        \"use strict\";\n        var attr_name = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\n        var unquoted = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\n        var single_quoted = \"'[^']*'\";\n        var double_quoted = '\"[^\"]*\"';\n        var attr_value = \"(?:\" + unquoted + \"|\" + single_quoted + \"|\" + double_quoted + \")\";\n        var attribute = \"(?:\\\\s+\" + attr_name + \"(?:\\\\s*=\\\\s*\" + attr_value + \")?)\";\n        var open_tag = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + attribute + \"*\\\\s*\\\\/?>\";\n        var close_tag = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\";\n        var comment2 = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\n        var processing = \"<[?][\\\\s\\\\S]*?[?]>\";\n        var declaration = \"<![A-Z]+\\\\s+[^>]*>\";\n        var cdata = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\n        var HTML_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \"|\" + comment2 + \"|\" + processing + \"|\" + declaration + \"|\" + cdata + \")\");\n        var HTML_OPEN_CLOSE_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \")\");\n        module2.exports.HTML_TAG_RE = HTML_TAG_RE;\n        module2.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n    }\n});\n// node_modules/markdown-it/lib/rules_block/html_block.js\nvar require_html_block = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/html_block.js\" (exports1, module2) {\n        \"use strict\";\n        var block_names = require_html_blocks();\n        var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;\n        var HTML_SEQUENCES = [\n            [\n                /^<(script|pre|style|textarea)(?=(\\s|>|$))/i,\n                /<\\/(script|pre|style|textarea)>/i,\n                true\n            ],\n            [\n                /^<!--/,\n                /-->/,\n                true\n            ],\n            [\n                /^<\\?/,\n                /\\?>/,\n                true\n            ],\n            [\n                /^<![A-Z]/,\n                />/,\n                true\n            ],\n            [\n                /^<!\\[CDATA\\[/,\n                /\\]\\]>/,\n                true\n            ],\n            [\n                new RegExp(\"^</?(\" + block_names.join(\"|\") + \")(?=(\\\\s|/?>|$))\", \"i\"),\n                /^$/,\n                true\n            ],\n            [\n                new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + \"\\\\s*$\"),\n                /^$/,\n                false\n            ]\n        ];\n        module2.exports = function html_block(state, startLine, endLine, silent) {\n            var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (!state.md.options.html) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos) !== 60) {\n                return false;\n            }\n            lineText = state.src.slice(pos, max2);\n            for(i = 0; i < HTML_SEQUENCES.length; i++){\n                if (HTML_SEQUENCES[i][0].test(lineText)) {\n                    break;\n                }\n            }\n            if (i === HTML_SEQUENCES.length) {\n                return false;\n            }\n            if (silent) {\n                return HTML_SEQUENCES[i][2];\n            }\n            nextLine = startLine + 1;\n            if (!HTML_SEQUENCES[i][1].test(lineText)) {\n                for(; nextLine < endLine; nextLine++){\n                    if (state.sCount[nextLine] < state.blkIndent) {\n                        break;\n                    }\n                    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n                    max2 = state.eMarks[nextLine];\n                    lineText = state.src.slice(pos, max2);\n                    if (HTML_SEQUENCES[i][1].test(lineText)) {\n                        if (lineText.length !== 0) {\n                            nextLine++;\n                        }\n                        break;\n                    }\n                }\n            }\n            state.line = nextLine;\n            token = state.push(\"html_block\", \"\", 0);\n            token.map = [\n                startLine,\n                nextLine\n            ];\n            token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/heading.js\nvar require_heading = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/heading.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module2.exports = function heading2(state, startLine, endLine, silent) {\n            var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            ch = state.src.charCodeAt(pos);\n            if (ch !== 35 || pos >= max2) {\n                return false;\n            }\n            level = 1;\n            ch = state.src.charCodeAt(++pos);\n            while(ch === 35 && pos < max2 && level <= 6){\n                level++;\n                ch = state.src.charCodeAt(++pos);\n            }\n            if (level > 6 || pos < max2 && !isSpace(ch)) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            max2 = state.skipSpacesBack(max2, pos);\n            tmp = state.skipCharsBack(max2, 35, pos);\n            if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n                max2 = tmp;\n            }\n            state.line = startLine + 1;\n            token = state.push(\"heading_open\", \"h\" + String(level), 1);\n            token.markup = \"########\".slice(0, level);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token = state.push(\"inline\", \"\", 0);\n            token.content = state.src.slice(pos, max2).trim();\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token.children = [];\n            token = state.push(\"heading_close\", \"h\" + String(level), -1);\n            token.markup = \"########\".slice(0, level);\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/lheading.js\nvar require_lheading = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/lheading.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function lheading(state, startLine, endLine) {\n            var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules(\"paragraph\");\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            oldParentType = state.parentType;\n            state.parentType = \"paragraph\";\n            for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n                    continue;\n                }\n                if (state.sCount[nextLine] >= state.blkIndent) {\n                    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n                    max2 = state.eMarks[nextLine];\n                    if (pos < max2) {\n                        marker = state.src.charCodeAt(pos);\n                        if (marker === 45 || marker === 61) {\n                            pos = state.skipChars(pos, marker);\n                            pos = state.skipSpaces(pos);\n                            if (pos >= max2) {\n                                level = marker === 61 ? 1 : 2;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (state.sCount[nextLine] < 0) {\n                    continue;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n            }\n            if (!level) {\n                return false;\n            }\n            content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n            state.line = nextLine + 1;\n            token = state.push(\"heading_open\", \"h\" + String(level), 1);\n            token.markup = String.fromCharCode(marker);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token = state.push(\"inline\", \"\", 0);\n            token.content = content;\n            token.map = [\n                startLine,\n                state.line - 1\n            ];\n            token.children = [];\n            token = state.push(\"heading_close\", \"h\" + String(level), -1);\n            token.markup = String.fromCharCode(marker);\n            state.parentType = oldParentType;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/paragraph.js\nvar require_paragraph = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/paragraph.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function paragraph2(state, startLine) {\n            var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules(\"paragraph\"), endLine = state.lineMax;\n            oldParentType = state.parentType;\n            state.parentType = \"paragraph\";\n            for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n                    continue;\n                }\n                if (state.sCount[nextLine] < 0) {\n                    continue;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n            }\n            content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n            state.line = nextLine;\n            token = state.push(\"paragraph_open\", \"p\", 1);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token = state.push(\"inline\", \"\", 0);\n            token.content = content;\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token.children = [];\n            token = state.push(\"paragraph_close\", \"p\", -1);\n            state.parentType = oldParentType;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/state_block.js\nvar require_state_block = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/state_block.js\" (exports1, module2) {\n        \"use strict\";\n        var Token = require_token();\n        var isSpace = require_utils().isSpace;\n        function StateBlock(src, md, env, tokens) {\n            var ch, s2, start, pos, len, indent, offset, indent_found;\n            this.src = src;\n            this.md = md;\n            this.env = env;\n            this.tokens = tokens;\n            this.bMarks = [];\n            this.eMarks = [];\n            this.tShift = [];\n            this.sCount = [];\n            this.bsCount = [];\n            this.blkIndent = 0;\n            this.line = 0;\n            this.lineMax = 0;\n            this.tight = false;\n            this.ddIndent = -1;\n            this.listIndent = -1;\n            this.parentType = \"root\";\n            this.level = 0;\n            this.result = \"\";\n            s2 = this.src;\n            indent_found = false;\n            for(start = pos = indent = offset = 0, len = s2.length; pos < len; pos++){\n                ch = s2.charCodeAt(pos);\n                if (!indent_found) {\n                    if (isSpace(ch)) {\n                        indent++;\n                        if (ch === 9) {\n                            offset += 4 - offset % 4;\n                        } else {\n                            offset++;\n                        }\n                        continue;\n                    } else {\n                        indent_found = true;\n                    }\n                }\n                if (ch === 10 || pos === len - 1) {\n                    if (ch !== 10) {\n                        pos++;\n                    }\n                    this.bMarks.push(start);\n                    this.eMarks.push(pos);\n                    this.tShift.push(indent);\n                    this.sCount.push(offset);\n                    this.bsCount.push(0);\n                    indent_found = false;\n                    indent = 0;\n                    offset = 0;\n                    start = pos + 1;\n                }\n            }\n            this.bMarks.push(s2.length);\n            this.eMarks.push(s2.length);\n            this.tShift.push(0);\n            this.sCount.push(0);\n            this.bsCount.push(0);\n            this.lineMax = this.bMarks.length - 1;\n        }\n        StateBlock.prototype.push = function(type, tag, nesting) {\n            var token = new Token(type, tag, nesting);\n            token.block = true;\n            if (nesting < 0) this.level--;\n            token.level = this.level;\n            if (nesting > 0) this.level++;\n            this.tokens.push(token);\n            return token;\n        };\n        StateBlock.prototype.isEmpty = function isEmpty(line) {\n            return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n        };\n        StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n            for(var max2 = this.lineMax; from < max2; from++){\n                if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n                    break;\n                }\n            }\n            return from;\n        };\n        StateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n            var ch;\n            for(var max2 = this.src.length; pos < max2; pos++){\n                ch = this.src.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    break;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n            if (pos <= min) {\n                return pos;\n            }\n            while(pos > min){\n                if (!isSpace(this.src.charCodeAt(--pos))) {\n                    return pos + 1;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.skipChars = function skipChars(pos, code2) {\n            for(var max2 = this.src.length; pos < max2; pos++){\n                if (this.src.charCodeAt(pos) !== code2) {\n                    break;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min) {\n            if (pos <= min) {\n                return pos;\n            }\n            while(pos > min){\n                if (code2 !== this.src.charCodeAt(--pos)) {\n                    return pos + 1;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n            var i, lineIndent, ch, first, last, queue, lineStart, line = begin;\n            if (begin >= end) {\n                return \"\";\n            }\n            queue = new Array(end - begin);\n            for(i = 0; line < end; line++, i++){\n                lineIndent = 0;\n                lineStart = first = this.bMarks[line];\n                if (line + 1 < end || keepLastLF) {\n                    last = this.eMarks[line] + 1;\n                } else {\n                    last = this.eMarks[line];\n                }\n                while(first < last && lineIndent < indent){\n                    ch = this.src.charCodeAt(first);\n                    if (isSpace(ch)) {\n                        if (ch === 9) {\n                            lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n                        } else {\n                            lineIndent++;\n                        }\n                    } else if (first - lineStart < this.tShift[line]) {\n                        lineIndent++;\n                    } else {\n                        break;\n                    }\n                    first++;\n                }\n                if (lineIndent > indent) {\n                    queue[i] = new Array(lineIndent - indent + 1).join(\" \") + this.src.slice(first, last);\n                } else {\n                    queue[i] = this.src.slice(first, last);\n                }\n            }\n            return queue.join(\"\");\n        };\n        StateBlock.prototype.Token = Token;\n        module2.exports = StateBlock;\n    }\n});\n// node_modules/markdown-it/lib/parser_block.js\nvar require_parser_block = __commonJS({\n    \"node_modules/markdown-it/lib/parser_block.js\" (exports1, module2) {\n        \"use strict\";\n        var Ruler = require_ruler();\n        var _rules = [\n            [\n                \"table\",\n                require_table(),\n                [\n                    \"paragraph\",\n                    \"reference\"\n                ]\n            ],\n            [\n                \"code\",\n                require_code()\n            ],\n            [\n                \"fence\",\n                require_fence(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\",\n                    \"list\"\n                ]\n            ],\n            [\n                \"blockquote\",\n                require_blockquote(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\",\n                    \"list\"\n                ]\n            ],\n            [\n                \"hr\",\n                require_hr(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\",\n                    \"list\"\n                ]\n            ],\n            [\n                \"list\",\n                require_list(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\"\n                ]\n            ],\n            [\n                \"reference\",\n                require_reference()\n            ],\n            [\n                \"html_block\",\n                require_html_block(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\"\n                ]\n            ],\n            [\n                \"heading\",\n                require_heading(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\"\n                ]\n            ],\n            [\n                \"lheading\",\n                require_lheading()\n            ],\n            [\n                \"paragraph\",\n                require_paragraph()\n            ]\n        ];\n        function ParserBlock() {\n            this.ruler = new Ruler();\n            for(var i = 0; i < _rules.length; i++){\n                this.ruler.push(_rules[i][0], _rules[i][1], {\n                    alt: (_rules[i][2] || []).slice()\n                });\n            }\n        }\n        ParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n            var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;\n            while(line < endLine){\n                state.line = line = state.skipEmptyLines(line);\n                if (line >= endLine) {\n                    break;\n                }\n                if (state.sCount[line] < state.blkIndent) {\n                    break;\n                }\n                if (state.level >= maxNesting) {\n                    state.line = endLine;\n                    break;\n                }\n                for(i = 0; i < len; i++){\n                    ok = rules[i](state, line, endLine, false);\n                    if (ok) {\n                        break;\n                    }\n                }\n                state.tight = !hasEmptyLines;\n                if (state.isEmpty(state.line - 1)) {\n                    hasEmptyLines = true;\n                }\n                line = state.line;\n                if (line < endLine && state.isEmpty(line)) {\n                    hasEmptyLines = true;\n                    line++;\n                    state.line = line;\n                }\n            }\n        };\n        ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n            var state;\n            if (!src) {\n                return;\n            }\n            state = new this.State(src, md, env, outTokens);\n            this.tokenize(state, state.line, state.lineMax);\n        };\n        ParserBlock.prototype.State = require_state_block();\n        module2.exports = ParserBlock;\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/text.js\nvar require_text = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/text.js\" (exports1, module2) {\n        \"use strict\";\n        function isTerminatorChar(ch) {\n            switch(ch){\n                case 10:\n                case 33:\n                case 35:\n                case 36:\n                case 37:\n                case 38:\n                case 42:\n                case 43:\n                case 45:\n                case 58:\n                case 60:\n                case 61:\n                case 62:\n                case 64:\n                case 91:\n                case 92:\n                case 93:\n                case 94:\n                case 95:\n                case 96:\n                case 123:\n                case 125:\n                case 126:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        module2.exports = function text2(state, silent) {\n            var pos = state.pos;\n            while(pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))){\n                pos++;\n            }\n            if (pos === state.pos) {\n                return false;\n            }\n            if (!silent) {\n                state.pending += state.src.slice(state.pos, pos);\n            }\n            state.pos = pos;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/newline.js\nvar require_newline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/newline.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module2.exports = function newline(state, silent) {\n            var pmax, max2, ws, pos = state.pos;\n            if (state.src.charCodeAt(pos) !== 10) {\n                return false;\n            }\n            pmax = state.pending.length - 1;\n            max2 = state.posMax;\n            if (!silent) {\n                if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {\n                    if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {\n                        ws = pmax - 1;\n                        while(ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)ws--;\n                        state.pending = state.pending.slice(0, ws);\n                        state.push(\"hardbreak\", \"br\", 0);\n                    } else {\n                        state.pending = state.pending.slice(0, -1);\n                        state.push(\"softbreak\", \"br\", 0);\n                    }\n                } else {\n                    state.push(\"softbreak\", \"br\", 0);\n                }\n            }\n            pos++;\n            while(pos < max2 && isSpace(state.src.charCodeAt(pos))){\n                pos++;\n            }\n            state.pos = pos;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/escape.js\nvar require_escape = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/escape.js\" (exports1, module2) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        var ESCAPED = [];\n        for(i = 0; i < 256; i++){\n            ESCAPED.push(0);\n        }\n        var i;\n        \"\\\\!\\\"#$%&'()*+,./:;<=>?@[]^_`{|}~-\".split(\"\").forEach(function(ch) {\n            ESCAPED[ch.charCodeAt(0)] = 1;\n        });\n        module2.exports = function escape(state, silent) {\n            var ch, pos = state.pos, max2 = state.posMax;\n            if (state.src.charCodeAt(pos) !== 92) {\n                return false;\n            }\n            pos++;\n            if (pos < max2) {\n                ch = state.src.charCodeAt(pos);\n                if (ch < 256 && ESCAPED[ch] !== 0) {\n                    if (!silent) {\n                        state.pending += state.src[pos];\n                    }\n                    state.pos += 2;\n                    return true;\n                }\n                if (ch === 10) {\n                    if (!silent) {\n                        state.push(\"hardbreak\", \"br\", 0);\n                    }\n                    pos++;\n                    while(pos < max2){\n                        ch = state.src.charCodeAt(pos);\n                        if (!isSpace(ch)) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    state.pos = pos;\n                    return true;\n                }\n            }\n            if (!silent) {\n                state.pending += \"\\\\\";\n            }\n            state.pos++;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/backticks.js\nvar require_backticks = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/backticks.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function backtick(state, silent) {\n            var start, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);\n            if (ch !== 96) {\n                return false;\n            }\n            start = pos;\n            pos++;\n            max2 = state.posMax;\n            while(pos < max2 && state.src.charCodeAt(pos) === 96){\n                pos++;\n            }\n            marker = state.src.slice(start, pos);\n            openerLength = marker.length;\n            if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n                if (!silent) state.pending += marker;\n                state.pos += openerLength;\n                return true;\n            }\n            matchStart = matchEnd = pos;\n            while((matchStart = state.src.indexOf(\"`\", matchEnd)) !== -1){\n                matchEnd = matchStart + 1;\n                while(matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96){\n                    matchEnd++;\n                }\n                closerLength = matchEnd - matchStart;\n                if (closerLength === openerLength) {\n                    if (!silent) {\n                        token = state.push(\"code_inline\", \"code\", 0);\n                        token.markup = marker;\n                        token.content = state.src.slice(pos, matchStart).replace(/\\n/g, \" \").replace(/^ (.+) $/, \"$1\");\n                    }\n                    state.pos = matchEnd;\n                    return true;\n                }\n                state.backticks[closerLength] = matchStart;\n            }\n            state.backticksScanned = true;\n            if (!silent) state.pending += marker;\n            state.pos += openerLength;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/strikethrough.js\nvar require_strikethrough = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/strikethrough.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports.tokenize = function strikethrough(state, silent) {\n            var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);\n            if (silent) {\n                return false;\n            }\n            if (marker !== 126) {\n                return false;\n            }\n            scanned = state.scanDelims(state.pos, true);\n            len = scanned.length;\n            ch = String.fromCharCode(marker);\n            if (len < 2) {\n                return false;\n            }\n            if (len % 2) {\n                token = state.push(\"text\", \"\", 0);\n                token.content = ch;\n                len--;\n            }\n            for(i = 0; i < len; i += 2){\n                token = state.push(\"text\", \"\", 0);\n                token.content = ch + ch;\n                state.delimiters.push({\n                    marker,\n                    length: 0,\n                    token: state.tokens.length - 1,\n                    end: -1,\n                    open: scanned.can_open,\n                    close: scanned.can_close\n                });\n            }\n            state.pos += scanned.length;\n            return true;\n        };\n        function postProcess(state, delimiters) {\n            var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;\n            for(i = 0; i < max2; i++){\n                startDelim = delimiters[i];\n                if (startDelim.marker !== 126) {\n                    continue;\n                }\n                if (startDelim.end === -1) {\n                    continue;\n                }\n                endDelim = delimiters[startDelim.end];\n                token = state.tokens[startDelim.token];\n                token.type = \"s_open\";\n                token.tag = \"s\";\n                token.nesting = 1;\n                token.markup = \"~~\";\n                token.content = \"\";\n                token = state.tokens[endDelim.token];\n                token.type = \"s_close\";\n                token.tag = \"s\";\n                token.nesting = -1;\n                token.markup = \"~~\";\n                token.content = \"\";\n                if (state.tokens[endDelim.token - 1].type === \"text\" && state.tokens[endDelim.token - 1].content === \"~\") {\n                    loneMarkers.push(endDelim.token - 1);\n                }\n            }\n            while(loneMarkers.length){\n                i = loneMarkers.pop();\n                j = i + 1;\n                while(j < state.tokens.length && state.tokens[j].type === \"s_close\"){\n                    j++;\n                }\n                j--;\n                if (i !== j) {\n                    token = state.tokens[j];\n                    state.tokens[j] = state.tokens[i];\n                    state.tokens[i] = token;\n                }\n            }\n        }\n        module2.exports.postProcess = function strikethrough(state) {\n            var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n            postProcess(state, state.delimiters);\n            for(curr = 0; curr < max2; curr++){\n                if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n                    postProcess(state, tokens_meta[curr].delimiters);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/emphasis.js\nvar require_emphasis = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/emphasis.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports.tokenize = function emphasis(state, silent) {\n            var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);\n            if (silent) {\n                return false;\n            }\n            if (marker !== 95 && marker !== 42) {\n                return false;\n            }\n            scanned = state.scanDelims(state.pos, marker === 42);\n            for(i = 0; i < scanned.length; i++){\n                token = state.push(\"text\", \"\", 0);\n                token.content = String.fromCharCode(marker);\n                state.delimiters.push({\n                    marker,\n                    length: scanned.length,\n                    token: state.tokens.length - 1,\n                    end: -1,\n                    open: scanned.can_open,\n                    close: scanned.can_close\n                });\n            }\n            state.pos += scanned.length;\n            return true;\n        };\n        function postProcess(state, delimiters) {\n            var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;\n            for(i = max2 - 1; i >= 0; i--){\n                startDelim = delimiters[i];\n                if (startDelim.marker !== 95 && startDelim.marker !== 42) {\n                    continue;\n                }\n                if (startDelim.end === -1) {\n                    continue;\n                }\n                endDelim = delimiters[startDelim.end];\n                isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;\n                ch = String.fromCharCode(startDelim.marker);\n                token = state.tokens[startDelim.token];\n                token.type = isStrong ? \"strong_open\" : \"em_open\";\n                token.tag = isStrong ? \"strong\" : \"em\";\n                token.nesting = 1;\n                token.markup = isStrong ? ch + ch : ch;\n                token.content = \"\";\n                token = state.tokens[endDelim.token];\n                token.type = isStrong ? \"strong_close\" : \"em_close\";\n                token.tag = isStrong ? \"strong\" : \"em\";\n                token.nesting = -1;\n                token.markup = isStrong ? ch + ch : ch;\n                token.content = \"\";\n                if (isStrong) {\n                    state.tokens[delimiters[i - 1].token].content = \"\";\n                    state.tokens[delimiters[startDelim.end + 1].token].content = \"\";\n                    i--;\n                }\n            }\n        }\n        module2.exports.postProcess = function emphasis(state) {\n            var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n            postProcess(state, state.delimiters);\n            for(curr = 0; curr < max2; curr++){\n                if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n                    postProcess(state, tokens_meta[curr].delimiters);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/link.js\nvar require_link = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/link.js\" (exports1, module2) {\n        \"use strict\";\n        var normalizeReference = require_utils().normalizeReference;\n        var isSpace = require_utils().isSpace;\n        module2.exports = function link2(state, silent) {\n            var attrs, code2, label, labelEnd, labelStart, pos, res, ref, token, href = \"\", title = \"\", oldPos = state.pos, max2 = state.posMax, start = state.pos, parseReference = true;\n            if (state.src.charCodeAt(state.pos) !== 91) {\n                return false;\n            }\n            labelStart = state.pos + 1;\n            labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n            if (labelEnd < 0) {\n                return false;\n            }\n            pos = labelEnd + 1;\n            if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n                parseReference = false;\n                pos++;\n                for(; pos < max2; pos++){\n                    code2 = state.src.charCodeAt(pos);\n                    if (!isSpace(code2) && code2 !== 10) {\n                        break;\n                    }\n                }\n                if (pos >= max2) {\n                    return false;\n                }\n                start = pos;\n                res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n                if (res.ok) {\n                    href = state.md.normalizeLink(res.str);\n                    if (state.md.validateLink(href)) {\n                        pos = res.pos;\n                    } else {\n                        href = \"\";\n                    }\n                    start = pos;\n                    for(; pos < max2; pos++){\n                        code2 = state.src.charCodeAt(pos);\n                        if (!isSpace(code2) && code2 !== 10) {\n                            break;\n                        }\n                    }\n                    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n                    if (pos < max2 && start !== pos && res.ok) {\n                        title = res.str;\n                        pos = res.pos;\n                        for(; pos < max2; pos++){\n                            code2 = state.src.charCodeAt(pos);\n                            if (!isSpace(code2) && code2 !== 10) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n                    parseReference = true;\n                }\n                pos++;\n            }\n            if (parseReference) {\n                if (typeof state.env.references === \"undefined\") {\n                    return false;\n                }\n                if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n                    start = pos + 1;\n                    pos = state.md.helpers.parseLinkLabel(state, pos);\n                    if (pos >= 0) {\n                        label = state.src.slice(start, pos++);\n                    } else {\n                        pos = labelEnd + 1;\n                    }\n                } else {\n                    pos = labelEnd + 1;\n                }\n                if (!label) {\n                    label = state.src.slice(labelStart, labelEnd);\n                }\n                ref = state.env.references[normalizeReference(label)];\n                if (!ref) {\n                    state.pos = oldPos;\n                    return false;\n                }\n                href = ref.href;\n                title = ref.title;\n            }\n            if (!silent) {\n                state.pos = labelStart;\n                state.posMax = labelEnd;\n                token = state.push(\"link_open\", \"a\", 1);\n                token.attrs = attrs = [\n                    [\n                        \"href\",\n                        href\n                    ]\n                ];\n                if (title) {\n                    attrs.push([\n                        \"title\",\n                        title\n                    ]);\n                }\n                state.md.inline.tokenize(state);\n                token = state.push(\"link_close\", \"a\", -1);\n            }\n            state.pos = pos;\n            state.posMax = max2;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/image.js\nvar require_image = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/image.js\" (exports1, module2) {\n        \"use strict\";\n        var normalizeReference = require_utils().normalizeReference;\n        var isSpace = require_utils().isSpace;\n        module2.exports = function image2(state, silent) {\n            var attrs, code2, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = \"\", oldPos = state.pos, max2 = state.posMax;\n            if (state.src.charCodeAt(state.pos) !== 33) {\n                return false;\n            }\n            if (state.src.charCodeAt(state.pos + 1) !== 91) {\n                return false;\n            }\n            labelStart = state.pos + 2;\n            labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n            if (labelEnd < 0) {\n                return false;\n            }\n            pos = labelEnd + 1;\n            if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n                pos++;\n                for(; pos < max2; pos++){\n                    code2 = state.src.charCodeAt(pos);\n                    if (!isSpace(code2) && code2 !== 10) {\n                        break;\n                    }\n                }\n                if (pos >= max2) {\n                    return false;\n                }\n                start = pos;\n                res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n                if (res.ok) {\n                    href = state.md.normalizeLink(res.str);\n                    if (state.md.validateLink(href)) {\n                        pos = res.pos;\n                    } else {\n                        href = \"\";\n                    }\n                }\n                start = pos;\n                for(; pos < max2; pos++){\n                    code2 = state.src.charCodeAt(pos);\n                    if (!isSpace(code2) && code2 !== 10) {\n                        break;\n                    }\n                }\n                res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n                if (pos < max2 && start !== pos && res.ok) {\n                    title = res.str;\n                    pos = res.pos;\n                    for(; pos < max2; pos++){\n                        code2 = state.src.charCodeAt(pos);\n                        if (!isSpace(code2) && code2 !== 10) {\n                            break;\n                        }\n                    }\n                } else {\n                    title = \"\";\n                }\n                if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n                    state.pos = oldPos;\n                    return false;\n                }\n                pos++;\n            } else {\n                if (typeof state.env.references === \"undefined\") {\n                    return false;\n                }\n                if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n                    start = pos + 1;\n                    pos = state.md.helpers.parseLinkLabel(state, pos);\n                    if (pos >= 0) {\n                        label = state.src.slice(start, pos++);\n                    } else {\n                        pos = labelEnd + 1;\n                    }\n                } else {\n                    pos = labelEnd + 1;\n                }\n                if (!label) {\n                    label = state.src.slice(labelStart, labelEnd);\n                }\n                ref = state.env.references[normalizeReference(label)];\n                if (!ref) {\n                    state.pos = oldPos;\n                    return false;\n                }\n                href = ref.href;\n                title = ref.title;\n            }\n            if (!silent) {\n                content = state.src.slice(labelStart, labelEnd);\n                state.md.inline.parse(content, state.md, state.env, tokens = []);\n                token = state.push(\"image\", \"img\", 0);\n                token.attrs = attrs = [\n                    [\n                        \"src\",\n                        href\n                    ],\n                    [\n                        \"alt\",\n                        \"\"\n                    ]\n                ];\n                token.children = tokens;\n                token.content = content;\n                if (title) {\n                    attrs.push([\n                        \"title\",\n                        title\n                    ]);\n                }\n            }\n            state.pos = pos;\n            state.posMax = max2;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/autolink.js\nvar require_autolink = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/autolink.js\" (exports1, module2) {\n        \"use strict\";\n        var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n        var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n        module2.exports = function autolink(state, silent) {\n            var url, fullUrl, token, ch, start, max2, pos = state.pos;\n            if (state.src.charCodeAt(pos) !== 60) {\n                return false;\n            }\n            start = state.pos;\n            max2 = state.posMax;\n            for(;;){\n                if (++pos >= max2) return false;\n                ch = state.src.charCodeAt(pos);\n                if (ch === 60) return false;\n                if (ch === 62) break;\n            }\n            url = state.src.slice(start + 1, pos);\n            if (AUTOLINK_RE.test(url)) {\n                fullUrl = state.md.normalizeLink(url);\n                if (!state.md.validateLink(fullUrl)) {\n                    return false;\n                }\n                if (!silent) {\n                    token = state.push(\"link_open\", \"a\", 1);\n                    token.attrs = [\n                        [\n                            \"href\",\n                            fullUrl\n                        ]\n                    ];\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                    token = state.push(\"text\", \"\", 0);\n                    token.content = state.md.normalizeLinkText(url);\n                    token = state.push(\"link_close\", \"a\", -1);\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                }\n                state.pos += url.length + 2;\n                return true;\n            }\n            if (EMAIL_RE.test(url)) {\n                fullUrl = state.md.normalizeLink(\"mailto:\" + url);\n                if (!state.md.validateLink(fullUrl)) {\n                    return false;\n                }\n                if (!silent) {\n                    token = state.push(\"link_open\", \"a\", 1);\n                    token.attrs = [\n                        [\n                            \"href\",\n                            fullUrl\n                        ]\n                    ];\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                    token = state.push(\"text\", \"\", 0);\n                    token.content = state.md.normalizeLinkText(url);\n                    token = state.push(\"link_close\", \"a\", -1);\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                }\n                state.pos += url.length + 2;\n                return true;\n            }\n            return false;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/html_inline.js\nvar require_html_inline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/html_inline.js\" (exports1, module2) {\n        \"use strict\";\n        var HTML_TAG_RE = require_html_re().HTML_TAG_RE;\n        function isLetter(ch) {\n            var lc = ch | 32;\n            return lc >= 97 && lc <= 122;\n        }\n        module2.exports = function html_inline(state, silent) {\n            var ch, match, max2, token, pos = state.pos;\n            if (!state.md.options.html) {\n                return false;\n            }\n            max2 = state.posMax;\n            if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {\n                return false;\n            }\n            ch = state.src.charCodeAt(pos + 1);\n            if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {\n                return false;\n            }\n            match = state.src.slice(pos).match(HTML_TAG_RE);\n            if (!match) {\n                return false;\n            }\n            if (!silent) {\n                token = state.push(\"html_inline\", \"\", 0);\n                token.content = state.src.slice(pos, pos + match[0].length);\n            }\n            state.pos += match[0].length;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/entity.js\nvar require_entity = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/entity.js\" (exports1, module2) {\n        \"use strict\";\n        var entities = require_entities2();\n        var has = require_utils().has;\n        var isValidEntityCode = require_utils().isValidEntityCode;\n        var fromCodePoint = require_utils().fromCodePoint;\n        var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\n        var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\n        module2.exports = function entity(state, silent) {\n            var ch, code2, match, pos = state.pos, max2 = state.posMax;\n            if (state.src.charCodeAt(pos) !== 38) {\n                return false;\n            }\n            if (pos + 1 < max2) {\n                ch = state.src.charCodeAt(pos + 1);\n                if (ch === 35) {\n                    match = state.src.slice(pos).match(DIGITAL_RE);\n                    if (match) {\n                        if (!silent) {\n                            code2 = match[1][0].toLowerCase() === \"x\" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n                            state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);\n                        }\n                        state.pos += match[0].length;\n                        return true;\n                    }\n                } else {\n                    match = state.src.slice(pos).match(NAMED_RE);\n                    if (match) {\n                        if (has(entities, match[1])) {\n                            if (!silent) {\n                                state.pending += entities[match[1]];\n                            }\n                            state.pos += match[0].length;\n                            return true;\n                        }\n                    }\n                }\n            }\n            if (!silent) {\n                state.pending += \"&\";\n            }\n            state.pos++;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/balance_pairs.js\nvar require_balance_pairs = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/balance_pairs.js\" (exports1, module2) {\n        \"use strict\";\n        function processDelimiters(state, delimiters) {\n            var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;\n            if (!max2) return;\n            var headerIdx = 0;\n            var lastTokenIdx = -2;\n            var jumps = [];\n            for(closerIdx = 0; closerIdx < max2; closerIdx++){\n                closer = delimiters[closerIdx];\n                jumps.push(0);\n                if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n                    headerIdx = closerIdx;\n                }\n                lastTokenIdx = closer.token;\n                closer.length = closer.length || 0;\n                if (!closer.close) continue;\n                if (!openersBottom.hasOwnProperty(closer.marker)) {\n                    openersBottom[closer.marker] = [\n                        -1,\n                        -1,\n                        -1,\n                        -1,\n                        -1,\n                        -1\n                    ];\n                }\n                minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n                openerIdx = headerIdx - jumps[headerIdx] - 1;\n                newMinOpenerIdx = openerIdx;\n                for(; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1){\n                    opener = delimiters[openerIdx];\n                    if (opener.marker !== closer.marker) continue;\n                    if (opener.open && opener.end < 0) {\n                        isOddMatch = false;\n                        if (opener.close || closer.open) {\n                            if ((opener.length + closer.length) % 3 === 0) {\n                                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n                                    isOddMatch = true;\n                                }\n                            }\n                        }\n                        if (!isOddMatch) {\n                            lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n                            jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n                            jumps[openerIdx] = lastJump;\n                            closer.open = false;\n                            opener.end = closerIdx;\n                            opener.close = false;\n                            newMinOpenerIdx = -1;\n                            lastTokenIdx = -2;\n                            break;\n                        }\n                    }\n                }\n                if (newMinOpenerIdx !== -1) {\n                    openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n                }\n            }\n        }\n        module2.exports = function link_pairs(state) {\n            var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n            processDelimiters(state, state.delimiters);\n            for(curr = 0; curr < max2; curr++){\n                if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n                    processDelimiters(state, tokens_meta[curr].delimiters);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/text_collapse.js\nvar require_text_collapse = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/text_collapse.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function text_collapse(state) {\n            var curr, last, level = 0, tokens = state.tokens, max2 = state.tokens.length;\n            for(curr = last = 0; curr < max2; curr++){\n                if (tokens[curr].nesting < 0) level--;\n                tokens[curr].level = level;\n                if (tokens[curr].nesting > 0) level++;\n                if (tokens[curr].type === \"text\" && curr + 1 < max2 && tokens[curr + 1].type === \"text\") {\n                    tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n                } else {\n                    if (curr !== last) {\n                        tokens[last] = tokens[curr];\n                    }\n                    last++;\n                }\n            }\n            if (curr !== last) {\n                tokens.length = last;\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/state_inline.js\nvar require_state_inline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/state_inline.js\" (exports1, module2) {\n        \"use strict\";\n        var Token = require_token();\n        var isWhiteSpace = require_utils().isWhiteSpace;\n        var isPunctChar = require_utils().isPunctChar;\n        var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n        function StateInline(src, md, env, outTokens) {\n            this.src = src;\n            this.env = env;\n            this.md = md;\n            this.tokens = outTokens;\n            this.tokens_meta = Array(outTokens.length);\n            this.pos = 0;\n            this.posMax = this.src.length;\n            this.level = 0;\n            this.pending = \"\";\n            this.pendingLevel = 0;\n            this.cache = {};\n            this.delimiters = [];\n            this._prev_delimiters = [];\n            this.backticks = {};\n            this.backticksScanned = false;\n        }\n        StateInline.prototype.pushPending = function() {\n            var token = new Token(\"text\", \"\", 0);\n            token.content = this.pending;\n            token.level = this.pendingLevel;\n            this.tokens.push(token);\n            this.pending = \"\";\n            return token;\n        };\n        StateInline.prototype.push = function(type, tag, nesting) {\n            if (this.pending) {\n                this.pushPending();\n            }\n            var token = new Token(type, tag, nesting);\n            var token_meta = null;\n            if (nesting < 0) {\n                this.level--;\n                this.delimiters = this._prev_delimiters.pop();\n            }\n            token.level = this.level;\n            if (nesting > 0) {\n                this.level++;\n                this._prev_delimiters.push(this.delimiters);\n                this.delimiters = [];\n                token_meta = {\n                    delimiters: this.delimiters\n                };\n            }\n            this.pendingLevel = this.level;\n            this.tokens.push(token);\n            this.tokens_meta.push(token_meta);\n            return token;\n        };\n        StateInline.prototype.scanDelims = function(start, canSplitWord) {\n            var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start);\n            lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;\n            while(pos < max2 && this.src.charCodeAt(pos) === marker){\n                pos++;\n            }\n            count = pos - start;\n            nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;\n            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n            isLastWhiteSpace = isWhiteSpace(lastChar);\n            isNextWhiteSpace = isWhiteSpace(nextChar);\n            if (isNextWhiteSpace) {\n                left_flanking = false;\n            } else if (isNextPunctChar) {\n                if (!(isLastWhiteSpace || isLastPunctChar)) {\n                    left_flanking = false;\n                }\n            }\n            if (isLastWhiteSpace) {\n                right_flanking = false;\n            } else if (isLastPunctChar) {\n                if (!(isNextWhiteSpace || isNextPunctChar)) {\n                    right_flanking = false;\n                }\n            }\n            if (!canSplitWord) {\n                can_open = left_flanking && (!right_flanking || isLastPunctChar);\n                can_close = right_flanking && (!left_flanking || isNextPunctChar);\n            } else {\n                can_open = left_flanking;\n                can_close = right_flanking;\n            }\n            return {\n                can_open,\n                can_close,\n                length: count\n            };\n        };\n        StateInline.prototype.Token = Token;\n        module2.exports = StateInline;\n    }\n});\n// node_modules/markdown-it/lib/parser_inline.js\nvar require_parser_inline = __commonJS({\n    \"node_modules/markdown-it/lib/parser_inline.js\" (exports1, module2) {\n        \"use strict\";\n        var Ruler = require_ruler();\n        var _rules = [\n            [\n                \"text\",\n                require_text()\n            ],\n            [\n                \"newline\",\n                require_newline()\n            ],\n            [\n                \"escape\",\n                require_escape()\n            ],\n            [\n                \"backticks\",\n                require_backticks()\n            ],\n            [\n                \"strikethrough\",\n                require_strikethrough().tokenize\n            ],\n            [\n                \"emphasis\",\n                require_emphasis().tokenize\n            ],\n            [\n                \"link\",\n                require_link()\n            ],\n            [\n                \"image\",\n                require_image()\n            ],\n            [\n                \"autolink\",\n                require_autolink()\n            ],\n            [\n                \"html_inline\",\n                require_html_inline()\n            ],\n            [\n                \"entity\",\n                require_entity()\n            ]\n        ];\n        var _rules2 = [\n            [\n                \"balance_pairs\",\n                require_balance_pairs()\n            ],\n            [\n                \"strikethrough\",\n                require_strikethrough().postProcess\n            ],\n            [\n                \"emphasis\",\n                require_emphasis().postProcess\n            ],\n            [\n                \"text_collapse\",\n                require_text_collapse()\n            ]\n        ];\n        function ParserInline() {\n            var i;\n            this.ruler = new Ruler();\n            for(i = 0; i < _rules.length; i++){\n                this.ruler.push(_rules[i][0], _rules[i][1]);\n            }\n            this.ruler2 = new Ruler();\n            for(i = 0; i < _rules2.length; i++){\n                this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n            }\n        }\n        ParserInline.prototype.skipToken = function(state) {\n            var ok, i, pos = state.pos, rules = this.ruler.getRules(\"\"), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;\n            if (typeof cache[pos] !== \"undefined\") {\n                state.pos = cache[pos];\n                return;\n            }\n            if (state.level < maxNesting) {\n                for(i = 0; i < len; i++){\n                    state.level++;\n                    ok = rules[i](state, true);\n                    state.level--;\n                    if (ok) {\n                        break;\n                    }\n                }\n            } else {\n                state.pos = state.posMax;\n            }\n            if (!ok) {\n                state.pos++;\n            }\n            cache[pos] = state.pos;\n        };\n        ParserInline.prototype.tokenize = function(state) {\n            var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;\n            while(state.pos < end){\n                if (state.level < maxNesting) {\n                    for(i = 0; i < len; i++){\n                        ok = rules[i](state, false);\n                        if (ok) {\n                            break;\n                        }\n                    }\n                }\n                if (ok) {\n                    if (state.pos >= end) {\n                        break;\n                    }\n                    continue;\n                }\n                state.pending += state.src[state.pos++];\n            }\n            if (state.pending) {\n                state.pushPending();\n            }\n        };\n        ParserInline.prototype.parse = function(str, md, env, outTokens) {\n            var i, rules, len;\n            var state = new this.State(str, md, env, outTokens);\n            this.tokenize(state);\n            rules = this.ruler2.getRules(\"\");\n            len = rules.length;\n            for(i = 0; i < len; i++){\n                rules[i](state);\n            }\n        };\n        ParserInline.prototype.State = require_state_inline();\n        module2.exports = ParserInline;\n    }\n});\n// node_modules/linkify-it/lib/re.js\nvar require_re = __commonJS({\n    \"node_modules/linkify-it/lib/re.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = function(opts) {\n            var re = {};\n            re.src_Any = require_regex2().source;\n            re.src_Cc = require_regex3().source;\n            re.src_Z = require_regex5().source;\n            re.src_P = require_regex().source;\n            re.src_ZPCc = [\n                re.src_Z,\n                re.src_P,\n                re.src_Cc\n            ].join(\"|\");\n            re.src_ZCc = [\n                re.src_Z,\n                re.src_Cc\n            ].join(\"|\");\n            var text_separators = \"[><｜]\";\n            re.src_pseudo_letter = \"(?:(?!\" + text_separators + \"|\" + re.src_ZPCc + \")\" + re.src_Any + \")\";\n            re.src_ip4 = \"(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";\n            re.src_auth = \"(?:(?:(?!\" + re.src_ZCc + \"|[@/\\\\[\\\\]()]).)+@)?\";\n            re.src_port = \"(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?\";\n            re.src_host_terminator = \"(?=$|\" + text_separators + \"|\" + re.src_ZPCc + \")(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|\" + re.src_ZPCc + \"))\";\n            re.src_path = \"(?:[/?#](?:(?!\" + re.src_ZCc + \"|\" + text_separators + `|[()[\\\\]{}.,\"'?!\\\\-;]).|\\\\[(?:(?!` + re.src_ZCc + \"|\\\\]).)*\\\\]|\\\\((?:(?!\" + re.src_ZCc + \"|[)]).)*\\\\)|\\\\{(?:(?!\" + re.src_ZCc + '|[}]).)*\\\\}|\\\\\"(?:(?!' + re.src_ZCc + `|[\"]).)+\\\\\"|\\\\'(?:(?!` + re.src_ZCc + \"|[']).)+\\\\'|\\\\'(?=\" + re.src_pseudo_letter + \"|[-]).|\\\\.{2,}[a-zA-Z0-9%/&]|\\\\.(?!\" + re.src_ZCc + \"|[.]).|\" + (opts && opts[\"---\"] ? \"\\\\-(?!--(?:[^-]|$))(?:-*)|\" : \"\\\\-+|\") + \",(?!\" + re.src_ZCc + \").|;(?!\" + re.src_ZCc + \").|\\\\!+(?!\" + re.src_ZCc + \"|[!]).|\\\\?(?!\" + re.src_ZCc + \"|[?]).)+|\\\\/)?\";\n            re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n            re.src_xn = \"xn--[a-z0-9\\\\-]{1,59}\";\n            re.src_domain_root = \"(?:\" + re.src_xn + \"|\" + re.src_pseudo_letter + \"{1,63})\";\n            re.src_domain = \"(?:\" + re.src_xn + \"|(?:\" + re.src_pseudo_letter + \")|(?:\" + re.src_pseudo_letter + \"(?:-|\" + re.src_pseudo_letter + \"){0,61}\" + re.src_pseudo_letter + \"))\";\n            re.src_host = \"(?:(?:(?:(?:\" + re.src_domain + \")\\\\.)*\" + re.src_domain + \"))\";\n            re.tpl_host_fuzzy = \"(?:\" + re.src_ip4 + \"|(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%)))\";\n            re.tpl_host_no_ip_fuzzy = \"(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%))\";\n            re.src_host_strict = re.src_host + re.src_host_terminator;\n            re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n            re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n            re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n            re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n            re.tpl_host_fuzzy_test = \"localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:\" + re.src_ZPCc + \"|>|$))\";\n            re.tpl_email_fuzzy = \"(^|\" + text_separators + '|\"|\\\\(|' + re.src_ZCc + \")(\" + re.src_email_name + \"@\" + re.tpl_host_fuzzy_strict + \")\";\n            re.tpl_link_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|｜]|\" + re.src_ZPCc + \"))((?![$+<=>^`|｜])\" + re.tpl_host_port_fuzzy_strict + re.src_path + \")\";\n            re.tpl_link_no_ip_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|｜]|\" + re.src_ZPCc + \"))((?![$+<=>^`|｜])\" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + \")\";\n            return re;\n        };\n    }\n});\n// node_modules/linkify-it/index.js\nvar require_linkify_it = __commonJS({\n    \"node_modules/linkify-it/index.js\" (exports1, module2) {\n        \"use strict\";\n        function assign(obj) {\n            var sources = Array.prototype.slice.call(arguments, 1);\n            sources.forEach(function(source) {\n                if (!source) {\n                    return;\n                }\n                Object.keys(source).forEach(function(key) {\n                    obj[key] = source[key];\n                });\n            });\n            return obj;\n        }\n        function _class(obj) {\n            return Object.prototype.toString.call(obj);\n        }\n        function isString(obj) {\n            return _class(obj) === \"[object String]\";\n        }\n        function isObject(obj) {\n            return _class(obj) === \"[object Object]\";\n        }\n        function isRegExp(obj) {\n            return _class(obj) === \"[object RegExp]\";\n        }\n        function isFunction2(obj) {\n            return _class(obj) === \"[object Function]\";\n        }\n        function escapeRE(str) {\n            return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n        }\n        var defaultOptions = {\n            fuzzyLink: true,\n            fuzzyEmail: true,\n            fuzzyIP: false\n        };\n        function isOptionsObj(obj) {\n            return Object.keys(obj || {}).reduce(function(acc, k) {\n                return acc || defaultOptions.hasOwnProperty(k);\n            }, false);\n        }\n        var defaultSchemas = {\n            \"http:\": {\n                validate: function(text2, pos, self) {\n                    var tail = text2.slice(pos);\n                    if (!self.re.http) {\n                        self.re.http = new RegExp(\"^\\\\/\\\\/\" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, \"i\");\n                    }\n                    if (self.re.http.test(tail)) {\n                        return tail.match(self.re.http)[0].length;\n                    }\n                    return 0;\n                }\n            },\n            \"https:\": \"http:\",\n            \"ftp:\": \"http:\",\n            \"//\": {\n                validate: function(text2, pos, self) {\n                    var tail = text2.slice(pos);\n                    if (!self.re.no_http) {\n                        self.re.no_http = new RegExp(\"^\" + self.re.src_auth + \"(?:localhost|(?:(?:\" + self.re.src_domain + \")\\\\.)+\" + self.re.src_domain_root + \")\" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, \"i\");\n                    }\n                    if (self.re.no_http.test(tail)) {\n                        if (pos >= 3 && text2[pos - 3] === \":\") {\n                            return 0;\n                        }\n                        if (pos >= 3 && text2[pos - 3] === \"/\") {\n                            return 0;\n                        }\n                        return tail.match(self.re.no_http)[0].length;\n                    }\n                    return 0;\n                }\n            },\n            \"mailto:\": {\n                validate: function(text2, pos, self) {\n                    var tail = text2.slice(pos);\n                    if (!self.re.mailto) {\n                        self.re.mailto = new RegExp(\"^\" + self.re.src_email_name + \"@\" + self.re.src_host_strict, \"i\");\n                    }\n                    if (self.re.mailto.test(tail)) {\n                        return tail.match(self.re.mailto)[0].length;\n                    }\n                    return 0;\n                }\n            }\n        };\n        var tlds_2ch_src_re = \"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\";\n        var tlds_default = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\".split(\"|\");\n        function resetScanCache(self) {\n            self.__index__ = -1;\n            self.__text_cache__ = \"\";\n        }\n        function createValidator(re) {\n            return function(text2, pos) {\n                var tail = text2.slice(pos);\n                if (re.test(tail)) {\n                    return tail.match(re)[0].length;\n                }\n                return 0;\n            };\n        }\n        function createNormalizer() {\n            return function(match, self) {\n                self.normalize(match);\n            };\n        }\n        function compile(self) {\n            var re = self.re = require_re()(self.__opts__);\n            var tlds = self.__tlds__.slice();\n            self.onCompile();\n            if (!self.__tlds_replaced__) {\n                tlds.push(tlds_2ch_src_re);\n            }\n            tlds.push(re.src_xn);\n            re.src_tlds = tlds.join(\"|\");\n            function untpl(tpl) {\n                return tpl.replace(\"%TLDS%\", re.src_tlds);\n            }\n            re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), \"i\");\n            re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), \"i\");\n            re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), \"i\");\n            re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), \"i\");\n            var aliases = [];\n            self.__compiled__ = {};\n            function schemaError(name, val) {\n                throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n            }\n            Object.keys(self.__schemas__).forEach(function(name) {\n                var val = self.__schemas__[name];\n                if (val === null) {\n                    return;\n                }\n                var compiled = {\n                    validate: null,\n                    link: null\n                };\n                self.__compiled__[name] = compiled;\n                if (isObject(val)) {\n                    if (isRegExp(val.validate)) {\n                        compiled.validate = createValidator(val.validate);\n                    } else if (isFunction2(val.validate)) {\n                        compiled.validate = val.validate;\n                    } else {\n                        schemaError(name, val);\n                    }\n                    if (isFunction2(val.normalize)) {\n                        compiled.normalize = val.normalize;\n                    } else if (!val.normalize) {\n                        compiled.normalize = createNormalizer();\n                    } else {\n                        schemaError(name, val);\n                    }\n                    return;\n                }\n                if (isString(val)) {\n                    aliases.push(name);\n                    return;\n                }\n                schemaError(name, val);\n            });\n            aliases.forEach(function(alias) {\n                if (!self.__compiled__[self.__schemas__[alias]]) {\n                    return;\n                }\n                self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n                self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n            });\n            self.__compiled__[\"\"] = {\n                validate: null,\n                normalize: createNormalizer()\n            };\n            var slist = Object.keys(self.__compiled__).filter(function(name) {\n                return name.length > 0 && self.__compiled__[name];\n            }).map(escapeRE).join(\"|\");\n            self.re.schema_test = RegExp(\"(^|(?!_)(?:[><｜]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"i\");\n            self.re.schema_search = RegExp(\"(^|(?!_)(?:[><｜]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"ig\");\n            self.re.pretest = RegExp(\"(\" + self.re.schema_test.source + \")|(\" + self.re.host_fuzzy_test.source + \")|@\", \"i\");\n            resetScanCache(self);\n        }\n        function Match(self, shift) {\n            var start = self.__index__, end = self.__last_index__, text2 = self.__text_cache__.slice(start, end);\n            this.schema = self.__schema__.toLowerCase();\n            this.index = start + shift;\n            this.lastIndex = end + shift;\n            this.raw = text2;\n            this.text = text2;\n            this.url = text2;\n        }\n        function createMatch(self, shift) {\n            var match = new Match(self, shift);\n            self.__compiled__[match.schema].normalize(match, self);\n            return match;\n        }\n        function LinkifyIt(schemas, options) {\n            if (!(this instanceof LinkifyIt)) {\n                return new LinkifyIt(schemas, options);\n            }\n            if (!options) {\n                if (isOptionsObj(schemas)) {\n                    options = schemas;\n                    schemas = {};\n                }\n            }\n            this.__opts__ = assign({}, defaultOptions, options);\n            this.__index__ = -1;\n            this.__last_index__ = -1;\n            this.__schema__ = \"\";\n            this.__text_cache__ = \"\";\n            this.__schemas__ = assign({}, defaultSchemas, schemas);\n            this.__compiled__ = {};\n            this.__tlds__ = tlds_default;\n            this.__tlds_replaced__ = false;\n            this.re = {};\n            compile(this);\n        }\n        LinkifyIt.prototype.add = function add(schema, definition) {\n            this.__schemas__[schema] = definition;\n            compile(this);\n            return this;\n        };\n        LinkifyIt.prototype.set = function set(options) {\n            this.__opts__ = assign(this.__opts__, options);\n            return this;\n        };\n        LinkifyIt.prototype.test = function test(text2) {\n            this.__text_cache__ = text2;\n            this.__index__ = -1;\n            if (!text2.length) {\n                return false;\n            }\n            var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n            if (this.re.schema_test.test(text2)) {\n                re = this.re.schema_search;\n                re.lastIndex = 0;\n                while((m = re.exec(text2)) !== null){\n                    len = this.testSchemaAt(text2, m[2], re.lastIndex);\n                    if (len) {\n                        this.__schema__ = m[2];\n                        this.__index__ = m.index + m[1].length;\n                        this.__last_index__ = m.index + m[0].length + len;\n                        break;\n                    }\n                }\n            }\n            if (this.__opts__.fuzzyLink && this.__compiled__[\"http:\"]) {\n                tld_pos = text2.search(this.re.host_fuzzy_test);\n                if (tld_pos >= 0) {\n                    if (this.__index__ < 0 || tld_pos < this.__index__) {\n                        if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n                            shift = ml.index + ml[1].length;\n                            if (this.__index__ < 0 || shift < this.__index__) {\n                                this.__schema__ = \"\";\n                                this.__index__ = shift;\n                                this.__last_index__ = ml.index + ml[0].length;\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.__opts__.fuzzyEmail && this.__compiled__[\"mailto:\"]) {\n                at_pos = text2.indexOf(\"@\");\n                if (at_pos >= 0) {\n                    if ((me = text2.match(this.re.email_fuzzy)) !== null) {\n                        shift = me.index + me[1].length;\n                        next = me.index + me[0].length;\n                        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n                            this.__schema__ = \"mailto:\";\n                            this.__index__ = shift;\n                            this.__last_index__ = next;\n                        }\n                    }\n                }\n            }\n            return this.__index__ >= 0;\n        };\n        LinkifyIt.prototype.pretest = function pretest(text2) {\n            return this.re.pretest.test(text2);\n        };\n        LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {\n            if (!this.__compiled__[schema.toLowerCase()]) {\n                return 0;\n            }\n            return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);\n        };\n        LinkifyIt.prototype.match = function match(text2) {\n            var shift = 0, result = [];\n            if (this.__index__ >= 0 && this.__text_cache__ === text2) {\n                result.push(createMatch(this, shift));\n                shift = this.__last_index__;\n            }\n            var tail = shift ? text2.slice(shift) : text2;\n            while(this.test(tail)){\n                result.push(createMatch(this, shift));\n                tail = tail.slice(this.__last_index__);\n                shift += this.__last_index__;\n            }\n            if (result.length) {\n                return result;\n            }\n            return null;\n        };\n        LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {\n            list2 = Array.isArray(list2) ? list2 : [\n                list2\n            ];\n            if (!keepOld) {\n                this.__tlds__ = list2.slice();\n                this.__tlds_replaced__ = true;\n                compile(this);\n                return this;\n            }\n            this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {\n                return el !== arr[idx - 1];\n            }).reverse();\n            compile(this);\n            return this;\n        };\n        LinkifyIt.prototype.normalize = function normalize(match) {\n            if (!match.schema) {\n                match.url = \"http://\" + match.url;\n            }\n            if (match.schema === \"mailto:\" && !/^mailto:/i.test(match.url)) {\n                match.url = \"mailto:\" + match.url;\n            }\n        };\n        LinkifyIt.prototype.onCompile = function onCompile() {};\n        module2.exports = LinkifyIt;\n    }\n});\n// node_modules/punycode/punycode.js\nvar require_punycode = __commonJS({\n    \"node_modules/punycode/punycode.js\" (exports1, module2) {\n        \"use strict\";\n        var maxInt = 2147483647;\n        var base = 36;\n        var tMin = 1;\n        var tMax = 26;\n        var skew = 38;\n        var damp = 700;\n        var initialBias = 72;\n        var initialN = 128;\n        var delimiter = \"-\";\n        var regexPunycode = /^xn--/;\n        var regexNonASCII = /[^\\0-\\x7E]/;\n        var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\n        var errors = {\n            \"overflow\": \"Overflow: input needs wider integers to process\",\n            \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n            \"invalid-input\": \"Invalid input\"\n        };\n        var baseMinusTMin = base - tMin;\n        var floor = Math.floor;\n        var stringFromCharCode = String.fromCharCode;\n        function error2(type) {\n            throw new RangeError(errors[type]);\n        }\n        function map(array, fn) {\n            const result = [];\n            let length = array.length;\n            while(length--){\n                result[length] = fn(array[length]);\n            }\n            return result;\n        }\n        function mapDomain(string, fn) {\n            const parts = string.split(\"@\");\n            let result = \"\";\n            if (parts.length > 1) {\n                result = parts[0] + \"@\";\n                string = parts[1];\n            }\n            string = string.replace(regexSeparators, \".\");\n            const labels = string.split(\".\");\n            const encoded = map(labels, fn).join(\".\");\n            return result + encoded;\n        }\n        function ucs2decode(string) {\n            const output = [];\n            let counter = 0;\n            const length = string.length;\n            while(counter < length){\n                const value = string.charCodeAt(counter++);\n                if (value >= 55296 && value <= 56319 && counter < length) {\n                    const extra = string.charCodeAt(counter++);\n                    if ((extra & 64512) == 56320) {\n                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);\n                    } else {\n                        output.push(value);\n                        counter--;\n                    }\n                } else {\n                    output.push(value);\n                }\n            }\n            return output;\n        }\n        var ucs2encode = (array)=>String.fromCodePoint(...array);\n        var basicToDigit = function(codePoint) {\n            if (codePoint - 48 < 10) {\n                return codePoint - 22;\n            }\n            if (codePoint - 65 < 26) {\n                return codePoint - 65;\n            }\n            if (codePoint - 97 < 26) {\n                return codePoint - 97;\n            }\n            return base;\n        };\n        var digitToBasic = function(digit, flag) {\n            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n        };\n        var adapt = function(delta, numPoints, firstTime) {\n            let k = 0;\n            delta = firstTime ? floor(delta / damp) : delta >> 1;\n            delta += floor(delta / numPoints);\n            for(; delta > baseMinusTMin * tMax >> 1; k += base){\n                delta = floor(delta / baseMinusTMin);\n            }\n            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n        };\n        var decode = function(input) {\n            const output = [];\n            const inputLength = input.length;\n            let i = 0;\n            let n = initialN;\n            let bias = initialBias;\n            let basic = input.lastIndexOf(delimiter);\n            if (basic < 0) {\n                basic = 0;\n            }\n            for(let j = 0; j < basic; ++j){\n                if (input.charCodeAt(j) >= 128) {\n                    error2(\"not-basic\");\n                }\n                output.push(input.charCodeAt(j));\n            }\n            for(let index = basic > 0 ? basic + 1 : 0; index < inputLength;){\n                let oldi = i;\n                for(let w = 1, k = base;; k += base){\n                    if (index >= inputLength) {\n                        error2(\"invalid-input\");\n                    }\n                    const digit = basicToDigit(input.charCodeAt(index++));\n                    if (digit >= base || digit > floor((maxInt - i) / w)) {\n                        error2(\"overflow\");\n                    }\n                    i += digit * w;\n                    const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                    if (digit < t) {\n                        break;\n                    }\n                    const baseMinusT = base - t;\n                    if (w > floor(maxInt / baseMinusT)) {\n                        error2(\"overflow\");\n                    }\n                    w *= baseMinusT;\n                }\n                const out = output.length + 1;\n                bias = adapt(i - oldi, out, oldi == 0);\n                if (floor(i / out) > maxInt - n) {\n                    error2(\"overflow\");\n                }\n                n += floor(i / out);\n                i %= out;\n                output.splice(i++, 0, n);\n            }\n            return String.fromCodePoint(...output);\n        };\n        var encode = function(input) {\n            const output = [];\n            input = ucs2decode(input);\n            let inputLength = input.length;\n            let n = initialN;\n            let delta = 0;\n            let bias = initialBias;\n            for (const currentValue of input){\n                if (currentValue < 128) {\n                    output.push(stringFromCharCode(currentValue));\n                }\n            }\n            let basicLength = output.length;\n            let handledCPCount = basicLength;\n            if (basicLength) {\n                output.push(delimiter);\n            }\n            while(handledCPCount < inputLength){\n                let m = maxInt;\n                for (const currentValue of input){\n                    if (currentValue >= n && currentValue < m) {\n                        m = currentValue;\n                    }\n                }\n                const handledCPCountPlusOne = handledCPCount + 1;\n                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n                    error2(\"overflow\");\n                }\n                delta += (m - n) * handledCPCountPlusOne;\n                n = m;\n                for (const currentValue of input){\n                    if (currentValue < n && ++delta > maxInt) {\n                        error2(\"overflow\");\n                    }\n                    if (currentValue == n) {\n                        let q = delta;\n                        for(let k = base;; k += base){\n                            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                            if (q < t) {\n                                break;\n                            }\n                            const qMinusT = q - t;\n                            const baseMinusT = base - t;\n                            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                            q = floor(qMinusT / baseMinusT);\n                        }\n                        output.push(stringFromCharCode(digitToBasic(q, 0)));\n                        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n                        delta = 0;\n                        ++handledCPCount;\n                    }\n                }\n                ++delta;\n                ++n;\n            }\n            return output.join(\"\");\n        };\n        var toUnicode = function(input) {\n            return mapDomain(input, function(string) {\n                return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n            });\n        };\n        var toASCII = function(input) {\n            return mapDomain(input, function(string) {\n                return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n            });\n        };\n        var punycode = {\n            \"version\": \"2.1.0\",\n            \"ucs2\": {\n                \"decode\": ucs2decode,\n                \"encode\": ucs2encode\n            },\n            \"decode\": decode,\n            \"encode\": encode,\n            \"toASCII\": toASCII,\n            \"toUnicode\": toUnicode\n        };\n        module2.exports = punycode;\n    }\n});\n// node_modules/markdown-it/lib/presets/default.js\nvar require_default = __commonJS({\n    \"node_modules/markdown-it/lib/presets/default.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = {\n            options: {\n                html: false,\n                xhtmlOut: false,\n                breaks: false,\n                langPrefix: \"language-\",\n                linkify: false,\n                typographer: false,\n                quotes: \"“”‘’\",\n                highlight: null,\n                maxNesting: 100\n            },\n            components: {\n                core: {},\n                block: {},\n                inline: {}\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/presets/zero.js\nvar require_zero = __commonJS({\n    \"node_modules/markdown-it/lib/presets/zero.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = {\n            options: {\n                html: false,\n                xhtmlOut: false,\n                breaks: false,\n                langPrefix: \"language-\",\n                linkify: false,\n                typographer: false,\n                quotes: \"“”‘’\",\n                highlight: null,\n                maxNesting: 20\n            },\n            components: {\n                core: {\n                    rules: [\n                        \"normalize\",\n                        \"block\",\n                        \"inline\"\n                    ]\n                },\n                block: {\n                    rules: [\n                        \"paragraph\"\n                    ]\n                },\n                inline: {\n                    rules: [\n                        \"text\"\n                    ],\n                    rules2: [\n                        \"balance_pairs\",\n                        \"text_collapse\"\n                    ]\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/presets/commonmark.js\nvar require_commonmark = __commonJS({\n    \"node_modules/markdown-it/lib/presets/commonmark.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = {\n            options: {\n                html: true,\n                xhtmlOut: true,\n                breaks: false,\n                langPrefix: \"language-\",\n                linkify: false,\n                typographer: false,\n                quotes: \"“”‘’\",\n                highlight: null,\n                maxNesting: 20\n            },\n            components: {\n                core: {\n                    rules: [\n                        \"normalize\",\n                        \"block\",\n                        \"inline\"\n                    ]\n                },\n                block: {\n                    rules: [\n                        \"blockquote\",\n                        \"code\",\n                        \"fence\",\n                        \"heading\",\n                        \"hr\",\n                        \"html_block\",\n                        \"lheading\",\n                        \"list\",\n                        \"reference\",\n                        \"paragraph\"\n                    ]\n                },\n                inline: {\n                    rules: [\n                        \"autolink\",\n                        \"backticks\",\n                        \"emphasis\",\n                        \"entity\",\n                        \"escape\",\n                        \"html_inline\",\n                        \"image\",\n                        \"link\",\n                        \"newline\",\n                        \"text\"\n                    ],\n                    rules2: [\n                        \"balance_pairs\",\n                        \"emphasis\",\n                        \"text_collapse\"\n                    ]\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/index.js\nvar require_lib = __commonJS({\n    \"node_modules/markdown-it/lib/index.js\" (exports1, module2) {\n        \"use strict\";\n        var utils = require_utils();\n        var helpers = require_helpers();\n        var Renderer = require_renderer();\n        var ParserCore = require_parser_core();\n        var ParserBlock = require_parser_block();\n        var ParserInline = require_parser_inline();\n        var LinkifyIt = require_linkify_it();\n        var mdurl = require_mdurl();\n        var punycode = require_punycode();\n        var config = {\n            default: require_default(),\n            zero: require_zero(),\n            commonmark: require_commonmark()\n        };\n        var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\n        var GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n        function validateLink(url) {\n            var str = url.trim().toLowerCase();\n            return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;\n        }\n        var RECODE_HOSTNAME_FOR = [\n            \"http:\",\n            \"https:\",\n            \"mailto:\"\n        ];\n        function normalizeLink(url) {\n            var parsed = mdurl.parse(url, true);\n            if (parsed.hostname) {\n                if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n                    try {\n                        parsed.hostname = punycode.toASCII(parsed.hostname);\n                    } catch (er) {}\n                }\n            }\n            return mdurl.encode(mdurl.format(parsed));\n        }\n        function normalizeLinkText(url) {\n            var parsed = mdurl.parse(url, true);\n            if (parsed.hostname) {\n                if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n                    try {\n                        parsed.hostname = punycode.toUnicode(parsed.hostname);\n                    } catch (er) {}\n                }\n            }\n            return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + \"%\");\n        }\n        function MarkdownIt3(presetName, options) {\n            if (!(this instanceof MarkdownIt3)) {\n                return new MarkdownIt3(presetName, options);\n            }\n            if (!options) {\n                if (!utils.isString(presetName)) {\n                    options = presetName || {};\n                    presetName = \"default\";\n                }\n            }\n            this.inline = new ParserInline();\n            this.block = new ParserBlock();\n            this.core = new ParserCore();\n            this.renderer = new Renderer();\n            this.linkify = new LinkifyIt();\n            this.validateLink = validateLink;\n            this.normalizeLink = normalizeLink;\n            this.normalizeLinkText = normalizeLinkText;\n            this.utils = utils;\n            this.helpers = utils.assign({}, helpers);\n            this.options = {};\n            this.configure(presetName);\n            if (options) {\n                this.set(options);\n            }\n        }\n        MarkdownIt3.prototype.set = function(options) {\n            utils.assign(this.options, options);\n            return this;\n        };\n        MarkdownIt3.prototype.configure = function(presets) {\n            var self = this, presetName;\n            if (utils.isString(presets)) {\n                presetName = presets;\n                presets = config[presetName];\n                if (!presets) {\n                    throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n                }\n            }\n            if (!presets) {\n                throw new Error(\"Wrong `markdown-it` preset, can't be empty\");\n            }\n            if (presets.options) {\n                self.set(presets.options);\n            }\n            if (presets.components) {\n                Object.keys(presets.components).forEach(function(name) {\n                    if (presets.components[name].rules) {\n                        self[name].ruler.enableOnly(presets.components[name].rules);\n                    }\n                    if (presets.components[name].rules2) {\n                        self[name].ruler2.enableOnly(presets.components[name].rules2);\n                    }\n                });\n            }\n            return this;\n        };\n        MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {\n            var result = [];\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            [\n                \"core\",\n                \"block\",\n                \"inline\"\n            ].forEach(function(chain) {\n                result = result.concat(this[chain].ruler.enable(list2, true));\n            }, this);\n            result = result.concat(this.inline.ruler2.enable(list2, true));\n            var missed = list2.filter(function(name) {\n                return result.indexOf(name) < 0;\n            });\n            if (missed.length && !ignoreInvalid) {\n                throw new Error(\"MarkdownIt. Failed to enable unknown rule(s): \" + missed);\n            }\n            return this;\n        };\n        MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {\n            var result = [];\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            [\n                \"core\",\n                \"block\",\n                \"inline\"\n            ].forEach(function(chain) {\n                result = result.concat(this[chain].ruler.disable(list2, true));\n            }, this);\n            result = result.concat(this.inline.ruler2.disable(list2, true));\n            var missed = list2.filter(function(name) {\n                return result.indexOf(name) < 0;\n            });\n            if (missed.length && !ignoreInvalid) {\n                throw new Error(\"MarkdownIt. Failed to disable unknown rule(s): \" + missed);\n            }\n            return this;\n        };\n        MarkdownIt3.prototype.use = function(plugin4) {\n            var args = [\n                this\n            ].concat(Array.prototype.slice.call(arguments, 1));\n            plugin4.apply(plugin4, args);\n            return this;\n        };\n        MarkdownIt3.prototype.parse = function(src, env) {\n            if (typeof src !== \"string\") {\n                throw new Error(\"Input data should be a String\");\n            }\n            var state = new this.core.State(src, this, env);\n            this.core.process(state);\n            return state.tokens;\n        };\n        MarkdownIt3.prototype.render = function(src, env) {\n            env = env || {};\n            return this.renderer.render(this.parse(src, env), this.options, env);\n        };\n        MarkdownIt3.prototype.parseInline = function(src, env) {\n            var state = new this.core.State(src, this, env);\n            state.inlineMode = true;\n            this.core.process(state);\n            return state.tokens;\n        };\n        MarkdownIt3.prototype.renderInline = function(src, env) {\n            env = env || {};\n            return this.renderer.render(this.parseInline(src, env), this.options, env);\n        };\n        module2.exports = MarkdownIt3;\n    }\n});\n// node_modules/markdown-it/index.js\nvar require_markdown_it = __commonJS({\n    \"node_modules/markdown-it/index.js\" (exports1, module2) {\n        \"use strict\";\n        module2.exports = require_lib();\n    }\n});\n// index.ts\n__export(exports, {\n    Ast: ()=>ast_default,\n    Tag: ()=>Tag,\n    Tokenizer: ()=>Tokenizer,\n    createElement: ()=>createElement,\n    default: ()=>Markdoc,\n    format: ()=>format,\n    functions: ()=>functions_default,\n    globalAttributes: ()=>globalAttributes,\n    nodes: ()=>schema_exports,\n    parse: ()=>parse3,\n    parseTags: ()=>parseTags,\n    renderers: ()=>renderers_default,\n    resolve: ()=>resolve2,\n    tags: ()=>tags_default,\n    transform: ()=>transform2,\n    transformer: ()=>transformer_default,\n    transforms: ()=>transforms_default,\n    truthy: ()=>truthy,\n    validate: ()=>validate,\n    validator: ()=>validator\n});\n// src/ast/base.ts\nvar base_exports = {};\n__export(base_exports, {\n    getAstValues: ()=>getAstValues,\n    isAst: ()=>isAst,\n    isFunction: ()=>isFunction,\n    isVariable: ()=>isVariable,\n    resolve: ()=>resolve\n});\nfunction isAst(value) {\n    return !!value?.$$mdtype;\n}\nfunction isFunction(value) {\n    return !!(value?.$$mdtype === \"Function\");\n}\nfunction isVariable(value) {\n    return !!(value?.$$mdtype === \"Variable\");\n}\nfunction* getAstValues(value) {\n    if (value == null || typeof value !== \"object\") return;\n    if (Array.isArray(value)) for (const v of value)yield* getAstValues(v);\n    if (isAst(value)) yield value;\n    if (Object.getPrototypeOf(value) !== Object.prototype) return;\n    for (const v of Object.values(value))yield* getAstValues(v);\n}\nfunction resolve(value, config = {}) {\n    if (value == null || typeof value !== \"object\") return value;\n    if (Array.isArray(value)) return value.map((item2)=>resolve(item2, config));\n    if (isAst(value) && value?.resolve instanceof Function) return value.resolve(config);\n    if (Object.getPrototypeOf(value) !== Object.prototype) return value;\n    const output = {};\n    for (const [k, v] of Object.entries(value))output[k] = resolve(v, config);\n    return output;\n}\n// src/tag.ts\nvar Tag = class {\n    constructor(name = \"div\", attributes = {}, children = []){\n        this.$$mdtype = \"Tag\";\n        this.name = name;\n        this.attributes = attributes;\n        this.children = children;\n    }\n};\nTag.isTag = (tag)=>{\n    return !!(tag?.$$mdtype === \"Tag\");\n};\n// src/schema-types/class.ts\nvar Class = class {\n    validate(value, _config, key) {\n        if (typeof value === \"string\" || typeof value === \"object\") return [];\n        return [\n            {\n                id: \"attribute-type-invalid\",\n                level: \"error\",\n                message: `Attribute '${key}' must be type 'string | object'`\n            }\n        ];\n    }\n    transform(value) {\n        if (!value || typeof value === \"string\") return value;\n        const classes = [];\n        for (const [k, v] of Object.entries(value ?? {}))if (v) classes.push(k);\n        return classes.join(\" \");\n    }\n};\n// src/schema-types/id.ts\nvar Id = class {\n    validate(value) {\n        if (typeof value === \"string\" && value.match(/^[a-zA-Z]/)) return [];\n        return [\n            {\n                id: \"attribute-value-invalid\",\n                level: \"error\",\n                message: \"The 'id' attribute must start with a letter\"\n            }\n        ];\n    }\n};\n// src/utils.ts\nvar import_tag = __toModule(require_tag());\n// src/ast/variable.ts\nvar Variable = class {\n    constructor(path = []){\n        this.$$mdtype = \"Variable\";\n        this.path = path;\n    }\n    resolve({ variables } = {}) {\n        return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key)=>obj[key], variables);\n    }\n};\n// src/ast/function.ts\nvar Function2 = class {\n    constructor(name, parameters){\n        this.$$mdtype = \"Function\";\n        this.name = name;\n        this.parameters = parameters;\n    }\n    resolve(config = {}) {\n        const fn = config?.functions?.[this.name];\n        if (!fn) return null;\n        const parameters = resolve(this.parameters, config);\n        return fn.transform?.(parameters, config);\n    }\n};\n// src/utils.ts\nvar STATES;\n(function(STATES2) {\n    STATES2[STATES2[\"normal\"] = 0] = \"normal\";\n    STATES2[STATES2[\"string\"] = 1] = \"string\";\n    STATES2[STATES2[\"escape\"] = 2] = \"escape\";\n})(STATES || (STATES = {}));\nvar OPEN = \"{%\";\nvar CLOSE = \"%}\";\nvar IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;\nfunction isIdentifier(s2) {\n    return typeof s2 === \"string\" && IDENTIFIER_REGEX.test(s2);\n}\nfunction isPromise(a) {\n    return a && typeof a === \"object\" && typeof a.then === \"function\";\n}\nfunction findTagEnd(content, start = 0) {\n    let state = 0;\n    for(let pos = start; pos < content.length; pos++){\n        const char = content[pos];\n        switch(state){\n            case 1:\n                switch(char){\n                    case '\"':\n                        state = 0;\n                        break;\n                    case \"\\\\\":\n                        state = 2;\n                        break;\n                }\n                break;\n            case 2:\n                state = 1;\n                break;\n            case 0:\n                if (char === '\"') state = 1;\n                else if (content.startsWith(CLOSE, pos)) return pos;\n        }\n    }\n    return null;\n}\nfunction parseTag(content, line, contentStart) {\n    try {\n        return (0, import_tag.parse)(content, {\n            Variable,\n            Function: Function2\n        });\n    } catch (error2) {\n        if (!(error2 instanceof import_tag.SyntaxError)) throw error2;\n        const { message, location: { start, end } } = error2;\n        const location = {\n            start: {\n                line,\n                character: start.offset + contentStart\n            },\n            end: {\n                line: line + 1,\n                character: end.offset + contentStart\n            }\n        };\n        return {\n            type: \"error\",\n            meta: {\n                error: {\n                    message,\n                    location\n                }\n            }\n        };\n    }\n}\nfunction parseTags(content, firstLine = 0) {\n    let line = firstLine + 1;\n    const output = [];\n    let start = 0;\n    for(let pos = 0; pos < content.length; pos++){\n        if (content[pos] === \"\\n\") {\n            line++;\n            continue;\n        }\n        if (!content.startsWith(OPEN, pos)) continue;\n        const end = findTagEnd(content, pos);\n        if (end == null) {\n            pos = pos + OPEN.length;\n            continue;\n        }\n        const text2 = content.slice(pos, end + CLOSE.length);\n        const inner = content.slice(pos + OPEN.length, end);\n        const lineStart = content.lastIndexOf(\"\\n\", pos);\n        const lineEnd = content.indexOf(\"\\n\", end);\n        const lineContent = content.slice(lineStart, lineEnd);\n        const tag = parseTag(inner.trim(), line, pos - lineStart);\n        const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;\n        const precedingText = content.slice(start, precedingTextEnd);\n        output.push({\n            type: \"text\",\n            start,\n            end: pos - 1,\n            content: precedingText\n        });\n        output.push({\n            map: [\n                line,\n                line + 1\n            ],\n            position: {\n                start: pos - lineStart,\n                end: pos - lineStart + text2.length\n            },\n            start: pos,\n            end: pos + text2.length - 1,\n            info: text2,\n            ...tag\n        });\n        start = end + CLOSE.length;\n        pos = start - 1;\n    }\n    output.push({\n        type: \"text\",\n        start,\n        end: content.length - 1,\n        content: content.slice(start)\n    });\n    return output;\n}\n// src/transformer.ts\nvar globalAttributes = {\n    class: {\n        type: Class,\n        render: true\n    },\n    id: {\n        type: Id,\n        render: true\n    }\n};\nvar transformer_default = {\n    findSchema (node2, { nodes = {}, tags = {} } = {}) {\n        return node2.tag ? tags[node2.tag] : nodes[node2.type];\n    },\n    attributes (node2, config = {}) {\n        const schema = this.findSchema(node2, config) ?? {};\n        const output = {};\n        const attrs = {\n            ...globalAttributes,\n            ...schema.attributes\n        };\n        for (const [key, attr] of Object.entries(attrs)){\n            if (attr.render == false) continue;\n            const name = typeof attr.render === \"string\" ? attr.render : key;\n            let value = node2.attributes[key];\n            if (typeof attr.type === \"function\") {\n                const instance = new attr.type();\n                if (instance.transform) {\n                    value = instance.transform(value, config);\n                }\n            }\n            value = value === void 0 ? attr.default : value;\n            if (value === void 0) continue;\n            output[name] = value;\n        }\n        if (schema.slots) {\n            for (const [key, slot2] of Object.entries(schema.slots)){\n                if (slot2.render === false) continue;\n                const name = typeof slot2.render === \"string\" ? slot2.render : key;\n                if (node2.slots[key]) output[name] = this.node(node2.slots[key], config);\n            }\n        }\n        return output;\n    },\n    children (node2, config = {}) {\n        const children = node2.children.flatMap((child)=>this.node(child, config));\n        if (children.some(isPromise)) {\n            return Promise.all(children);\n        }\n        return children;\n    },\n    node (node2, config = {}) {\n        const schema = this.findSchema(node2, config) ?? {};\n        if (schema && schema.transform instanceof Function) return schema.transform(node2, config);\n        const children = this.children(node2, config);\n        if (!schema || !schema.render) return children;\n        const attributes = this.attributes(node2, config);\n        if (isPromise(attributes) || isPromise(children)) {\n            return Promise.all([\n                attributes,\n                children\n            ]).then((values)=>new Tag(schema.render, ...values));\n        }\n        return new Tag(schema.render, attributes, children);\n    }\n};\n// src/ast/node.ts\nvar Node = class {\n    constructor(type = \"node\", attributes = {}, children = [], tag){\n        this.$$mdtype = \"Node\";\n        this.errors = [];\n        this.lines = [];\n        this.inline = false;\n        this.attributes = attributes;\n        this.children = children;\n        this.type = type;\n        this.tag = tag;\n        this.annotations = [];\n        this.slots = {};\n    }\n    *walk() {\n        for (const child of [\n            ...Object.values(this.slots),\n            ...this.children\n        ]){\n            yield child;\n            yield* child.walk();\n        }\n    }\n    push(node2) {\n        this.children.push(node2);\n    }\n    resolve(config = {}) {\n        return Object.assign(new Node(), this, {\n            children: this.children.map((child)=>child.resolve(config)),\n            attributes: resolve(this.attributes, config),\n            slots: Object.fromEntries(Object.entries(this.slots).map(([name, slot2])=>[\n                    name,\n                    slot2.resolve(config)\n                ]))\n        });\n    }\n    findSchema(config = {}) {\n        return transformer_default.findSchema(this, config);\n    }\n    transformAttributes(config = {}) {\n        return transformer_default.attributes(this, config);\n    }\n    transformChildren(config) {\n        return transformer_default.children(this, config);\n    }\n    transform(config) {\n        return transformer_default.node(this, config);\n    }\n};\n// src/ast/index.ts\nvar AstTypes = {\n    Function: Function2,\n    Node,\n    Variable\n};\nfunction reviver(_, value) {\n    if (!value) return value;\n    const klass = AstTypes[value.$$mdtype];\n    return klass ? Object.assign(new klass(), value) : value;\n}\nfunction fromJSON(text2) {\n    return JSON.parse(text2, reviver);\n}\nvar ast_default = {\n    ...AstTypes,\n    ...base_exports,\n    fromJSON\n};\n// src/formatter.ts\nvar SPACE = \" \";\nvar SEP = \", \";\nvar NL = \"\\n\";\nvar OL = \".\";\nvar UL = \"-\";\nvar MAX_TAG_OPENING_WIDTH = 80;\nvar WRAPPING_TYPES = [\n    \"strong\",\n    \"em\",\n    \"s\"\n];\nvar max = (a, b)=>Math.max(a, b);\nvar increment = (o, n = 2)=>({\n        ...o,\n        indent: (o.indent || 0) + n\n    });\nfunction* formatChildren(a, options) {\n    for (const child of a.children){\n        yield* formatValue(child, options);\n    }\n}\nfunction* formatInline(g) {\n    yield [\n        ...g\n    ].join(\"\").trim();\n}\nfunction* formatTableRow(items) {\n    yield `| ${items.join(\" | \")} |`;\n}\nfunction formatScalar(v) {\n    if (v === void 0) {\n        return void 0;\n    }\n    if (ast_default.isAst(v)) {\n        return format(v);\n    }\n    if (v === null) {\n        return \"null\";\n    }\n    if (Array.isArray(v)) {\n        return \"[\" + v.map(formatScalar).join(SEP) + \"]\";\n    }\n    if (typeof v === \"object\") {\n        return \"{\" + Object.entries(v).map(([key, value])=>`${isIdentifier(key) ? key : `\"${key}\"`}: ${formatScalar(value)}`).join(SEP) + \"}\";\n    }\n    return JSON.stringify(v);\n}\nfunction formatAnnotationValue(a) {\n    const formattedValue = formatScalar(a.value);\n    if (formattedValue === void 0) return void 0;\n    if (a.name === \"primary\") return formattedValue;\n    if (a.name === \"id\" && typeof a.value === \"string\" && isIdentifier(a.value)) return \"#\" + a.value;\n    if (a.type === \"class\" && isIdentifier(a.name)) return \".\" + a.name;\n    return `${a.name}=${formattedValue}`;\n}\nfunction* formatAttributes(n) {\n    for (const [key, value] of Object.entries(n.attributes)){\n        if (key === \"class\" && typeof value === \"object\" && !ast_default.isAst(value)) for (const name of Object.keys(value)){\n            yield formatAnnotationValue({\n                type: \"class\",\n                name,\n                value\n            });\n        }\n        else yield formatAnnotationValue({\n            type: \"attribute\",\n            name: key,\n            value\n        });\n    }\n}\nfunction* formatAnnotations(n) {\n    if (n.annotations.length) {\n        yield OPEN + SPACE;\n        yield n.annotations.map(formatAnnotationValue).join(SPACE);\n        yield SPACE + CLOSE;\n    }\n}\nfunction* formatVariable(v) {\n    yield \"$\";\n    yield v.path.map((p, i)=>{\n        if (i === 0) return p;\n        if (isIdentifier(p)) return \".\" + p;\n        if (typeof p === \"number\") return `[${p}]`;\n        return `[\"${p}\"]`;\n    }).join(\"\");\n}\nfunction* formatFunction(f) {\n    yield f.name;\n    yield \"(\";\n    yield Object.values(f.parameters).map(formatScalar).join(SEP);\n    yield \")\";\n}\nfunction* trimStart(g) {\n    let n;\n    do {\n        const { value, done } = g.next();\n        if (done) return;\n        n = value.trimStart();\n    }while (!n.length);\n    yield n;\n    yield* g;\n}\nfunction* escapeMarkdownCharacters(s2, characters) {\n    yield s2.replace(characters, \"\\\\$&\").replace(new RegExp(\"\\xa0\", \"g\"), \"&nbsp;\");\n}\nfunction* formatNode(n, o = {}) {\n    const no = {\n        ...o,\n        parent: n\n    };\n    const indent = SPACE.repeat(no.indent || 0);\n    switch(n.type){\n        case \"document\":\n            {\n                if (n.attributes.frontmatter && n.attributes.frontmatter.length) {\n                    yield \"---\" + NL + n.attributes.frontmatter + NL + \"---\" + NL + NL;\n                }\n                yield* trimStart(formatChildren(n, no));\n                break;\n            }\n        case \"heading\":\n            {\n                yield NL;\n                yield indent;\n                yield \"#\".repeat(n.attributes.level || 1);\n                yield SPACE;\n                yield* trimStart(formatChildren(n, no));\n                yield* formatAnnotations(n);\n                yield NL;\n                break;\n            }\n        case \"paragraph\":\n            {\n                yield NL;\n                yield* formatChildren(n, no);\n                yield* formatAnnotations(n);\n                yield NL;\n                break;\n            }\n        case \"inline\":\n            {\n                yield indent;\n                yield* formatChildren(n, no);\n                break;\n            }\n        case \"image\":\n            {\n                yield \"!\";\n                yield \"[\";\n                yield* formatValue(n.attributes.alt, no);\n                yield \"]\";\n                yield \"(\";\n                yield* typeof n.attributes.src === \"string\" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no);\n                if (n.attributes.title) {\n                    yield SPACE + `\"${n.attributes.title}\"`;\n                }\n                yield \")\";\n                break;\n            }\n        case \"link\":\n            {\n                yield \"[\";\n                yield* formatChildren(n, no);\n                yield \"]\";\n                yield \"(\";\n                yield* typeof n.attributes.href === \"string\" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no);\n                if (n.attributes.title) {\n                    yield SPACE + `\"${n.attributes.title}\"`;\n                }\n                yield \")\";\n                break;\n            }\n        case \"text\":\n            {\n                const { content } = n.attributes;\n                if (ast_default.isAst(content)) {\n                    yield OPEN + SPACE;\n                    yield* formatValue(content, no);\n                    yield SPACE + CLOSE;\n                } else {\n                    if (o.parent && WRAPPING_TYPES.includes(o.parent.type)) {\n                        yield* escapeMarkdownCharacters(content, /[*_~]/g);\n                    } else {\n                        yield* escapeMarkdownCharacters(content, /^[*>#]/);\n                    }\n                }\n                break;\n            }\n        case \"blockquote\":\n            {\n                const prefix = \">\" + SPACE;\n                yield n.children.map((child)=>format(child, no).trimStart()).map((d)=>NL + indent + prefix + d).join(indent + prefix);\n                break;\n            }\n        case \"hr\":\n            {\n                yield NL;\n                yield indent;\n                yield \"---\";\n                yield NL;\n                break;\n            }\n        case \"fence\":\n            {\n                yield NL;\n                yield indent;\n                const innerFence = n.attributes.content.match(/`{3,}/g) || [];\n                const innerFenceLength = innerFence.map((s2)=>s2.length).reduce(max, 0);\n                const boundary = \"`\".repeat(innerFenceLength ? innerFenceLength + 1 : 3);\n                yield boundary;\n                if (n.attributes.language) yield n.attributes.language;\n                if (n.annotations.length) yield SPACE;\n                yield* formatAnnotations(n);\n                yield NL;\n                yield indent;\n                yield n.attributes.content.split(NL).join(NL + indent);\n                yield boundary;\n                yield NL;\n                break;\n            }\n        case \"tag\":\n            {\n                if (!n.inline) {\n                    yield NL;\n                    yield indent;\n                }\n                const open = OPEN + SPACE;\n                const attributes = [\n                    ...formatAttributes(n)\n                ].filter((v)=>v !== void 0);\n                const tag = [\n                    open + n.tag,\n                    ...attributes\n                ];\n                const inlineTag = tag.join(SPACE);\n                const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);\n                yield (!n.inline && isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? \"\" : \"/\") + CLOSE;\n                if (n.children.length) {\n                    yield* formatChildren(n, no.allowIndentation ? increment(no) : no);\n                    if (!n.inline) {\n                        yield indent;\n                    }\n                    yield OPEN + SPACE + \"/\" + n.tag + SPACE + CLOSE;\n                }\n                if (!n.inline) {\n                    yield NL;\n                }\n                break;\n            }\n        case \"list\":\n            {\n                const isLoose = n.children.some((n2)=>n2.children.some((c)=>c.type === \"paragraph\"));\n                for(let i = 0; i < n.children.length; i++){\n                    const prefix = n.attributes.ordered ? `${i === 0 ? n.attributes.start ?? \"1\" : \"1\"}${n.attributes.marker ?? OL}` : n.attributes.marker ?? UL;\n                    let d = format(n.children[i], increment(no, prefix.length + 1));\n                    if (!isLoose || i === n.children.length - 1) {\n                        d = d.trim();\n                    }\n                    yield NL + indent + prefix + \" \" + d;\n                }\n                yield NL;\n                break;\n            }\n        case \"item\":\n            {\n                for(let i = 0; i < n.children.length; i++){\n                    yield* formatValue(n.children[i], no);\n                    if (i === 0) yield* formatAnnotations(n);\n                }\n                break;\n            }\n        case \"strong\":\n            {\n                yield n.attributes.marker ?? \"**\";\n                yield* formatInline(formatChildren(n, no));\n                yield n.attributes.marker ?? \"**\";\n                break;\n            }\n        case \"em\":\n            {\n                yield n.attributes.marker ?? \"*\";\n                yield* formatInline(formatChildren(n, no));\n                yield n.attributes.marker ?? \"*\";\n                break;\n            }\n        case \"code\":\n            {\n                yield \"`\";\n                yield* formatInline(formatValue(n.attributes.content, no));\n                yield \"`\";\n                break;\n            }\n        case \"s\":\n            {\n                yield \"~~\";\n                yield* formatInline(formatChildren(n, no));\n                yield \"~~\";\n                break;\n            }\n        case \"hardbreak\":\n            {\n                yield \"\\\\\" + NL;\n                yield indent;\n                break;\n            }\n        case \"softbreak\":\n            {\n                yield NL;\n                yield indent;\n                break;\n            }\n        case \"table\":\n            {\n                const table3 = [\n                    ...formatChildren(n, increment(no))\n                ];\n                if (o.parent && o.parent.type === \"tag\" && o.parent.tag === \"table\") {\n                    for(let i = 0; i < table3.length; i++){\n                        const row = table3[i];\n                        if (typeof row === \"string\") {\n                            if (row.trim().length) {\n                                yield NL;\n                                yield row;\n                            }\n                        } else {\n                            if (i !== 0) {\n                                yield NL;\n                                yield indent + \"---\";\n                            }\n                            for (const d of row){\n                                yield NL + indent + UL + \" \" + d;\n                            }\n                        }\n                    }\n                    yield NL;\n                } else {\n                    const widths = [];\n                    for (const row of table3){\n                        for(let i = 0; i < row.length; i++){\n                            widths[i] = widths[i] ? Math.max(widths[i], row[i].length) : row[i].length;\n                        }\n                    }\n                    const [head, ...rows] = table3;\n                    yield NL;\n                    yield* formatTableRow(head.map((cell, i)=>cell + SPACE.repeat(widths[i] - cell.length)));\n                    yield NL;\n                    yield* formatTableRow(head.map((cell, i)=>\"-\".repeat(widths[i])));\n                    yield NL;\n                    for (const row of rows){\n                        yield* formatTableRow(row.map((cell, i)=>cell + SPACE.repeat(widths[i] - cell.length)));\n                        yield NL;\n                    }\n                }\n                break;\n            }\n        case \"thead\":\n            {\n                const [head] = [\n                    ...formatChildren(n, no)\n                ];\n                yield head || [];\n                break;\n            }\n        case \"tr\":\n            {\n                yield [\n                    ...formatChildren(n, no)\n                ];\n                break;\n            }\n        case \"td\":\n        case \"th\":\n            {\n                yield [\n                    ...formatChildren(n, no),\n                    ...formatAnnotations(n)\n                ].join(\"\").trim();\n                break;\n            }\n        case \"tbody\":\n            {\n                yield* formatChildren(n, no);\n                break;\n            }\n        case \"comment\":\n            {\n                yield \"<!-- \" + n.attributes.content + \" -->\\n\";\n                break;\n            }\n        case \"error\":\n        case \"node\":\n            break;\n    }\n}\nfunction* formatValue(v, o = {}) {\n    switch(typeof v){\n        case \"undefined\":\n            break;\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            {\n                yield v.toString();\n                break;\n            }\n        case \"object\":\n            {\n                if (v === null) break;\n                if (Array.isArray(v)) {\n                    for (const n of v)yield* formatValue(n, o);\n                    break;\n                }\n                switch(v.$$mdtype){\n                    case \"Function\":\n                        {\n                            yield* formatFunction(v);\n                            break;\n                        }\n                    case \"Node\":\n                        yield* formatNode(v, o);\n                        break;\n                    case \"Variable\":\n                        {\n                            yield* formatVariable(v);\n                            break;\n                        }\n                    default:\n                        throw new Error(`Unimplemented: \"${v.$$mdtype}\"`);\n                }\n                break;\n            }\n    }\n}\nfunction format(v, options) {\n    let doc = \"\";\n    for (const s2 of formatValue(v, options))doc += s2;\n    return doc.trimStart();\n}\n// src/tags/conditional.ts\nfunction truthy(value) {\n    return value !== false && value !== void 0 && value !== null;\n}\nfunction renderConditions(node2) {\n    const conditions = [\n        {\n            condition: node2.attributes.primary,\n            children: []\n        }\n    ];\n    for (const child of node2.children){\n        if (child.type === \"tag\" && child.tag === \"else\") conditions.push({\n            condition: \"primary\" in child.attributes ? child.attributes.primary : true,\n            children: []\n        });\n        else conditions[conditions.length - 1].children.push(child);\n    }\n    return conditions;\n}\nvar tagIf = {\n    attributes: {\n        primary: {\n            type: Object,\n            render: false\n        }\n    },\n    transform (node2, config) {\n        const conditions = renderConditions(node2);\n        for (const { condition, children } of conditions)if (truthy(condition)) {\n            const nodes = children.flatMap((child)=>child.transform(config));\n            if (nodes.some(isPromise)) {\n                return Promise.all(nodes).then((nodes2)=>nodes2.flat());\n            }\n            return nodes;\n        }\n        return [];\n    }\n};\nvar tagElse = {\n    selfClosing: true,\n    attributes: {\n        primary: {\n            type: Object,\n            render: false\n        }\n    }\n};\n// src/functions/index.ts\nvar and = {\n    transform (parameters) {\n        return Object.values(parameters).every((x)=>truthy(x));\n    }\n};\nvar or = {\n    transform (parameters) {\n        return Object.values(parameters).find((x)=>truthy(x)) !== void 0;\n    }\n};\nvar not = {\n    parameters: {\n        0: {\n            required: true\n        }\n    },\n    transform (parameters) {\n        return !truthy(parameters[0]);\n    }\n};\nvar equals = {\n    transform (parameters) {\n        const values = Object.values(parameters);\n        return values.every((v)=>v === values[0]);\n    }\n};\nvar debug = {\n    transform (parameters) {\n        return JSON.stringify(parameters[0], null, 2);\n    }\n};\nvar defaultFn = {\n    transform (parameters) {\n        return parameters[0] === void 0 ? parameters[1] : parameters[0];\n    }\n};\nvar functions_default = {\n    and,\n    or,\n    not,\n    equals,\n    default: defaultFn,\n    debug\n};\n// src/transforms/table.ts\nfunction convertToRow(node2, cellType = \"td\") {\n    node2.type = \"tr\";\n    node2.attributes = {};\n    for (const cell of node2.children)cell.type = cellType;\n    return node2;\n}\nfunction transform(document2) {\n    for (const node2 of document2.walk()){\n        if (node2.type !== \"tag\" || node2.tag !== \"table\") continue;\n        const [first, ...rest] = node2.children;\n        if (!first || first.type === \"table\") continue;\n        const table3 = new ast_default.Node(\"table\", node2.attributes, [\n            new ast_default.Node(\"thead\"),\n            new ast_default.Node(\"tbody\")\n        ]);\n        const [thead2, tbody2] = table3.children;\n        if (first.type === \"list\") thead2.push(convertToRow(first, \"th\"));\n        for (const row of rest){\n            if (row.type === \"list\") convertToRow(row);\n            else if (row.type === \"tag\" && row.tag === \"if\") {\n                const children = [];\n                for (const child of row.children){\n                    if (child.type === \"hr\") continue;\n                    if (child.type === \"list\") convertToRow(child);\n                    children.push(child);\n                }\n                row.children = children;\n            } else continue;\n            tbody2.push(row);\n        }\n        node2.children = [\n            table3\n        ];\n    }\n}\n// src/transforms/index.ts\nvar transforms_default = [\n    transform\n];\n// src/parser.ts\nvar mappings = {\n    ordered_list: \"list\",\n    bullet_list: \"list\",\n    code_inline: \"code\",\n    list_item: \"item\",\n    variable: \"text\"\n};\nfunction annotate(node2, attributes) {\n    for (const attribute of attributes){\n        node2.annotations.push(attribute);\n        const { name, value, type } = attribute;\n        if (type === \"attribute\") {\n            if (node2.attributes[name] !== void 0) node2.errors.push({\n                id: \"duplicate-attribute\",\n                level: \"warning\",\n                message: `Attribute '${name}' already set`\n            });\n            node2.attributes[name] = value;\n        } else if (type === \"class\") if (node2.attributes.class) node2.attributes.class[name] = value;\n        else node2.attributes.class = {\n            [name]: value\n        };\n    }\n}\nfunction handleAttrs(token, type) {\n    switch(type){\n        case \"heading\":\n            return {\n                level: Number(token.tag.replace(\"h\", \"\"))\n            };\n        case \"list\":\n            {\n                const attrs = token.attrs ? Object.fromEntries(token.attrs) : void 0;\n                const ordered = token.type.startsWith(\"ordered\");\n                return ordered && attrs?.start ? {\n                    ordered: true,\n                    start: attrs.start,\n                    marker: token.markup\n                } : {\n                    ordered,\n                    marker: token.markup\n                };\n            }\n        case \"link\":\n            {\n                const attrs = Object.fromEntries(token.attrs);\n                return attrs.title ? {\n                    href: attrs.href,\n                    title: attrs.title\n                } : {\n                    href: attrs.href\n                };\n            }\n        case \"image\":\n            {\n                const attrs = Object.fromEntries(token.attrs);\n                return attrs.title ? {\n                    alt: token.content,\n                    src: attrs.src,\n                    title: attrs.title\n                } : {\n                    alt: token.content,\n                    src: attrs.src\n                };\n            }\n        case \"em\":\n        case \"strong\":\n            return {\n                marker: token.markup\n            };\n        case \"text\":\n        case \"code\":\n        case \"comment\":\n            return {\n                content: (token.meta || {}).variable || token.content\n            };\n        case \"fence\":\n            {\n                const [language] = token.info.split(\" \", 1);\n                return language === \"\" || language === OPEN ? {\n                    content: token.content\n                } : {\n                    content: token.content,\n                    language\n                };\n            }\n        case \"td\":\n        case \"th\":\n            {\n                if (token.attrs) {\n                    const attrs = Object.fromEntries(token.attrs);\n                    let align;\n                    if (attrs.style) {\n                        if (attrs.style.includes(\"left\")) {\n                            align = \"left\";\n                        } else if (attrs.style.includes(\"center\")) {\n                            align = \"center\";\n                        } else if (attrs.style.includes(\"right\")) {\n                            align = \"right\";\n                        }\n                    }\n                    if (align) {\n                        return {\n                            align\n                        };\n                    }\n                }\n                return {};\n            }\n        default:\n            return {};\n    }\n}\nfunction handleToken(token, nodes, file, handleSlots, addLocation, inlineParent) {\n    if (token.type === \"frontmatter\") {\n        nodes[0].attributes.frontmatter = token.content;\n        return;\n    }\n    if (token.hidden || token.type === \"text\" && token.content === \"\") return;\n    const errors = token.errors || [];\n    const parent = nodes[nodes.length - 1];\n    const { tag, attributes, error: error2 } = token.meta || {};\n    if (token.type === \"annotation\") {\n        if (inlineParent) return annotate(inlineParent, attributes);\n        return parent.errors.push({\n            id: \"no-inline-annotations\",\n            level: \"error\",\n            message: `Can't apply inline annotations to '${parent.type}'`\n        });\n    }\n    let typeName = token.type.replace(/_(open|close)$/, \"\");\n    if (mappings[typeName]) typeName = mappings[typeName];\n    if (typeName === \"error\") {\n        const { message, location } = error2;\n        errors.push({\n            id: \"parse-error\",\n            level: \"critical\",\n            message,\n            location\n        });\n    }\n    if (token.nesting < 0) {\n        if (parent.type === typeName && parent.tag === tag) {\n            if (parent.lines && token.map) parent.lines.push(...token.map);\n            return nodes.pop();\n        }\n        errors.push({\n            id: \"missing-opening\",\n            level: \"critical\",\n            message: `Node '${typeName}' is missing opening`\n        });\n    }\n    const attrs = handleAttrs(token, typeName);\n    const node2 = new Node(typeName, attrs, void 0, tag || void 0);\n    const { position = {} } = token;\n    node2.errors = errors;\n    if (addLocation !== false) {\n        node2.lines = token.map || parent.lines || [];\n        node2.location = {\n            file,\n            start: {\n                line: node2.lines[0],\n                character: position.start\n            },\n            end: {\n                line: node2.lines[1],\n                character: position.end\n            }\n        };\n    }\n    if (inlineParent) node2.inline = true;\n    if (attributes && [\n        \"tag\",\n        \"fence\",\n        \"image\"\n    ].includes(typeName)) annotate(node2, attributes);\n    if (handleSlots && tag === \"slot\" && typeof node2.attributes.primary === \"string\") parent.slots[node2.attributes.primary] = node2;\n    else parent.push(node2);\n    if (token.nesting > 0) nodes.push(node2);\n    if (!Array.isArray(token.children)) return;\n    if (node2.type === \"inline\") inlineParent = parent;\n    nodes.push(node2);\n    const isLeafNode = typeName === \"image\";\n    if (!isLeafNode) {\n        for (const child of token.children)handleToken(child, nodes, file, handleSlots, addLocation, inlineParent);\n    }\n    nodes.pop();\n}\nfunction parser(tokens, args) {\n    const doc = new Node(\"document\");\n    const nodes = [\n        doc\n    ];\n    if (typeof args === \"string\") args = {\n        file: args\n    };\n    for (const token of tokens)handleToken(token, nodes, args?.file, args?.slots, args?.location);\n    if (nodes.length > 1) for (const node2 of nodes.slice(1))node2.errors.push({\n        id: \"missing-closing\",\n        level: \"critical\",\n        message: `Node '${node2.tag || node2.type}' is missing closing`\n    });\n    for (const transform3 of transforms_default)transform3(doc);\n    return doc;\n}\n// src/schema.ts\nvar schema_exports = {};\n__export(schema_exports, {\n    blockquote: ()=>blockquote,\n    code: ()=>code,\n    comment: ()=>comment,\n    document: ()=>document,\n    em: ()=>em,\n    error: ()=>error,\n    fence: ()=>fence,\n    hardbreak: ()=>hardbreak,\n    heading: ()=>heading,\n    hr: ()=>hr,\n    image: ()=>image,\n    inline: ()=>inline,\n    item: ()=>item,\n    link: ()=>link,\n    list: ()=>list,\n    node: ()=>node,\n    paragraph: ()=>paragraph,\n    s: ()=>s,\n    softbreak: ()=>softbreak,\n    strong: ()=>strong,\n    table: ()=>table,\n    tbody: ()=>tbody,\n    td: ()=>td,\n    text: ()=>text,\n    th: ()=>th,\n    thead: ()=>thead,\n    tr: ()=>tr\n});\nvar document = {\n    render: \"article\",\n    children: [\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"comment\",\n        \"list\",\n        \"hr\"\n    ],\n    attributes: {\n        frontmatter: {\n            render: false\n        }\n    }\n};\nvar heading = {\n    children: [\n        \"inline\"\n    ],\n    attributes: {\n        level: {\n            type: Number,\n            render: false,\n            required: true\n        }\n    },\n    transform (node2, config) {\n        return new Tag(`h${node2.attributes[\"level\"]}`, node2.transformAttributes(config), node2.transformChildren(config));\n    }\n};\nvar paragraph = {\n    render: \"p\",\n    children: [\n        \"inline\"\n    ]\n};\nvar image = {\n    render: \"img\",\n    attributes: {\n        src: {\n            type: String,\n            required: true\n        },\n        alt: {\n            type: String\n        },\n        title: {\n            type: String\n        }\n    }\n};\nvar fence = {\n    render: \"pre\",\n    attributes: {\n        content: {\n            type: String,\n            render: false,\n            required: true\n        },\n        language: {\n            type: String,\n            render: \"data-language\"\n        },\n        process: {\n            type: Boolean,\n            render: false,\n            default: true\n        }\n    },\n    transform (node2, config) {\n        const attributes = node2.transformAttributes(config);\n        const children = node2.children.length ? node2.transformChildren(config) : [\n            node2.attributes.content\n        ];\n        return new Tag(\"pre\", attributes, children);\n    }\n};\nvar blockquote = {\n    render: \"blockquote\",\n    children: [\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"list\",\n        \"hr\"\n    ]\n};\nvar item = {\n    render: \"li\",\n    children: [\n        \"inline\",\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"list\",\n        \"hr\"\n    ]\n};\nvar list = {\n    children: [\n        \"item\"\n    ],\n    attributes: {\n        ordered: {\n            type: Boolean,\n            render: false,\n            required: true\n        },\n        start: {\n            type: Number\n        },\n        marker: {\n            type: String,\n            render: false\n        }\n    },\n    transform (node2, config) {\n        return new Tag(node2.attributes.ordered ? \"ol\" : \"ul\", node2.transformAttributes(config), node2.transformChildren(config));\n    }\n};\nvar hr = {\n    render: \"hr\"\n};\nvar table = {\n    render: \"table\"\n};\nvar td = {\n    render: \"td\",\n    children: [\n        \"inline\",\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"list\",\n        \"hr\"\n    ],\n    attributes: {\n        align: {\n            type: String\n        },\n        colspan: {\n            type: Number,\n            render: \"colSpan\"\n        },\n        rowspan: {\n            type: Number,\n            render: \"rowSpan\"\n        }\n    }\n};\nvar th = {\n    render: \"th\",\n    attributes: {\n        width: {\n            type: String\n        },\n        align: {\n            type: String\n        },\n        colspan: {\n            type: Number,\n            render: \"colSpan\"\n        },\n        rowspan: {\n            type: Number,\n            render: \"rowSpan\"\n        }\n    }\n};\nvar tr = {\n    render: \"tr\",\n    children: [\n        \"th\",\n        \"td\"\n    ]\n};\nvar tbody = {\n    render: \"tbody\",\n    children: [\n        \"tr\",\n        \"tag\"\n    ]\n};\nvar thead = {\n    render: \"thead\",\n    children: [\n        \"tr\"\n    ]\n};\nvar strong = {\n    render: \"strong\",\n    children: [\n        \"em\",\n        \"s\",\n        \"link\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ],\n    attributes: {\n        marker: {\n            type: String,\n            render: false\n        }\n    }\n};\nvar em = {\n    render: \"em\",\n    children: [\n        \"strong\",\n        \"s\",\n        \"link\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ],\n    attributes: {\n        marker: {\n            type: String,\n            render: false\n        }\n    }\n};\nvar s = {\n    render: \"s\",\n    children: [\n        \"strong\",\n        \"em\",\n        \"link\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ]\n};\nvar inline = {\n    children: [\n        \"strong\",\n        \"em\",\n        \"s\",\n        \"code\",\n        \"text\",\n        \"tag\",\n        \"link\",\n        \"image\",\n        \"hardbreak\",\n        \"softbreak\",\n        \"comment\"\n    ]\n};\nvar link = {\n    render: \"a\",\n    children: [\n        \"strong\",\n        \"em\",\n        \"s\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ],\n    attributes: {\n        href: {\n            type: String,\n            required: true\n        },\n        title: {\n            type: String\n        }\n    }\n};\nvar code = {\n    render: \"code\",\n    attributes: {\n        content: {\n            type: String,\n            render: false,\n            required: true\n        }\n    },\n    transform (node2, config) {\n        const attributes = node2.transformAttributes(config);\n        return new Tag(\"code\", attributes, [\n            node2.attributes.content\n        ]);\n    }\n};\nvar text = {\n    attributes: {\n        content: {\n            type: String,\n            required: true\n        }\n    },\n    transform (node2) {\n        return node2.attributes.content;\n    }\n};\nvar hardbreak = {\n    render: \"br\"\n};\nvar softbreak = {\n    transform () {\n        return \" \";\n    }\n};\nvar comment = {\n    attributes: {\n        content: {\n            type: String,\n            required: true\n        }\n    }\n};\nvar error = {};\nvar node = {};\n// src/renderers/html.ts\nvar import_markdown_it = __toModule(require_markdown_it());\nvar { escapeHtml } = (0, import_markdown_it.default)().utils;\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"br\",\n    \"col\",\n    \"embed\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nfunction render(node2) {\n    if (typeof node2 === \"string\" || typeof node2 === \"number\") return escapeHtml(String(node2));\n    if (Array.isArray(node2)) return node2.map(render).join(\"\");\n    if (node2 === null || typeof node2 !== \"object\" || !Tag.isTag(node2)) return \"\";\n    const { name, attributes, children = [] } = node2;\n    if (!name) return render(children);\n    let output = `<${name}`;\n    for (const [k, v] of Object.entries(attributes ?? {}))output += ` ${k.toLowerCase()}=\"${escapeHtml(String(v))}\"`;\n    output += \">\";\n    if (voidElements.has(name)) return output;\n    if (children.length) output += render(children);\n    output += `</${name}>`;\n    return output;\n}\n// src/renderers/react/react.ts\nfunction tagName(name, components) {\n    return typeof name !== \"string\" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\nfunction dynamic(node2, React, { components = {} } = {}) {\n    function deepRender2(value) {\n        if (value == null || typeof value !== \"object\") return value;\n        if (Array.isArray(value)) return value.map((item2)=>deepRender2(item2));\n        if (value.$$mdtype === \"Tag\") return render3(value);\n        if (typeof value !== \"object\") return value;\n        const output = {};\n        for (const [k, v] of Object.entries(value))output[k] = deepRender2(v);\n        return output;\n    }\n    function render3(node3) {\n        if (Array.isArray(node3)) return React.createElement(React.Fragment, null, ...node3.map(render3));\n        if (node3 === null || typeof node3 !== \"object\" || !Tag.isTag(node3)) return node3;\n        const { name, attributes: { class: className, ...attrs } = {}, children = [] } = node3;\n        if (className) attrs.className = className;\n        return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));\n    }\n    return render3(node2);\n}\n// src/renderers/react/static.ts\nfunction tagName2(name, components) {\n    return typeof name !== \"string\" ? \"Fragment\" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\nfunction renderArray(children) {\n    return children.map(render2).join(\", \");\n}\nfunction deepRender(value) {\n    if (value == null || typeof value !== \"object\") return JSON.stringify(value);\n    if (Array.isArray(value)) return `[${value.map((item2)=>deepRender(item2)).join(\", \")}]`;\n    if (value.$$mdtype === \"Tag\") return render2(value);\n    if (typeof value !== \"object\") return JSON.stringify(value);\n    const object = Object.entries(value).map(([k, v])=>[\n            JSON.stringify(k),\n            deepRender(v)\n        ].join(\": \")).join(\", \");\n    return `{${object}}`;\n}\nfunction render2(node2) {\n    if (Array.isArray(node2)) return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;\n    if (node2 === null || typeof node2 !== \"object\" || !Tag.isTag(node2)) return JSON.stringify(node2);\n    const { name, attributes: { class: className, ...attrs } = {}, children = [] } = node2;\n    if (className) attrs.className = className;\n    return `React.createElement(\n    tagName(${JSON.stringify(name)}, components),\n    ${Object.keys(attrs).length == 0 ? \"null\" : deepRender(attrs)},\n    ${renderArray(children)})`;\n}\nfunction reactStatic(node2) {\n    return `\n  (({components = {}} = {}) => {\n    ${tagName2}\n    return ${render2(node2)};\n  })\n`;\n}\n// src/renderers/index.ts\nvar renderers_default = {\n    html: render,\n    react: dynamic,\n    reactStatic\n};\n// src/tags/partial.ts\nvar PartialFile = class {\n    validate(file, config) {\n        const { partials = {} } = config;\n        const partial2 = partials[file];\n        if (!partial2) return [\n            {\n                id: \"attribute-value-invalid\",\n                level: \"error\",\n                message: `Partial \\`${file}\\` not found. The 'file' attribute must be set in \\`config.partials\\``\n            }\n        ];\n        return [];\n    }\n};\nvar partial = {\n    inline: false,\n    selfClosing: true,\n    attributes: {\n        file: {\n            type: PartialFile,\n            render: false,\n            required: true\n        },\n        variables: {\n            type: Object,\n            render: false\n        }\n    },\n    transform (node2, config) {\n        const { partials = {} } = config;\n        const { file, variables } = node2.attributes;\n        const partial2 = partials[file];\n        if (!partial2) return null;\n        const scopedConfig = {\n            ...config,\n            variables: {\n                ...config.variables,\n                ...variables,\n                [\"$$partial:filename\"]: file\n            }\n        };\n        const transformChildren = (part)=>part.resolve(scopedConfig).transformChildren(scopedConfig);\n        return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);\n    }\n};\n// src/tags/table.ts\nvar table2 = {\n    children: [\n        \"table\"\n    ],\n    inline: false\n};\n// src/tags/slot.ts\nvar slot = {\n    attributes: {\n        primary: {\n            type: String,\n            required: true\n        }\n    }\n};\n// src/tags/index.ts\nvar tags_default = {\n    else: tagElse,\n    if: tagIf,\n    partial,\n    slot,\n    table: table2\n};\n// src/tokenizer/index.ts\nvar import_lib = __toModule(require_lib());\n// src/tokenizer/plugins/annotations.ts\nvar import_tag7 = __toModule(require_tag());\nfunction createToken(state, content, contentStart) {\n    try {\n        const { type, meta, nesting = 0 } = (0, import_tag7.parse)(content, {\n            Variable,\n            Function: Function2\n        });\n        const token = state.push(type, \"\", nesting);\n        token.info = content;\n        token.meta = meta;\n        if (!state.delimiters) {\n            state.delimiters = [];\n        }\n        return token;\n    } catch (error2) {\n        if (!(error2 instanceof import_tag7.SyntaxError)) throw error2;\n        const { message, location: { start, end } } = error2;\n        const location = contentStart ? {\n            start: {\n                offset: start.offset + contentStart\n            },\n            end: {\n                offset: end.offset + contentStart\n            }\n        } : null;\n        const token = state.push(\"error\", \"\", 0);\n        token.meta = {\n            error: {\n                message,\n                location\n            }\n        };\n        return token;\n    }\n}\nfunction block(state, startLine, endLine, silent) {\n    const start = state.bMarks[startLine] + state.tShift[startLine];\n    const finish = state.eMarks[startLine];\n    if (!state.src.startsWith(OPEN, start)) return false;\n    const tagEnd = findTagEnd(state.src, start);\n    const lastPossible = state.src.slice(0, finish).trim().length;\n    if (!tagEnd || tagEnd < lastPossible - CLOSE.length) return false;\n    const contentStart = start + OPEN.length;\n    const content = state.src.slice(contentStart, tagEnd).trim();\n    const lines = state.src.slice(start, tagEnd + CLOSE.length).split(\"\\n\").length;\n    if (content[0] === \"$\") return false;\n    if (silent) return true;\n    const token = createToken(state, content, contentStart);\n    token.map = [\n        startLine,\n        startLine + lines\n    ];\n    state.line += lines;\n    return true;\n}\nfunction inline2(state, silent) {\n    if (!state.src.startsWith(OPEN, state.pos)) return false;\n    const tagEnd = findTagEnd(state.src, state.pos);\n    if (!tagEnd) return false;\n    const content = state.src.slice(state.pos + OPEN.length, tagEnd);\n    if (!silent) createToken(state, content.trim());\n    state.pos = tagEnd + CLOSE.length;\n    return true;\n}\nfunction core(state) {\n    let token;\n    for (token of state.tokens){\n        if (token.type !== \"fence\") continue;\n        if (token.info.includes(OPEN)) {\n            const start = token.info.indexOf(OPEN);\n            const end = findTagEnd(token.info, start);\n            const content = token.info.slice(start + OPEN.length, end);\n            try {\n                const { meta } = (0, import_tag7.parse)(content.trim(), {\n                    Variable,\n                    Function: Function2\n                });\n                token.meta = meta;\n            } catch (error2) {\n                if (!(error2 instanceof import_tag7.SyntaxError)) throw error2;\n                if (!token.errors) token.errors = [];\n                token.errors.push({\n                    id: \"fence-tag-error\",\n                    level: \"error\",\n                    message: `Syntax error in fence tag: ${error2.message}`\n                });\n            }\n        }\n        if (token?.meta?.attributes?.find((attr)=>attr.name === \"process\" && !attr.value)) continue;\n        token.children = parseTags(token.content, token.map[0]);\n    }\n}\nfunction plugin(md) {\n    md.block.ruler.before(\"paragraph\", \"annotations\", block, {\n        alt: [\n            \"paragraph\",\n            \"blockquote\"\n        ]\n    });\n    md.inline.ruler.push(\"containers\", inline2);\n    md.core.ruler.push(\"annotations\", core);\n}\n// src/tokenizer/plugins/frontmatter.ts\nvar fence2 = \"---\";\nfunction getLine(state, n) {\n    return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();\n}\nfunction findClose(state, endLine) {\n    for(let line = 1; line < endLine; line++)if (getLine(state, line) === fence2) return line;\n}\nfunction block2(state, startLine, endLine, silent) {\n    if (startLine != 0 || getLine(state, 0) != fence2) return false;\n    const close = findClose(state, endLine);\n    if (!close) return false;\n    if (silent) return true;\n    const token = state.push(\"frontmatter\", \"\", 0);\n    token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();\n    token.map = [\n        0,\n        close\n    ];\n    token.hidden = true;\n    state.line = close + 1;\n    return true;\n}\nfunction plugin2(md) {\n    md.block.ruler.before(\"hr\", \"frontmatter\", block2);\n}\n// src/tokenizer/plugins/comments.ts\nvar OPEN2 = \"<!--\";\nvar CLOSE2 = \"-->\";\nfunction block3(state, startLine, endLine, silent) {\n    const start = state.bMarks[startLine] + state.tShift[startLine];\n    if (!state.src.startsWith(OPEN2, start)) return false;\n    const close = state.src.indexOf(CLOSE2, start);\n    if (!close) return false;\n    if (silent) return true;\n    const content = state.src.slice(start + OPEN2.length, close);\n    const lines = content.split(\"\\n\").length;\n    const token = state.push(\"comment\", \"\", 0);\n    token.content = content.trim();\n    token.map = [\n        startLine,\n        startLine + lines\n    ];\n    state.line += lines;\n    return true;\n}\nfunction inline3(state, silent) {\n    if (!state.src.startsWith(OPEN2, state.pos)) return false;\n    const close = state.src.indexOf(CLOSE2, state.pos);\n    if (!close) return false;\n    if (silent) return true;\n    const content = state.src.slice(state.pos + OPEN2.length, close);\n    const token = state.push(\"comment\", \"\", 0);\n    token.content = content.trim();\n    state.pos = close + CLOSE2.length;\n    return true;\n}\nfunction plugin3(md) {\n    md.block.ruler.before(\"table\", \"comment\", block3, {\n        alt: [\n            \"paragraph\"\n        ]\n    });\n    md.inline.ruler.push(\"comment\", inline3);\n}\n// src/tokenizer/index.ts\nvar Tokenizer = class {\n    constructor(config = {}){\n        this.parser = new import_lib.default(config);\n        this.parser.use(plugin, \"annotations\", {});\n        this.parser.use(plugin2, \"frontmatter\", {});\n        this.parser.disable([\n            \"lheading\",\n            \"code\"\n        ]);\n        if (config.allowComments) this.parser.use(plugin3, \"comments\", {});\n    }\n    tokenize(content) {\n        return this.parser.parse(content.toString(), {});\n    }\n};\n// src/validator.ts\nvar TypeMappings = {\n    String,\n    Number,\n    Array,\n    Object,\n    Boolean\n};\nfunction validateType(type, value, config, key) {\n    if (!type) return true;\n    if (ast_default.isFunction(value) && config.validation?.validateFunctions) {\n        const schema = config.functions?.[value.name];\n        return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t)=>t === type) !== void 0 : schema.returns === type;\n    }\n    if (ast_default.isAst(value)) return true;\n    if (Array.isArray(type)) return type.some((t)=>validateType(t, value, config, key));\n    if (typeof type === \"string\") type = TypeMappings[type];\n    if (typeof type === \"function\") {\n        const instance = new type();\n        if (instance.validate) {\n            return instance.validate(value, config, key);\n        }\n    }\n    return value != null && value.constructor === type;\n}\nfunction typeToString(type) {\n    if (typeof type === \"string\") return type;\n    if (Array.isArray(type)) return type.map(typeToString).join(\" | \");\n    return type.name;\n}\nfunction validateFunction(fn, config) {\n    const schema = config.functions?.[fn.name];\n    const errors = [];\n    if (!schema) return [\n        {\n            id: \"function-undefined\",\n            level: \"critical\",\n            message: `Undefined function: '${fn.name}'`\n        }\n    ];\n    if (schema.validate) errors.push(...schema.validate(fn, config));\n    if (schema.parameters) {\n        for (const [key, value] of Object.entries(fn.parameters)){\n            const param = schema.parameters?.[key];\n            if (!param) {\n                errors.push({\n                    id: \"parameter-undefined\",\n                    level: \"error\",\n                    message: `Invalid parameter: '${key}'`\n                });\n                continue;\n            }\n            if (ast_default.isAst(value) && !ast_default.isFunction(value)) continue;\n            if (param.type) {\n                const valid = validateType(param.type, value, config, key);\n                if (valid === false) {\n                    errors.push({\n                        id: \"parameter-type-invalid\",\n                        level: \"error\",\n                        message: `Parameter '${key}' of '${fn.name}' must be type of '${typeToString(param.type)}'`\n                    });\n                } else if (Array.isArray(valid)) {\n                    errors.push(...valid);\n                }\n            }\n        }\n    }\n    for (const [key, { required }] of Object.entries(schema.parameters ?? {}))if (required && fn.parameters[key] === void 0) errors.push({\n        id: \"parameter-missing-required\",\n        level: \"error\",\n        message: `Missing required parameter: '${key}'`\n    });\n    return errors;\n}\nfunction displayMatches(matches, n) {\n    if (matches.length <= n) return JSON.stringify(matches);\n    const items = matches.slice(0, n).map((item2)=>JSON.stringify(item2));\n    return `[${items.join(\",\")}, ... ${matches.length - n} more]`;\n}\nfunction validator(node2, config) {\n    const schema = node2.findSchema(config);\n    const errors = [\n        ...node2.errors || []\n    ];\n    if (!schema) {\n        errors.push({\n            id: node2.tag ? \"tag-undefined\" : \"node-undefined\",\n            level: \"critical\",\n            message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`\n        });\n        return errors;\n    }\n    if (schema.inline != void 0 && node2.inline !== schema.inline) errors.push({\n        id: \"tag-placement-invalid\",\n        level: \"critical\",\n        message: `'${node2.tag}' tag should be ${schema.inline ? \"inline\" : \"block\"}`\n    });\n    if (schema.selfClosing && node2.children.length > 0) errors.push({\n        id: \"tag-selfclosing-has-children\",\n        level: \"critical\",\n        message: `'${node2.tag}' tag should be self-closing`\n    });\n    const attributes = {\n        ...globalAttributes,\n        ...schema.attributes\n    };\n    for (const key of Object.keys(node2.slots)){\n        const slot2 = schema.slots?.[key];\n        if (!slot2) errors.push({\n            id: \"slot-undefined\",\n            level: \"error\",\n            message: `Invalid slot: '${key}'`\n        });\n    }\n    for (let [key, value] of Object.entries(node2.attributes)){\n        const attrib = attributes[key];\n        if (!attrib) {\n            errors.push({\n                id: \"attribute-undefined\",\n                level: \"error\",\n                message: `Invalid attribute: '${key}'`\n            });\n            continue;\n        }\n        let { type, matches, errorLevel } = attrib;\n        if (ast_default.isAst(value)) {\n            if (ast_default.isFunction(value) && config.validation?.validateFunctions) errors.push(...validateFunction(value, config));\n            else if (ast_default.isVariable(value) && config.variables) {\n                let missing = false;\n                let variables = config.variables;\n                for (const key2 of value.path){\n                    if (!Object.prototype.hasOwnProperty.call(variables, key2)) {\n                        missing = true;\n                        break;\n                    }\n                    variables = variables[key2];\n                }\n                if (missing) {\n                    errors.push({\n                        id: \"variable-undefined\",\n                        level: \"error\",\n                        message: `Undefined variable: '${value.path.join(\".\")}'`\n                    });\n                }\n            } else continue;\n        }\n        value = value;\n        if (type) {\n            const valid = validateType(type, value, config, key);\n            if (valid === false) {\n                errors.push({\n                    id: \"attribute-type-invalid\",\n                    level: errorLevel || \"error\",\n                    message: `Attribute '${key}' must be type of '${typeToString(type)}'`\n                });\n            }\n            if (Array.isArray(valid)) {\n                errors.push(...valid);\n            }\n        }\n        if (typeof matches === \"function\") matches = matches(config);\n        if (Array.isArray(matches) && !matches.includes(value)) errors.push({\n            id: \"attribute-value-invalid\",\n            level: errorLevel || \"error\",\n            message: `Attribute '${key}' must match one of ${displayMatches(matches, 8)}. Got '${value}' instead.`\n        });\n        if (matches instanceof RegExp && !matches.test(value)) errors.push({\n            id: \"attribute-value-invalid\",\n            level: errorLevel || \"error\",\n            message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`\n        });\n        if (typeof attrib.validate === \"function\") {\n            const attribErrors = attrib.validate(value, config, key);\n            if (Array.isArray(attribErrors)) errors.push(...attribErrors);\n        }\n    }\n    for (const [key, { required }] of Object.entries(attributes))if (required && node2.attributes[key] === void 0) errors.push({\n        id: \"attribute-missing-required\",\n        level: \"error\",\n        message: `Missing required attribute: '${key}'`\n    });\n    if (schema.slots) {\n        for (const [key, { required }] of Object.entries(schema.slots))if (required && node2.slots[key] === void 0) errors.push({\n            id: \"slot-missing-required\",\n            level: \"error\",\n            message: `Missing required slot: '${key}'`\n        });\n    }\n    for (const { type } of node2.children){\n        if (schema.children && type !== \"error\" && !schema.children.includes(type)) errors.push({\n            id: \"child-invalid\",\n            level: \"warning\",\n            message: `Can't nest '${type}' in '${node2.tag || node2.type}'`\n        });\n    }\n    if (schema.validate) {\n        const schemaErrors = schema.validate(node2, config);\n        if (isPromise(schemaErrors)) {\n            return schemaErrors.then((e)=>errors.concat(e));\n        }\n        errors.push(...schemaErrors);\n    }\n    return errors;\n}\nfunction* walkWithParents(node2, parents = []) {\n    yield [\n        node2,\n        parents\n    ];\n    for (const child of [\n        ...Object.values(node2.slots),\n        ...node2.children\n    ])yield* walkWithParents(child, [\n        ...parents,\n        node2\n    ]);\n}\nfunction validateTree(content, config) {\n    const output = [\n        ...walkWithParents(content)\n    ].map(([node2, parents])=>{\n        const { type, lines, location } = node2;\n        const updatedConfig = {\n            ...config,\n            validation: {\n                ...config.validation,\n                parents\n            }\n        };\n        const errors = validator(node2, updatedConfig);\n        if (isPromise(errors)) {\n            return errors.then((e)=>e.map((error2)=>({\n                        type,\n                        lines,\n                        location,\n                        error: error2\n                    })));\n        }\n        return errors.map((error2)=>({\n                type,\n                lines,\n                location,\n                error: error2\n            }));\n    });\n    if (output.some(isPromise)) {\n        return Promise.all(output).then((o)=>o.flat());\n    }\n    return output.flat();\n}\n// index.ts\nvar tokenizer = new Tokenizer();\nfunction mergeConfig(config = {}) {\n    return {\n        ...config,\n        tags: {\n            ...tags_default,\n            ...config.tags\n        },\n        nodes: {\n            ...schema_exports,\n            ...config.nodes\n        },\n        functions: {\n            ...functions_default,\n            ...config.functions\n        }\n    };\n}\nfunction parse3(content, args) {\n    if (typeof content === \"string\") content = tokenizer.tokenize(content);\n    return parser(content, args);\n}\nfunction resolve2(content, config) {\n    if (Array.isArray(content)) return content.flatMap((child)=>child.resolve(config));\n    return content.resolve(config);\n}\nfunction transform2(nodes, options) {\n    const config = mergeConfig(options);\n    const content = resolve2(nodes, config);\n    if (Array.isArray(content)) return content.flatMap((child)=>child.transform(config));\n    return content.transform(config);\n}\nfunction validate(content, options) {\n    const config = mergeConfig(options);\n    return validateTree(content, config);\n}\nfunction createElement(name, attributes = {}, ...children) {\n    return {\n        name,\n        attributes,\n        children\n    };\n}\nvar Markdoc = class {\n    constructor(config){\n        this.parse = parse3;\n        this.resolve = (content)=>resolve2(content, this.config);\n        this.transform = (content)=>transform2(content, this.config);\n        this.validate = (content)=>validate(content, this.config);\n        this.config = config;\n    }\n};\nMarkdoc.nodes = schema_exports;\nMarkdoc.tags = tags_default;\nMarkdoc.functions = functions_default;\nMarkdoc.globalAttributes = globalAttributes;\nMarkdoc.renderers = renderers_default;\nMarkdoc.transforms = transforms_default;\nMarkdoc.Ast = ast_default;\nMarkdoc.Tag = Tag;\nMarkdoc.Tokenizer = Tokenizer;\nMarkdoc.parseTags = parseTags;\nMarkdoc.transformer = transformer_default;\nMarkdoc.validator = validator;\nMarkdoc.parse = parse3;\nMarkdoc.transform = transform2;\nMarkdoc.validate = validate;\nMarkdoc.createElement = createElement;\nMarkdoc.truthy = truthy;\nMarkdoc.format = format;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@markdoc/markdoc/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@markdoc/next.js/src/runtime.js":
/*!******************************************************!*\
  !*** ./node_modules/@markdoc/next.js/src/runtime.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// IDEA: explore better displayName functions\nfunction displayName(name) {\n    // Pascal case\n    return name.match(/[a-z]+/gi).map((word)=>word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()).join(\"\");\n}\nfunction transformRecord(config) {\n    const output = {};\n    const components = {};\n    if (config) {\n        Object.entries(config).forEach(([name, registration])=>{\n            if (output[name]) {\n                throw new Error(`\"${name}\" has already been declared`);\n            }\n            const componentName = registration.render ? displayName(name) : undefined;\n            output[name] = {\n                ...registration,\n                render: componentName\n            };\n            if (componentName) {\n                components[componentName] = registration.render;\n            }\n        });\n    }\n    return {\n        output,\n        components\n    };\n}\nexports.getSchema = function getSchema(schema) {\n    const { output: tags, components: tagComponents } = transformRecord(schema.tags);\n    const { output: nodes, components: nodeComponents } = transformRecord(schema.nodes);\n    return {\n        ...schema,\n        tags,\n        nodes,\n        components: {\n            ...tagComponents,\n            ...nodeComponents\n        }\n    };\n};\nexports.defaultObject = function defaultObject(o) {\n    if (Object.prototype.hasOwnProperty.call(o, \"default\")) return o.default;\n    return o || {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1hcmtkb2MvbmV4dC5qcy9zcmMvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2Q0FBNkM7QUFDN0MsU0FBU0EsWUFBWUMsSUFBSTtJQUN2QixjQUFjO0lBQ2QsT0FBT0EsS0FDSkMsS0FBSyxDQUFDLFlBQ05DLEdBQUcsQ0FBQyxDQUFDQyxPQUFTQSxLQUFLQyxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLRixLQUFLRyxNQUFNLENBQUMsR0FBR0MsV0FBVyxJQUN2RUMsSUFBSSxDQUFDO0FBQ1Y7QUFFQSxTQUFTQyxnQkFBZ0JDLE1BQU07SUFDN0IsTUFBTUMsU0FBUyxDQUFDO0lBQ2hCLE1BQU1DLGFBQWEsQ0FBQztJQUVwQixJQUFJRixRQUFRO1FBQ1ZHLE9BQU9DLE9BQU8sQ0FBQ0osUUFBUUssT0FBTyxDQUFDLENBQUMsQ0FBQ2YsTUFBTWdCLGFBQWE7WUFDbEQsSUFBSUwsTUFBTSxDQUFDWCxLQUFLLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSWlCLE1BQU0sQ0FBQyxDQUFDLEVBQUVqQixLQUFLLDJCQUEyQixDQUFDO1lBQ3ZEO1lBRUEsTUFBTWtCLGdCQUFnQkYsYUFBYUcsTUFBTSxHQUFHcEIsWUFBWUMsUUFBUW9CO1lBRWhFVCxNQUFNLENBQUNYLEtBQUssR0FBRztnQkFDYixHQUFHZ0IsWUFBWTtnQkFDZkcsUUFBUUQ7WUFDVjtZQUVBLElBQUlBLGVBQWU7Z0JBQ2pCTixVQUFVLENBQUNNLGNBQWMsR0FBR0YsYUFBYUcsTUFBTTtZQUNqRDtRQUNGO0lBQ0Y7SUFFQSxPQUFPO1FBQUNSO1FBQVFDO0lBQVU7QUFDNUI7QUFFQVMsaUJBQWlCLEdBQUcsU0FBU0MsVUFBVUMsTUFBTTtJQUMzQyxNQUFNLEVBQUNaLFFBQVFhLElBQUksRUFBRVosWUFBWWEsYUFBYSxFQUFDLEdBQUdoQixnQkFDaERjLE9BQU9DLElBQUk7SUFHYixNQUFNLEVBQUNiLFFBQVFlLEtBQUssRUFBRWQsWUFBWWUsY0FBYyxFQUFDLEdBQUdsQixnQkFDbERjLE9BQU9HLEtBQUs7SUFHZCxPQUFPO1FBQ0wsR0FBR0gsTUFBTTtRQUNUQztRQUNBRTtRQUNBZCxZQUFZO1lBQ1YsR0FBR2EsYUFBYTtZQUNoQixHQUFHRSxjQUFjO1FBQ25CO0lBQ0Y7QUFDRjtBQUVBTixxQkFBcUIsR0FBRyxTQUFTTyxjQUFjQyxDQUFDO0lBQzlDLElBQUloQixPQUFPaUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0gsR0FBRyxZQUFZLE9BQU9BLEVBQUVJLE9BQU87SUFDeEUsT0FBT0osS0FBSyxDQUFDO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWlsd2luZHVpLXN5bnRheC8uL25vZGVfbW9kdWxlcy9AbWFya2RvYy9uZXh0LmpzL3NyYy9ydW50aW1lLmpzPzJkNTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSURFQTogZXhwbG9yZSBiZXR0ZXIgZGlzcGxheU5hbWUgZnVuY3Rpb25zXG5mdW5jdGlvbiBkaXNwbGF5TmFtZShuYW1lKSB7XG4gIC8vIFBhc2NhbCBjYXNlXG4gIHJldHVybiBuYW1lXG4gICAgLm1hdGNoKC9bYS16XSsvZ2kpXG4gICAgLm1hcCgod29yZCkgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpXG4gICAgLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1SZWNvcmQoY29uZmlnKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBjb25zdCBjb21wb25lbnRzID0ge307XG5cbiAgaWYgKGNvbmZpZykge1xuICAgIE9iamVjdC5lbnRyaWVzKGNvbmZpZykuZm9yRWFjaCgoW25hbWUsIHJlZ2lzdHJhdGlvbl0pID0+IHtcbiAgICAgIGlmIChvdXRwdXRbbmFtZV0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkYCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSByZWdpc3RyYXRpb24ucmVuZGVyID8gZGlzcGxheU5hbWUobmFtZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgIG91dHB1dFtuYW1lXSA9IHtcbiAgICAgICAgLi4ucmVnaXN0cmF0aW9uLFxuICAgICAgICByZW5kZXI6IGNvbXBvbmVudE5hbWUsXG4gICAgICB9O1xuXG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICBjb21wb25lbnRzW2NvbXBvbmVudE5hbWVdID0gcmVnaXN0cmF0aW9uLnJlbmRlcjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7b3V0cHV0LCBjb21wb25lbnRzfTtcbn1cblxuZXhwb3J0cy5nZXRTY2hlbWEgPSBmdW5jdGlvbiBnZXRTY2hlbWEoc2NoZW1hKSB7XG4gIGNvbnN0IHtvdXRwdXQ6IHRhZ3MsIGNvbXBvbmVudHM6IHRhZ0NvbXBvbmVudHN9ID0gdHJhbnNmb3JtUmVjb3JkKFxuICAgIHNjaGVtYS50YWdzXG4gICk7XG5cbiAgY29uc3Qge291dHB1dDogbm9kZXMsIGNvbXBvbmVudHM6IG5vZGVDb21wb25lbnRzfSA9IHRyYW5zZm9ybVJlY29yZChcbiAgICBzY2hlbWEubm9kZXNcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIC4uLnNjaGVtYSxcbiAgICB0YWdzLFxuICAgIG5vZGVzLFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgIC4uLnRhZ0NvbXBvbmVudHMsXG4gICAgICAuLi5ub2RlQ29tcG9uZW50cyxcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0T2JqZWN0ID0gZnVuY3Rpb24gZGVmYXVsdE9iamVjdChvKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgJ2RlZmF1bHQnKSkgcmV0dXJuIG8uZGVmYXVsdDtcbiAgcmV0dXJuIG8gfHwge307XG59O1xuIl0sIm5hbWVzIjpbImRpc3BsYXlOYW1lIiwibmFtZSIsIm1hdGNoIiwibWFwIiwid29yZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwidG9Mb3dlckNhc2UiLCJqb2luIiwidHJhbnNmb3JtUmVjb3JkIiwiY29uZmlnIiwib3V0cHV0IiwiY29tcG9uZW50cyIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwicmVnaXN0cmF0aW9uIiwiRXJyb3IiLCJjb21wb25lbnROYW1lIiwicmVuZGVyIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsImdldFNjaGVtYSIsInNjaGVtYSIsInRhZ3MiLCJ0YWdDb21wb25lbnRzIiwibm9kZXMiLCJub2RlQ29tcG9uZW50cyIsImRlZmF1bHRPYmplY3QiLCJvIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@markdoc/next.js/src/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@markdoc/markdoc/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@markdoc/markdoc/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ast: () => (/* binding */ ast_default),\n/* harmony export */   Tag: () => (/* binding */ Tag),\n/* harmony export */   Tokenizer: () => (/* binding */ Tokenizer),\n/* harmony export */   createElement: () => (/* binding */ createElement),\n/* harmony export */   \"default\": () => (/* binding */ Markdoc),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   functions: () => (/* binding */ functions_default),\n/* harmony export */   globalAttributes: () => (/* binding */ globalAttributes),\n/* harmony export */   nodes: () => (/* binding */ schema_exports),\n/* harmony export */   parse: () => (/* binding */ parse3),\n/* harmony export */   parseTags: () => (/* binding */ parseTags),\n/* harmony export */   renderers: () => (/* binding */ renderers_default),\n/* harmony export */   resolve: () => (/* binding */ resolve2),\n/* harmony export */   tags: () => (/* binding */ tags_default),\n/* harmony export */   transform: () => (/* binding */ transform2),\n/* harmony export */   transformer: () => (/* binding */ transformer_default),\n/* harmony export */   transforms: () => (/* binding */ transforms_default),\n/* harmony export */   truthy: () => (/* binding */ truthy),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = (target)=>__defProp(target, \"__esModule\", {\n        value: true\n    });\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[Object.keys(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __export = (target, all)=>{\n    __markAsModule(target);\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __reExport = (target, module, desc)=>{\n    if (module && typeof module === \"object\" || typeof module === \"function\") {\n        for (let key of __getOwnPropNames(module))if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n            get: ()=>module[key],\n            enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable\n        });\n    }\n    return target;\n};\nvar __toModule = (module)=>{\n    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, \"default\", module && module.__esModule && \"default\" in module ? {\n        get: ()=>module.default,\n        enumerable: true\n    } : {\n        value: module,\n        enumerable: true\n    })), module);\n};\n// src/grammar/tag.js\nvar require_tag = __commonJS({\n    \"src/grammar/tag.js\" (exports, module) {\n        \"use strict\";\n        function peg$subclass(child, parent) {\n            function C() {\n                this.constructor = child;\n            }\n            C.prototype = parent.prototype;\n            child.prototype = new C();\n        }\n        function peg$SyntaxError(message, expected, found, location) {\n            this.message = message;\n            this.expected = expected;\n            this.found = found;\n            this.location = location;\n            this.name = \"SyntaxError\";\n            if (typeof Error.captureStackTrace === \"function\") {\n                Error.captureStackTrace(this, peg$SyntaxError);\n            }\n        }\n        peg$subclass(peg$SyntaxError, Error);\n        peg$SyntaxError.buildMessage = function(expected, found, location) {\n            var DESCRIBE_EXPECTATION_FNS = {\n                literal: function(expectation) {\n                    return '\"' + literalEscape(expectation.text) + '\"';\n                },\n                class: function(expectation) {\n                    var escapedParts = expectation.parts.map(function(part) {\n                        return Array.isArray(part) ? classEscape(part[0]) + \"-\" + classEscape(part[1]) : classEscape(part);\n                    });\n                    return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n                },\n                any: function() {\n                    return \"any character\";\n                },\n                end: function() {\n                    return \"end of input\";\n                },\n                other: function(expectation) {\n                    return expectation.description;\n                },\n                not: function(expectation) {\n                    return \"not \" + describeExpectation(expectation.expected);\n                }\n            };\n            function hex(ch) {\n                return ch.charCodeAt(0).toString(16).toUpperCase();\n            }\n            function literalEscape(s2) {\n                return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n                    return \"\\\\x0\" + hex(ch);\n                }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n                    return \"\\\\x\" + hex(ch);\n                });\n            }\n            function classEscape(s2) {\n                return s2.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\]/g, \"\\\\]\").replace(/\\^/g, \"\\\\^\").replace(/-/g, \"\\\\-\").replace(/\\0/g, \"\\\\0\").replace(/\\t/g, \"\\\\t\").replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/[\\x00-\\x0F]/g, function(ch) {\n                    return \"\\\\x0\" + hex(ch);\n                }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) {\n                    return \"\\\\x\" + hex(ch);\n                });\n            }\n            function describeExpectation(expectation) {\n                return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n            }\n            function describeExpected(expected2) {\n                var descriptions = expected2.map(describeExpectation);\n                var i, j;\n                descriptions.sort();\n                if (descriptions.length > 0) {\n                    for(i = 1, j = 1; i < descriptions.length; i++){\n                        if (descriptions[i - 1] !== descriptions[i]) {\n                            descriptions[j] = descriptions[i];\n                            j++;\n                        }\n                    }\n                    descriptions.length = j;\n                }\n                switch(descriptions.length){\n                    case 1:\n                        return descriptions[0];\n                    case 2:\n                        return descriptions[0] + \" or \" + descriptions[1];\n                    default:\n                        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n                }\n            }\n            function describeFound(found2) {\n                return found2 ? '\"' + literalEscape(found2) + '\"' : \"end of input\";\n            }\n            return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n        };\n        function peg$parse(input, options) {\n            options = options !== void 0 ? options : {};\n            var peg$FAILED = {};\n            var peg$startRuleFunctions = {\n                Top: peg$parseTop\n            };\n            var peg$startRuleFunction = peg$parseTop;\n            var peg$c0 = \"/\";\n            var peg$c1 = \".\";\n            var peg$c2 = \"#\";\n            var peg$c3 = \"=\";\n            var peg$c4 = \"(\";\n            var peg$c5 = \")\";\n            var peg$c6 = \",\";\n            var peg$c7 = \"[\";\n            var peg$c8 = \"]\";\n            var peg$c9 = \"null\";\n            var peg$c10 = \"true\";\n            var peg$c11 = \"false\";\n            var peg$c12 = \"{\";\n            var peg$c13 = \"}\";\n            var peg$c14 = \":\";\n            var peg$c15 = \"-\";\n            var peg$c16 = '\"';\n            var peg$c17 = \"\\\\\";\n            var peg$c18 = \"n\";\n            var peg$c19 = \"r\";\n            var peg$c20 = \"t\";\n            var peg$r0 = /^[$@]/;\n            var peg$r1 = /^[0-9]/;\n            var peg$r2 = /^[^\\0-\\x1F\"\\\\]/;\n            var peg$r3 = /^[a-zA-Z0-9_\\-]/;\n            var peg$r4 = /^[ \\n\\t]/;\n            var peg$e0 = peg$literalExpectation(\"/\", false);\n            var peg$e1 = peg$otherExpectation(\"tag name\");\n            var peg$e2 = peg$otherExpectation(\"class\");\n            var peg$e3 = peg$otherExpectation(\"id\");\n            var peg$e4 = peg$literalExpectation(\"=\", false);\n            var peg$e5 = peg$literalExpectation(\"(\", false);\n            var peg$e6 = peg$literalExpectation(\")\", false);\n            var peg$e7 = peg$literalExpectation(\",\", false);\n            var peg$e8 = peg$otherExpectation(\"variable\");\n            var peg$e9 = peg$otherExpectation(\"null\");\n            var peg$e10 = peg$otherExpectation(\"boolean\");\n            var peg$e11 = peg$literalExpectation(\"[\", false);\n            var peg$e12 = peg$literalExpectation(\"]\", false);\n            var peg$e13 = peg$literalExpectation(\"{\", false);\n            var peg$e14 = peg$literalExpectation(\"}\", false);\n            var peg$e15 = peg$literalExpectation(\":\", false);\n            var peg$e16 = peg$otherExpectation(\"number\");\n            var peg$e17 = peg$otherExpectation(\"string\");\n            var peg$e18 = peg$otherExpectation(\"identifier\");\n            var peg$e19 = peg$otherExpectation(\"whitespace\");\n            var peg$f0 = function(variable) {\n                return {\n                    type: \"variable\",\n                    meta: {\n                        variable\n                    }\n                };\n            };\n            var peg$f1 = function(attributes) {\n                return {\n                    type: \"annotation\",\n                    meta: {\n                        attributes\n                    }\n                };\n            };\n            var peg$f2 = function(tag, value) {\n                return value;\n            };\n            var peg$f3 = function(tag, primary, attributes, close) {\n                if (primary) {\n                    attributes = attributes || [];\n                    attributes.unshift({\n                        type: \"attribute\",\n                        name: \"primary\",\n                        value: primary\n                    });\n                }\n                const [type, nesting] = close ? [\n                    \"tag\",\n                    0\n                ] : [\n                    \"tag_open\",\n                    1\n                ];\n                return {\n                    type,\n                    nesting,\n                    meta: {\n                        tag,\n                        attributes\n                    }\n                };\n            };\n            var peg$f4 = function(tag) {\n                return {\n                    type: \"tag_close\",\n                    nesting: -1,\n                    meta: {\n                        tag\n                    }\n                };\n            };\n            var peg$f5 = function(head, tail) {\n                return !head ? [] : [\n                    head,\n                    ...tail\n                ];\n            };\n            var peg$f6 = function(item2) {\n                return item2;\n            };\n            var peg$f7 = function(ids) {\n                return ids;\n            };\n            var peg$f8 = function(classes) {\n                return classes;\n            };\n            var peg$f9 = function(attribute) {\n                return attribute;\n            };\n            var peg$f10 = function(name) {\n                return {\n                    type: \"class\",\n                    name,\n                    value: true\n                };\n            };\n            var peg$f11 = function(value) {\n                return {\n                    type: \"attribute\",\n                    name: \"id\",\n                    value\n                };\n            };\n            var peg$f12 = function(name, value) {\n                return {\n                    type: \"attribute\",\n                    name,\n                    value\n                };\n            };\n            var peg$f13 = function(name, head, tail) {\n                return head ? [\n                    head,\n                    ...tail\n                ] : [];\n            };\n            var peg$f14 = function(name, params) {\n                let parameters = {};\n                for (let [index, { name: name2, value }] of params.entries())parameters[name2 || index] = value;\n                return new Function3(name, parameters);\n            };\n            var peg$f15 = function(name) {\n                return name;\n            };\n            var peg$f16 = function(name, value) {\n                return {\n                    name,\n                    value\n                };\n            };\n            var peg$f17 = function(value) {\n                return value;\n            };\n            var peg$f18 = function(prefix, head, tail) {\n                if (prefix === \"@\") return [\n                    head,\n                    ...tail\n                ];\n                return new Variable2([\n                    head,\n                    ...tail\n                ]);\n            };\n            var peg$f19 = function() {\n                return null;\n            };\n            var peg$f20 = function() {\n                return true;\n            };\n            var peg$f21 = function() {\n                return false;\n            };\n            var peg$f22 = function(head, tail) {\n                return [\n                    head,\n                    ...tail\n                ];\n            };\n            var peg$f23 = function(value) {\n                return value || [];\n            };\n            var peg$f24 = function(head, tail) {\n                return Object.assign(head, ...tail);\n            };\n            var peg$f25 = function(value) {\n                return value || {};\n            };\n            var peg$f26 = function(key, value) {\n                return key === \"$$mdtype\" ? {} : {\n                    [key]: value\n                };\n            };\n            var peg$f27 = function() {\n                return parseFloat(text2());\n            };\n            var peg$f28 = function(value) {\n                return value.join(\"\");\n            };\n            var peg$f29 = function() {\n                return \"\\n\";\n            };\n            var peg$f30 = function() {\n                return \"\\r\";\n            };\n            var peg$f31 = function() {\n                return \"\t\";\n            };\n            var peg$f32 = function(sequence) {\n                return sequence;\n            };\n            var peg$currPos = 0;\n            var peg$savedPos = 0;\n            var peg$posDetailsCache = [\n                {\n                    line: 1,\n                    column: 1\n                }\n            ];\n            var peg$expected = [];\n            var peg$silentFails = 0;\n            var peg$result;\n            if (\"startRule\" in options) {\n                if (!(options.startRule in peg$startRuleFunctions)) {\n                    throw new Error(`Can't start parsing from rule \"` + options.startRule + '\".');\n                }\n                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n            }\n            function text2() {\n                return input.substring(peg$savedPos, peg$currPos);\n            }\n            function offset() {\n                return peg$savedPos;\n            }\n            function range() {\n                return [\n                    peg$savedPos,\n                    peg$currPos\n                ];\n            }\n            function location() {\n                return peg$computeLocation(peg$savedPos, peg$currPos);\n            }\n            function expected(description, location2) {\n                location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n                throw peg$buildStructuredError([\n                    peg$otherExpectation(description)\n                ], input.substring(peg$savedPos, peg$currPos), location2);\n            }\n            function error2(message, location2) {\n                location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);\n                throw peg$buildSimpleError(message, location2);\n            }\n            function peg$literalExpectation(text3, ignoreCase) {\n                return {\n                    type: \"literal\",\n                    text: text3,\n                    ignoreCase\n                };\n            }\n            function peg$classExpectation(parts, inverted, ignoreCase) {\n                return {\n                    type: \"class\",\n                    parts,\n                    inverted,\n                    ignoreCase\n                };\n            }\n            function peg$anyExpectation() {\n                return {\n                    type: \"any\"\n                };\n            }\n            function peg$endExpectation() {\n                return {\n                    type: \"end\"\n                };\n            }\n            function peg$otherExpectation(description) {\n                return {\n                    type: \"other\",\n                    description\n                };\n            }\n            function peg$computePosDetails(pos) {\n                var details = peg$posDetailsCache[pos];\n                var p;\n                if (details) {\n                    return details;\n                } else {\n                    p = pos - 1;\n                    while(!peg$posDetailsCache[p]){\n                        p--;\n                    }\n                    details = peg$posDetailsCache[p];\n                    details = {\n                        line: details.line,\n                        column: details.column\n                    };\n                    while(p < pos){\n                        if (input.charCodeAt(p) === 10) {\n                            details.line++;\n                            details.column = 1;\n                        } else {\n                            details.column++;\n                        }\n                        p++;\n                    }\n                    peg$posDetailsCache[pos] = details;\n                    return details;\n                }\n            }\n            var peg$VALIDFILENAME = typeof options.filename === \"string\" && options.filename.length > 0;\n            function peg$computeLocation(startPos, endPos) {\n                var loc = {};\n                if (peg$VALIDFILENAME) loc.filename = options.filename;\n                var startPosDetails = peg$computePosDetails(startPos);\n                loc.start = {\n                    offset: startPos,\n                    line: startPosDetails.line,\n                    column: startPosDetails.column\n                };\n                var endPosDetails = peg$computePosDetails(endPos);\n                loc.end = {\n                    offset: endPos,\n                    line: endPosDetails.line,\n                    column: endPosDetails.column\n                };\n                return loc;\n            }\n            function peg$begin() {\n                peg$expected.push({\n                    pos: peg$currPos,\n                    variants: []\n                });\n            }\n            function peg$expect(expected2) {\n                var top = peg$expected[peg$expected.length - 1];\n                if (peg$currPos < top.pos) {\n                    return;\n                }\n                if (peg$currPos > top.pos) {\n                    top.pos = peg$currPos;\n                    top.variants = [];\n                }\n                top.variants.push(expected2);\n            }\n            function peg$end(invert) {\n                var expected2 = peg$expected.pop();\n                var top = peg$expected[peg$expected.length - 1];\n                var variants = expected2.variants;\n                if (top.pos !== expected2.pos) {\n                    return;\n                }\n                if (invert) {\n                    variants = variants.map(function(e) {\n                        return e.type === \"not\" ? e.expected : {\n                            type: \"not\",\n                            expected: e\n                        };\n                    });\n                }\n                Array.prototype.push.apply(top.variants, variants);\n            }\n            function peg$buildSimpleError(message, location2) {\n                return new peg$SyntaxError(message, null, null, location2);\n            }\n            function peg$buildStructuredError(expected2, found, location2) {\n                return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);\n            }\n            function peg$buildError() {\n                var expected2 = peg$expected[0];\n                var failPos = expected2.pos;\n                return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));\n            }\n            function peg$parseTop() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$parseTopLevelValue();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseAnnotation();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseTagOpen();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parseTagClose();\n                        }\n                    }\n                }\n                return s0;\n            }\n            function peg$parseTopLevelValue() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseVariable();\n                if (s1 === peg$FAILED) {\n                    s1 = peg$parseFunction();\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f0(s1);\n                }\n                s0 = s1;\n                return s0;\n            }\n            function peg$parseAnnotation() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagAttributes();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f1(s1);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagOpen() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagName();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    s3 = peg$currPos;\n                    s4 = peg$parseValue();\n                    if (s4 !== peg$FAILED) {\n                        s5 = peg$parse_();\n                        if (s5 === peg$FAILED) {\n                            s5 = null;\n                        }\n                        peg$savedPos = s3;\n                        s3 = peg$f2(s1, s4);\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    s4 = peg$parseTagAttributes();\n                    if (s4 === peg$FAILED) {\n                        s4 = null;\n                    }\n                    s5 = [];\n                    s6 = peg$parse_();\n                    while(s6 !== peg$FAILED){\n                        s5.push(s6);\n                        s6 = peg$parse_();\n                    }\n                    rule$expects(peg$e0);\n                    if (input.charCodeAt(peg$currPos) === 47) {\n                        s6 = peg$c0;\n                        peg$currPos++;\n                    } else {\n                        s6 = peg$FAILED;\n                    }\n                    if (s6 === peg$FAILED) {\n                        s6 = null;\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f3(s1, s3, s4, s6);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagClose() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                rule$expects(peg$e0);\n                if (input.charCodeAt(peg$currPos) === 47) {\n                    s1 = peg$c0;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseTagName();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f4(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagName() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e1);\n                peg$silentFails++;\n                s0 = peg$parseIdentifier();\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseTagAttributes() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagAttributesItem();\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseTagAttributesTail();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parseTagAttributesTail();\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f5(s1, s2);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagAttributesTail() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                    while(s2 !== peg$FAILED){\n                        s1.push(s2);\n                        s2 = peg$parse_();\n                    }\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseTagAttributesItem();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f6(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTagAttributesItem() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseTagShortcutId();\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f7(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseTagShortcutClass();\n                    if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$f8(s1);\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseTagAttribute();\n                        if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$f9(s1);\n                        }\n                        s0 = s1;\n                    }\n                }\n                return s0;\n            }\n            function peg$parseTagShortcutClass() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e2);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 46) {\n                    s1 = peg$c1;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f10(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseTagShortcutId() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e3);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 35) {\n                    s1 = peg$c2;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f11(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseTagAttribute() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseIdentifier();\n                if (s1 !== peg$FAILED) {\n                    rule$expects(peg$e4);\n                    if (input.charCodeAt(peg$currPos) === 61) {\n                        s2 = peg$c3;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = peg$parseValue();\n                        if (s3 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f12(s1, s3);\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseFunction() {\n                var s0, s1, s2, s3, s4, s5, s6, s7;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseIdentifier();\n                if (s1 !== peg$FAILED) {\n                    rule$expects(peg$e5);\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                        s2 = peg$c4;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parse_();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parse_();\n                        }\n                        s4 = peg$currPos;\n                        s5 = peg$parseFunctionParameter();\n                        if (s5 === peg$FAILED) {\n                            s5 = null;\n                        }\n                        s6 = [];\n                        s7 = peg$parseFunctionParameterTail();\n                        while(s7 !== peg$FAILED){\n                            s6.push(s7);\n                            s7 = peg$parseFunctionParameterTail();\n                        }\n                        peg$savedPos = s4;\n                        s4 = peg$f13(s1, s5, s6);\n                        rule$expects(peg$e6);\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                            s5 = peg$c5;\n                            peg$currPos++;\n                        } else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f14(s1, s4);\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseFunctionParameter() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$currPos;\n                s2 = peg$parseIdentifier();\n                if (s2 !== peg$FAILED) {\n                    rule$expects(peg$e4);\n                    if (input.charCodeAt(peg$currPos) === 61) {\n                        s3 = peg$c3;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s1;\n                        s1 = peg$f15(s2);\n                    } else {\n                        peg$currPos = s1;\n                        s1 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s1;\n                    s1 = peg$FAILED;\n                }\n                if (s1 === peg$FAILED) {\n                    s1 = null;\n                }\n                s2 = peg$parseValue();\n                if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s0 = peg$f16(s1, s2);\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseFunctionParameterTail() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parse_();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parse_();\n                    }\n                    s4 = peg$parseFunctionParameter();\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f17(s4);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseTrailingComma() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s1 = [\n                        s1,\n                        s2\n                    ];\n                    s0 = s1;\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = null;\n                }\n                return s0;\n            }\n            function peg$parseVariable() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e8);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (peg$r0.test(input.charAt(peg$currPos))) {\n                    s1 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parseVariableTail();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parseVariableTail();\n                        }\n                        peg$savedPos = s0;\n                        s0 = peg$f18(s1, s2, s3);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseVariableTail() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 46) {\n                    s1 = peg$c1;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = peg$parseIdentifier();\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f15(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 91) {\n                        s1 = peg$c7;\n                        peg$currPos++;\n                    } else {\n                        s1 = peg$FAILED;\n                    }\n                    if (s1 !== peg$FAILED) {\n                        s2 = peg$parseValueNumber();\n                        if (s2 === peg$FAILED) {\n                            s2 = peg$parseValueString();\n                        }\n                        if (s2 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 93) {\n                                s3 = peg$c8;\n                                peg$currPos++;\n                            } else {\n                                s3 = peg$FAILED;\n                            }\n                            if (s3 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s0 = peg$f17(s2);\n                            } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                            }\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                }\n                return s0;\n            }\n            function peg$parseValue() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$parseValueNull();\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseValueBoolean();\n                    if (s0 === peg$FAILED) {\n                        s0 = peg$parseValueString();\n                        if (s0 === peg$FAILED) {\n                            s0 = peg$parseValueNumber();\n                            if (s0 === peg$FAILED) {\n                                s0 = peg$parseValueArray();\n                                if (s0 === peg$FAILED) {\n                                    s0 = peg$parseValueHash();\n                                    if (s0 === peg$FAILED) {\n                                        s0 = peg$parseFunction();\n                                        if (s0 === peg$FAILED) {\n                                            s0 = peg$parseVariable();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                return s0;\n            }\n            function peg$parseValueNull() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e9);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 4) === peg$c9) {\n                    s1 = peg$c9;\n                    peg$currPos += 4;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f19();\n                }\n                s0 = s1;\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueBoolean() {\n                var s0, s1;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e10);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 4) === peg$c10) {\n                    s1 = peg$c10;\n                    peg$currPos += 4;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$f20();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 5) === peg$c11) {\n                        s1 = peg$c11;\n                        peg$currPos += 5;\n                    } else {\n                        s1 = peg$FAILED;\n                    }\n                    if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$f21();\n                    }\n                    s0 = s1;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueArray() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                rule$expects(peg$e11);\n                if (input.charCodeAt(peg$currPos) === 91) {\n                    s1 = peg$c7;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    s3 = peg$currPos;\n                    s4 = peg$parseValue();\n                    if (s4 !== peg$FAILED) {\n                        s5 = [];\n                        s6 = peg$parseValueArrayTail();\n                        while(s6 !== peg$FAILED){\n                            s5.push(s6);\n                            s6 = peg$parseValueArrayTail();\n                        }\n                        s6 = peg$parseTrailingComma();\n                        peg$savedPos = s3;\n                        s3 = peg$f22(s4, s5);\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    s4 = [];\n                    s5 = peg$parse_();\n                    while(s5 !== peg$FAILED){\n                        s4.push(s5);\n                        s5 = peg$parse_();\n                    }\n                    rule$expects(peg$e12);\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                        s5 = peg$c8;\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                    }\n                    if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f23(s3);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueArrayTail() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parse_();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parse_();\n                    }\n                    s4 = peg$parseValue();\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f17(s4);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueHash() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                rule$expects(peg$e13);\n                if (input.charCodeAt(peg$currPos) === 123) {\n                    s1 = peg$c12;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parse_();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parse_();\n                    }\n                    s3 = peg$currPos;\n                    s4 = peg$parseValueHashItem();\n                    if (s4 !== peg$FAILED) {\n                        s5 = [];\n                        s6 = peg$parseValueHashTail();\n                        while(s6 !== peg$FAILED){\n                            s5.push(s6);\n                            s6 = peg$parseValueHashTail();\n                        }\n                        s6 = peg$parseTrailingComma();\n                        peg$savedPos = s3;\n                        s3 = peg$f24(s4, s5);\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    s4 = [];\n                    s5 = peg$parse_();\n                    while(s5 !== peg$FAILED){\n                        s4.push(s5);\n                        s5 = peg$parse_();\n                    }\n                    rule$expects(peg$e14);\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                        s5 = peg$c13;\n                        peg$currPos++;\n                    } else {\n                        s5 = peg$FAILED;\n                    }\n                    if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f25(s3);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueHashTail() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = [];\n                s2 = peg$parse_();\n                while(s2 !== peg$FAILED){\n                    s1.push(s2);\n                    s2 = peg$parse_();\n                }\n                rule$expects(peg$e7);\n                if (input.charCodeAt(peg$currPos) === 44) {\n                    s2 = peg$c6;\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = [];\n                    s4 = peg$parse_();\n                    while(s4 !== peg$FAILED){\n                        s3.push(s4);\n                        s4 = peg$parse_();\n                    }\n                    s4 = peg$parseValueHashItem();\n                    if (s4 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f6(s4);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueHashItem() {\n                var s0, s1, s2, s3, s4;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                s1 = peg$parseIdentifier();\n                if (s1 === peg$FAILED) {\n                    s1 = peg$parseValueString();\n                }\n                if (s1 !== peg$FAILED) {\n                    rule$expects(peg$e15);\n                    if (input.charCodeAt(peg$currPos) === 58) {\n                        s2 = peg$c14;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 !== peg$FAILED) {\n                        s3 = [];\n                        s4 = peg$parse_();\n                        while(s4 !== peg$FAILED){\n                            s3.push(s4);\n                            s4 = peg$parse_();\n                        }\n                        s4 = peg$parseValue();\n                        if (s4 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s0 = peg$f26(s1, s4);\n                        } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseValueNumber() {\n                var s0, s1, s2, s3, s4, s5, s6;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e16);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 45) {\n                    s1 = peg$c15;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 === peg$FAILED) {\n                    s1 = null;\n                }\n                s2 = [];\n                if (peg$r1.test(input.charAt(peg$currPos))) {\n                    s3 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s3 = peg$FAILED;\n                }\n                if (s3 !== peg$FAILED) {\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        if (peg$r1.test(input.charAt(peg$currPos))) {\n                            s3 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s3 = peg$FAILED;\n                        }\n                    }\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    s3 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 46) {\n                        s4 = peg$c1;\n                        peg$currPos++;\n                    } else {\n                        s4 = peg$FAILED;\n                    }\n                    if (s4 !== peg$FAILED) {\n                        s5 = [];\n                        if (peg$r1.test(input.charAt(peg$currPos))) {\n                            s6 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s6 = peg$FAILED;\n                        }\n                        if (s6 !== peg$FAILED) {\n                            while(s6 !== peg$FAILED){\n                                s5.push(s6);\n                                if (peg$r1.test(input.charAt(peg$currPos))) {\n                                    s6 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                } else {\n                                    s6 = peg$FAILED;\n                                }\n                            }\n                        } else {\n                            s5 = peg$FAILED;\n                        }\n                        if (s5 !== peg$FAILED) {\n                            s4 = [\n                                s4,\n                                s5\n                            ];\n                            s3 = s4;\n                        } else {\n                            peg$currPos = s3;\n                            s3 = peg$FAILED;\n                        }\n                    } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 === peg$FAILED) {\n                        s3 = null;\n                    }\n                    peg$savedPos = s0;\n                    s0 = peg$f27();\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueString() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e17);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                    s1 = peg$c16;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parseValueStringChars();\n                    while(s3 !== peg$FAILED){\n                        s2.push(s3);\n                        s3 = peg$parseValueStringChars();\n                    }\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s3 = peg$c16;\n                        peg$currPos++;\n                    } else {\n                        s3 = peg$FAILED;\n                    }\n                    if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f28(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parseValueStringChars() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                if (peg$r2.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                    s0 = peg$parseValueStringEscapes();\n                }\n                return s0;\n            }\n            function peg$parseValueStringEscapes() {\n                var s0, s1, s2, s3;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 92) {\n                    s1 = peg$c17;\n                    peg$currPos++;\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                        s2 = peg$c16;\n                        peg$currPos++;\n                    } else {\n                        s2 = peg$FAILED;\n                    }\n                    if (s2 === peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                            s2 = peg$c17;\n                            peg$currPos++;\n                        } else {\n                            s2 = peg$FAILED;\n                        }\n                        if (s2 === peg$FAILED) {\n                            s2 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 110) {\n                                s3 = peg$c18;\n                                peg$currPos++;\n                            } else {\n                                s3 = peg$FAILED;\n                            }\n                            if (s3 !== peg$FAILED) {\n                                peg$savedPos = s2;\n                                s3 = peg$f29();\n                            }\n                            s2 = s3;\n                            if (s2 === peg$FAILED) {\n                                s2 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 114) {\n                                    s3 = peg$c19;\n                                    peg$currPos++;\n                                } else {\n                                    s3 = peg$FAILED;\n                                }\n                                if (s3 !== peg$FAILED) {\n                                    peg$savedPos = s2;\n                                    s3 = peg$f30();\n                                }\n                                s2 = s3;\n                                if (s2 === peg$FAILED) {\n                                    s2 = peg$currPos;\n                                    if (input.charCodeAt(peg$currPos) === 116) {\n                                        s3 = peg$c20;\n                                        peg$currPos++;\n                                    } else {\n                                        s3 = peg$FAILED;\n                                    }\n                                    if (s3 !== peg$FAILED) {\n                                        peg$savedPos = s2;\n                                        s3 = peg$f31();\n                                    }\n                                    s2 = s3;\n                                }\n                            }\n                        }\n                    }\n                    if (s2 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s0 = peg$f32(s2);\n                    } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                    }\n                } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                }\n                return s0;\n            }\n            function peg$parseIdentifier() {\n                var s0, s1, s2;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e18);\n                peg$silentFails++;\n                s0 = peg$currPos;\n                s1 = [];\n                if (peg$r3.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s2 = peg$FAILED;\n                }\n                if (s2 !== peg$FAILED) {\n                    while(s2 !== peg$FAILED){\n                        s1.push(s2);\n                        if (peg$r3.test(input.charAt(peg$currPos))) {\n                            s2 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                        } else {\n                            s2 = peg$FAILED;\n                        }\n                    }\n                } else {\n                    s1 = peg$FAILED;\n                }\n                if (s1 !== peg$FAILED) {\n                    s0 = input.substring(s0, peg$currPos);\n                } else {\n                    s0 = s1;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            function peg$parse_() {\n                var s0;\n                var rule$expects = function(expected2) {\n                    if (peg$silentFails === 0) peg$expect(expected2);\n                };\n                rule$expects(peg$e19);\n                peg$silentFails++;\n                if (peg$r4.test(input.charAt(peg$currPos))) {\n                    s0 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                } else {\n                    s0 = peg$FAILED;\n                }\n                peg$silentFails--;\n                return s0;\n            }\n            const { Variable: Variable2, Function: Function3 } = options;\n            peg$begin();\n            peg$result = peg$startRuleFunction();\n            if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n                return peg$result;\n            } else {\n                if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n                    peg$expect(peg$endExpectation());\n                }\n                throw peg$buildError();\n            }\n        }\n        module.exports = {\n            SyntaxError: peg$SyntaxError,\n            parse: peg$parse\n        };\n    }\n});\n// node_modules/entities/lib/maps/entities.json\nvar require_entities = __commonJS({\n    \"node_modules/entities/lib/maps/entities.json\" (exports, module) {\n        module.exports = {\n            Aacute: \"\\xc1\",\n            aacute: \"\\xe1\",\n            Abreve: \"Ă\",\n            abreve: \"ă\",\n            ac: \"∾\",\n            acd: \"∿\",\n            acE: \"∾̳\",\n            Acirc: \"\\xc2\",\n            acirc: \"\\xe2\",\n            acute: \"\\xb4\",\n            Acy: \"А\",\n            acy: \"а\",\n            AElig: \"\\xc6\",\n            aelig: \"\\xe6\",\n            af: \"⁡\",\n            Afr: \"\\uD835\\uDD04\",\n            afr: \"\\uD835\\uDD1E\",\n            Agrave: \"\\xc0\",\n            agrave: \"\\xe0\",\n            alefsym: \"ℵ\",\n            aleph: \"ℵ\",\n            Alpha: \"Α\",\n            alpha: \"α\",\n            Amacr: \"Ā\",\n            amacr: \"ā\",\n            amalg: \"⨿\",\n            amp: \"&\",\n            AMP: \"&\",\n            andand: \"⩕\",\n            And: \"⩓\",\n            and: \"∧\",\n            andd: \"⩜\",\n            andslope: \"⩘\",\n            andv: \"⩚\",\n            ang: \"∠\",\n            ange: \"⦤\",\n            angle: \"∠\",\n            angmsdaa: \"⦨\",\n            angmsdab: \"⦩\",\n            angmsdac: \"⦪\",\n            angmsdad: \"⦫\",\n            angmsdae: \"⦬\",\n            angmsdaf: \"⦭\",\n            angmsdag: \"⦮\",\n            angmsdah: \"⦯\",\n            angmsd: \"∡\",\n            angrt: \"∟\",\n            angrtvb: \"⊾\",\n            angrtvbd: \"⦝\",\n            angsph: \"∢\",\n            angst: \"\\xc5\",\n            angzarr: \"⍼\",\n            Aogon: \"Ą\",\n            aogon: \"ą\",\n            Aopf: \"\\uD835\\uDD38\",\n            aopf: \"\\uD835\\uDD52\",\n            apacir: \"⩯\",\n            ap: \"≈\",\n            apE: \"⩰\",\n            ape: \"≊\",\n            apid: \"≋\",\n            apos: \"'\",\n            ApplyFunction: \"⁡\",\n            approx: \"≈\",\n            approxeq: \"≊\",\n            Aring: \"\\xc5\",\n            aring: \"\\xe5\",\n            Ascr: \"\\uD835\\uDC9C\",\n            ascr: \"\\uD835\\uDCB6\",\n            Assign: \"≔\",\n            ast: \"*\",\n            asymp: \"≈\",\n            asympeq: \"≍\",\n            Atilde: \"\\xc3\",\n            atilde: \"\\xe3\",\n            Auml: \"\\xc4\",\n            auml: \"\\xe4\",\n            awconint: \"∳\",\n            awint: \"⨑\",\n            backcong: \"≌\",\n            backepsilon: \"϶\",\n            backprime: \"‵\",\n            backsim: \"∽\",\n            backsimeq: \"⋍\",\n            Backslash: \"∖\",\n            Barv: \"⫧\",\n            barvee: \"⊽\",\n            barwed: \"⌅\",\n            Barwed: \"⌆\",\n            barwedge: \"⌅\",\n            bbrk: \"⎵\",\n            bbrktbrk: \"⎶\",\n            bcong: \"≌\",\n            Bcy: \"Б\",\n            bcy: \"б\",\n            bdquo: \"„\",\n            becaus: \"∵\",\n            because: \"∵\",\n            Because: \"∵\",\n            bemptyv: \"⦰\",\n            bepsi: \"϶\",\n            bernou: \"ℬ\",\n            Bernoullis: \"ℬ\",\n            Beta: \"Β\",\n            beta: \"β\",\n            beth: \"ℶ\",\n            between: \"≬\",\n            Bfr: \"\\uD835\\uDD05\",\n            bfr: \"\\uD835\\uDD1F\",\n            bigcap: \"⋂\",\n            bigcirc: \"◯\",\n            bigcup: \"⋃\",\n            bigodot: \"⨀\",\n            bigoplus: \"⨁\",\n            bigotimes: \"⨂\",\n            bigsqcup: \"⨆\",\n            bigstar: \"★\",\n            bigtriangledown: \"▽\",\n            bigtriangleup: \"△\",\n            biguplus: \"⨄\",\n            bigvee: \"⋁\",\n            bigwedge: \"⋀\",\n            bkarow: \"⤍\",\n            blacklozenge: \"⧫\",\n            blacksquare: \"▪\",\n            blacktriangle: \"▴\",\n            blacktriangledown: \"▾\",\n            blacktriangleleft: \"◂\",\n            blacktriangleright: \"▸\",\n            blank: \"␣\",\n            blk12: \"▒\",\n            blk14: \"░\",\n            blk34: \"▓\",\n            block: \"█\",\n            bne: \"=⃥\",\n            bnequiv: \"≡⃥\",\n            bNot: \"⫭\",\n            bnot: \"⌐\",\n            Bopf: \"\\uD835\\uDD39\",\n            bopf: \"\\uD835\\uDD53\",\n            bot: \"⊥\",\n            bottom: \"⊥\",\n            bowtie: \"⋈\",\n            boxbox: \"⧉\",\n            boxdl: \"┐\",\n            boxdL: \"╕\",\n            boxDl: \"╖\",\n            boxDL: \"╗\",\n            boxdr: \"┌\",\n            boxdR: \"╒\",\n            boxDr: \"╓\",\n            boxDR: \"╔\",\n            boxh: \"─\",\n            boxH: \"═\",\n            boxhd: \"┬\",\n            boxHd: \"╤\",\n            boxhD: \"╥\",\n            boxHD: \"╦\",\n            boxhu: \"┴\",\n            boxHu: \"╧\",\n            boxhU: \"╨\",\n            boxHU: \"╩\",\n            boxminus: \"⊟\",\n            boxplus: \"⊞\",\n            boxtimes: \"⊠\",\n            boxul: \"┘\",\n            boxuL: \"╛\",\n            boxUl: \"╜\",\n            boxUL: \"╝\",\n            boxur: \"└\",\n            boxuR: \"╘\",\n            boxUr: \"╙\",\n            boxUR: \"╚\",\n            boxv: \"│\",\n            boxV: \"║\",\n            boxvh: \"┼\",\n            boxvH: \"╪\",\n            boxVh: \"╫\",\n            boxVH: \"╬\",\n            boxvl: \"┤\",\n            boxvL: \"╡\",\n            boxVl: \"╢\",\n            boxVL: \"╣\",\n            boxvr: \"├\",\n            boxvR: \"╞\",\n            boxVr: \"╟\",\n            boxVR: \"╠\",\n            bprime: \"‵\",\n            breve: \"˘\",\n            Breve: \"˘\",\n            brvbar: \"\\xa6\",\n            bscr: \"\\uD835\\uDCB7\",\n            Bscr: \"ℬ\",\n            bsemi: \"⁏\",\n            bsim: \"∽\",\n            bsime: \"⋍\",\n            bsolb: \"⧅\",\n            bsol: \"\\\\\",\n            bsolhsub: \"⟈\",\n            bull: \"•\",\n            bullet: \"•\",\n            bump: \"≎\",\n            bumpE: \"⪮\",\n            bumpe: \"≏\",\n            Bumpeq: \"≎\",\n            bumpeq: \"≏\",\n            Cacute: \"Ć\",\n            cacute: \"ć\",\n            capand: \"⩄\",\n            capbrcup: \"⩉\",\n            capcap: \"⩋\",\n            cap: \"∩\",\n            Cap: \"⋒\",\n            capcup: \"⩇\",\n            capdot: \"⩀\",\n            CapitalDifferentialD: \"ⅅ\",\n            caps: \"∩︀\",\n            caret: \"⁁\",\n            caron: \"ˇ\",\n            Cayleys: \"ℭ\",\n            ccaps: \"⩍\",\n            Ccaron: \"Č\",\n            ccaron: \"č\",\n            Ccedil: \"\\xc7\",\n            ccedil: \"\\xe7\",\n            Ccirc: \"Ĉ\",\n            ccirc: \"ĉ\",\n            Cconint: \"∰\",\n            ccups: \"⩌\",\n            ccupssm: \"⩐\",\n            Cdot: \"Ċ\",\n            cdot: \"ċ\",\n            cedil: \"\\xb8\",\n            Cedilla: \"\\xb8\",\n            cemptyv: \"⦲\",\n            cent: \"\\xa2\",\n            centerdot: \"\\xb7\",\n            CenterDot: \"\\xb7\",\n            cfr: \"\\uD835\\uDD20\",\n            Cfr: \"ℭ\",\n            CHcy: \"Ч\",\n            chcy: \"ч\",\n            check: \"✓\",\n            checkmark: \"✓\",\n            Chi: \"Χ\",\n            chi: \"χ\",\n            circ: \"ˆ\",\n            circeq: \"≗\",\n            circlearrowleft: \"↺\",\n            circlearrowright: \"↻\",\n            circledast: \"⊛\",\n            circledcirc: \"⊚\",\n            circleddash: \"⊝\",\n            CircleDot: \"⊙\",\n            circledR: \"\\xae\",\n            circledS: \"Ⓢ\",\n            CircleMinus: \"⊖\",\n            CirclePlus: \"⊕\",\n            CircleTimes: \"⊗\",\n            cir: \"○\",\n            cirE: \"⧃\",\n            cire: \"≗\",\n            cirfnint: \"⨐\",\n            cirmid: \"⫯\",\n            cirscir: \"⧂\",\n            ClockwiseContourIntegral: \"∲\",\n            CloseCurlyDoubleQuote: \"”\",\n            CloseCurlyQuote: \"’\",\n            clubs: \"♣\",\n            clubsuit: \"♣\",\n            colon: \":\",\n            Colon: \"∷\",\n            Colone: \"⩴\",\n            colone: \"≔\",\n            coloneq: \"≔\",\n            comma: \",\",\n            commat: \"@\",\n            comp: \"∁\",\n            compfn: \"∘\",\n            complement: \"∁\",\n            complexes: \"ℂ\",\n            cong: \"≅\",\n            congdot: \"⩭\",\n            Congruent: \"≡\",\n            conint: \"∮\",\n            Conint: \"∯\",\n            ContourIntegral: \"∮\",\n            copf: \"\\uD835\\uDD54\",\n            Copf: \"ℂ\",\n            coprod: \"∐\",\n            Coproduct: \"∐\",\n            copy: \"\\xa9\",\n            COPY: \"\\xa9\",\n            copysr: \"℗\",\n            CounterClockwiseContourIntegral: \"∳\",\n            crarr: \"↵\",\n            cross: \"✗\",\n            Cross: \"⨯\",\n            Cscr: \"\\uD835\\uDC9E\",\n            cscr: \"\\uD835\\uDCB8\",\n            csub: \"⫏\",\n            csube: \"⫑\",\n            csup: \"⫐\",\n            csupe: \"⫒\",\n            ctdot: \"⋯\",\n            cudarrl: \"⤸\",\n            cudarrr: \"⤵\",\n            cuepr: \"⋞\",\n            cuesc: \"⋟\",\n            cularr: \"↶\",\n            cularrp: \"⤽\",\n            cupbrcap: \"⩈\",\n            cupcap: \"⩆\",\n            CupCap: \"≍\",\n            cup: \"∪\",\n            Cup: \"⋓\",\n            cupcup: \"⩊\",\n            cupdot: \"⊍\",\n            cupor: \"⩅\",\n            cups: \"∪︀\",\n            curarr: \"↷\",\n            curarrm: \"⤼\",\n            curlyeqprec: \"⋞\",\n            curlyeqsucc: \"⋟\",\n            curlyvee: \"⋎\",\n            curlywedge: \"⋏\",\n            curren: \"\\xa4\",\n            curvearrowleft: \"↶\",\n            curvearrowright: \"↷\",\n            cuvee: \"⋎\",\n            cuwed: \"⋏\",\n            cwconint: \"∲\",\n            cwint: \"∱\",\n            cylcty: \"⌭\",\n            dagger: \"†\",\n            Dagger: \"‡\",\n            daleth: \"ℸ\",\n            darr: \"↓\",\n            Darr: \"↡\",\n            dArr: \"⇓\",\n            dash: \"‐\",\n            Dashv: \"⫤\",\n            dashv: \"⊣\",\n            dbkarow: \"⤏\",\n            dblac: \"˝\",\n            Dcaron: \"Ď\",\n            dcaron: \"ď\",\n            Dcy: \"Д\",\n            dcy: \"д\",\n            ddagger: \"‡\",\n            ddarr: \"⇊\",\n            DD: \"ⅅ\",\n            dd: \"ⅆ\",\n            DDotrahd: \"⤑\",\n            ddotseq: \"⩷\",\n            deg: \"\\xb0\",\n            Del: \"∇\",\n            Delta: \"Δ\",\n            delta: \"δ\",\n            demptyv: \"⦱\",\n            dfisht: \"⥿\",\n            Dfr: \"\\uD835\\uDD07\",\n            dfr: \"\\uD835\\uDD21\",\n            dHar: \"⥥\",\n            dharl: \"⇃\",\n            dharr: \"⇂\",\n            DiacriticalAcute: \"\\xb4\",\n            DiacriticalDot: \"˙\",\n            DiacriticalDoubleAcute: \"˝\",\n            DiacriticalGrave: \"`\",\n            DiacriticalTilde: \"˜\",\n            diam: \"⋄\",\n            diamond: \"⋄\",\n            Diamond: \"⋄\",\n            diamondsuit: \"♦\",\n            diams: \"♦\",\n            die: \"\\xa8\",\n            DifferentialD: \"ⅆ\",\n            digamma: \"ϝ\",\n            disin: \"⋲\",\n            div: \"\\xf7\",\n            divide: \"\\xf7\",\n            divideontimes: \"⋇\",\n            divonx: \"⋇\",\n            DJcy: \"Ђ\",\n            djcy: \"ђ\",\n            dlcorn: \"⌞\",\n            dlcrop: \"⌍\",\n            dollar: \"$\",\n            Dopf: \"\\uD835\\uDD3B\",\n            dopf: \"\\uD835\\uDD55\",\n            Dot: \"\\xa8\",\n            dot: \"˙\",\n            DotDot: \"⃜\",\n            doteq: \"≐\",\n            doteqdot: \"≑\",\n            DotEqual: \"≐\",\n            dotminus: \"∸\",\n            dotplus: \"∔\",\n            dotsquare: \"⊡\",\n            doublebarwedge: \"⌆\",\n            DoubleContourIntegral: \"∯\",\n            DoubleDot: \"\\xa8\",\n            DoubleDownArrow: \"⇓\",\n            DoubleLeftArrow: \"⇐\",\n            DoubleLeftRightArrow: \"⇔\",\n            DoubleLeftTee: \"⫤\",\n            DoubleLongLeftArrow: \"⟸\",\n            DoubleLongLeftRightArrow: \"⟺\",\n            DoubleLongRightArrow: \"⟹\",\n            DoubleRightArrow: \"⇒\",\n            DoubleRightTee: \"⊨\",\n            DoubleUpArrow: \"⇑\",\n            DoubleUpDownArrow: \"⇕\",\n            DoubleVerticalBar: \"∥\",\n            DownArrowBar: \"⤓\",\n            downarrow: \"↓\",\n            DownArrow: \"↓\",\n            Downarrow: \"⇓\",\n            DownArrowUpArrow: \"⇵\",\n            DownBreve: \"̑\",\n            downdownarrows: \"⇊\",\n            downharpoonleft: \"⇃\",\n            downharpoonright: \"⇂\",\n            DownLeftRightVector: \"⥐\",\n            DownLeftTeeVector: \"⥞\",\n            DownLeftVectorBar: \"⥖\",\n            DownLeftVector: \"↽\",\n            DownRightTeeVector: \"⥟\",\n            DownRightVectorBar: \"⥗\",\n            DownRightVector: \"⇁\",\n            DownTeeArrow: \"↧\",\n            DownTee: \"⊤\",\n            drbkarow: \"⤐\",\n            drcorn: \"⌟\",\n            drcrop: \"⌌\",\n            Dscr: \"\\uD835\\uDC9F\",\n            dscr: \"\\uD835\\uDCB9\",\n            DScy: \"Ѕ\",\n            dscy: \"ѕ\",\n            dsol: \"⧶\",\n            Dstrok: \"Đ\",\n            dstrok: \"đ\",\n            dtdot: \"⋱\",\n            dtri: \"▿\",\n            dtrif: \"▾\",\n            duarr: \"⇵\",\n            duhar: \"⥯\",\n            dwangle: \"⦦\",\n            DZcy: \"Џ\",\n            dzcy: \"џ\",\n            dzigrarr: \"⟿\",\n            Eacute: \"\\xc9\",\n            eacute: \"\\xe9\",\n            easter: \"⩮\",\n            Ecaron: \"Ě\",\n            ecaron: \"ě\",\n            Ecirc: \"\\xca\",\n            ecirc: \"\\xea\",\n            ecir: \"≖\",\n            ecolon: \"≕\",\n            Ecy: \"Э\",\n            ecy: \"э\",\n            eDDot: \"⩷\",\n            Edot: \"Ė\",\n            edot: \"ė\",\n            eDot: \"≑\",\n            ee: \"ⅇ\",\n            efDot: \"≒\",\n            Efr: \"\\uD835\\uDD08\",\n            efr: \"\\uD835\\uDD22\",\n            eg: \"⪚\",\n            Egrave: \"\\xc8\",\n            egrave: \"\\xe8\",\n            egs: \"⪖\",\n            egsdot: \"⪘\",\n            el: \"⪙\",\n            Element: \"∈\",\n            elinters: \"⏧\",\n            ell: \"ℓ\",\n            els: \"⪕\",\n            elsdot: \"⪗\",\n            Emacr: \"Ē\",\n            emacr: \"ē\",\n            empty: \"∅\",\n            emptyset: \"∅\",\n            EmptySmallSquare: \"◻\",\n            emptyv: \"∅\",\n            EmptyVerySmallSquare: \"▫\",\n            emsp13: \" \",\n            emsp14: \" \",\n            emsp: \" \",\n            ENG: \"Ŋ\",\n            eng: \"ŋ\",\n            ensp: \" \",\n            Eogon: \"Ę\",\n            eogon: \"ę\",\n            Eopf: \"\\uD835\\uDD3C\",\n            eopf: \"\\uD835\\uDD56\",\n            epar: \"⋕\",\n            eparsl: \"⧣\",\n            eplus: \"⩱\",\n            epsi: \"ε\",\n            Epsilon: \"Ε\",\n            epsilon: \"ε\",\n            epsiv: \"ϵ\",\n            eqcirc: \"≖\",\n            eqcolon: \"≕\",\n            eqsim: \"≂\",\n            eqslantgtr: \"⪖\",\n            eqslantless: \"⪕\",\n            Equal: \"⩵\",\n            equals: \"=\",\n            EqualTilde: \"≂\",\n            equest: \"≟\",\n            Equilibrium: \"⇌\",\n            equiv: \"≡\",\n            equivDD: \"⩸\",\n            eqvparsl: \"⧥\",\n            erarr: \"⥱\",\n            erDot: \"≓\",\n            escr: \"ℯ\",\n            Escr: \"ℰ\",\n            esdot: \"≐\",\n            Esim: \"⩳\",\n            esim: \"≂\",\n            Eta: \"Η\",\n            eta: \"η\",\n            ETH: \"\\xd0\",\n            eth: \"\\xf0\",\n            Euml: \"\\xcb\",\n            euml: \"\\xeb\",\n            euro: \"€\",\n            excl: \"!\",\n            exist: \"∃\",\n            Exists: \"∃\",\n            expectation: \"ℰ\",\n            exponentiale: \"ⅇ\",\n            ExponentialE: \"ⅇ\",\n            fallingdotseq: \"≒\",\n            Fcy: \"Ф\",\n            fcy: \"ф\",\n            female: \"♀\",\n            ffilig: \"ﬃ\",\n            fflig: \"ﬀ\",\n            ffllig: \"ﬄ\",\n            Ffr: \"\\uD835\\uDD09\",\n            ffr: \"\\uD835\\uDD23\",\n            filig: \"ﬁ\",\n            FilledSmallSquare: \"◼\",\n            FilledVerySmallSquare: \"▪\",\n            fjlig: \"fj\",\n            flat: \"♭\",\n            fllig: \"ﬂ\",\n            fltns: \"▱\",\n            fnof: \"ƒ\",\n            Fopf: \"\\uD835\\uDD3D\",\n            fopf: \"\\uD835\\uDD57\",\n            forall: \"∀\",\n            ForAll: \"∀\",\n            fork: \"⋔\",\n            forkv: \"⫙\",\n            Fouriertrf: \"ℱ\",\n            fpartint: \"⨍\",\n            frac12: \"\\xbd\",\n            frac13: \"⅓\",\n            frac14: \"\\xbc\",\n            frac15: \"⅕\",\n            frac16: \"⅙\",\n            frac18: \"⅛\",\n            frac23: \"⅔\",\n            frac25: \"⅖\",\n            frac34: \"\\xbe\",\n            frac35: \"⅗\",\n            frac38: \"⅜\",\n            frac45: \"⅘\",\n            frac56: \"⅚\",\n            frac58: \"⅝\",\n            frac78: \"⅞\",\n            frasl: \"⁄\",\n            frown: \"⌢\",\n            fscr: \"\\uD835\\uDCBB\",\n            Fscr: \"ℱ\",\n            gacute: \"ǵ\",\n            Gamma: \"Γ\",\n            gamma: \"γ\",\n            Gammad: \"Ϝ\",\n            gammad: \"ϝ\",\n            gap: \"⪆\",\n            Gbreve: \"Ğ\",\n            gbreve: \"ğ\",\n            Gcedil: \"Ģ\",\n            Gcirc: \"Ĝ\",\n            gcirc: \"ĝ\",\n            Gcy: \"Г\",\n            gcy: \"г\",\n            Gdot: \"Ġ\",\n            gdot: \"ġ\",\n            ge: \"≥\",\n            gE: \"≧\",\n            gEl: \"⪌\",\n            gel: \"⋛\",\n            geq: \"≥\",\n            geqq: \"≧\",\n            geqslant: \"⩾\",\n            gescc: \"⪩\",\n            ges: \"⩾\",\n            gesdot: \"⪀\",\n            gesdoto: \"⪂\",\n            gesdotol: \"⪄\",\n            gesl: \"⋛︀\",\n            gesles: \"⪔\",\n            Gfr: \"\\uD835\\uDD0A\",\n            gfr: \"\\uD835\\uDD24\",\n            gg: \"≫\",\n            Gg: \"⋙\",\n            ggg: \"⋙\",\n            gimel: \"ℷ\",\n            GJcy: \"Ѓ\",\n            gjcy: \"ѓ\",\n            gla: \"⪥\",\n            gl: \"≷\",\n            glE: \"⪒\",\n            glj: \"⪤\",\n            gnap: \"⪊\",\n            gnapprox: \"⪊\",\n            gne: \"⪈\",\n            gnE: \"≩\",\n            gneq: \"⪈\",\n            gneqq: \"≩\",\n            gnsim: \"⋧\",\n            Gopf: \"\\uD835\\uDD3E\",\n            gopf: \"\\uD835\\uDD58\",\n            grave: \"`\",\n            GreaterEqual: \"≥\",\n            GreaterEqualLess: \"⋛\",\n            GreaterFullEqual: \"≧\",\n            GreaterGreater: \"⪢\",\n            GreaterLess: \"≷\",\n            GreaterSlantEqual: \"⩾\",\n            GreaterTilde: \"≳\",\n            Gscr: \"\\uD835\\uDCA2\",\n            gscr: \"ℊ\",\n            gsim: \"≳\",\n            gsime: \"⪎\",\n            gsiml: \"⪐\",\n            gtcc: \"⪧\",\n            gtcir: \"⩺\",\n            gt: \">\",\n            GT: \">\",\n            Gt: \"≫\",\n            gtdot: \"⋗\",\n            gtlPar: \"⦕\",\n            gtquest: \"⩼\",\n            gtrapprox: \"⪆\",\n            gtrarr: \"⥸\",\n            gtrdot: \"⋗\",\n            gtreqless: \"⋛\",\n            gtreqqless: \"⪌\",\n            gtrless: \"≷\",\n            gtrsim: \"≳\",\n            gvertneqq: \"≩︀\",\n            gvnE: \"≩︀\",\n            Hacek: \"ˇ\",\n            hairsp: \" \",\n            half: \"\\xbd\",\n            hamilt: \"ℋ\",\n            HARDcy: \"Ъ\",\n            hardcy: \"ъ\",\n            harrcir: \"⥈\",\n            harr: \"↔\",\n            hArr: \"⇔\",\n            harrw: \"↭\",\n            Hat: \"^\",\n            hbar: \"ℏ\",\n            Hcirc: \"Ĥ\",\n            hcirc: \"ĥ\",\n            hearts: \"♥\",\n            heartsuit: \"♥\",\n            hellip: \"…\",\n            hercon: \"⊹\",\n            hfr: \"\\uD835\\uDD25\",\n            Hfr: \"ℌ\",\n            HilbertSpace: \"ℋ\",\n            hksearow: \"⤥\",\n            hkswarow: \"⤦\",\n            hoarr: \"⇿\",\n            homtht: \"∻\",\n            hookleftarrow: \"↩\",\n            hookrightarrow: \"↪\",\n            hopf: \"\\uD835\\uDD59\",\n            Hopf: \"ℍ\",\n            horbar: \"―\",\n            HorizontalLine: \"─\",\n            hscr: \"\\uD835\\uDCBD\",\n            Hscr: \"ℋ\",\n            hslash: \"ℏ\",\n            Hstrok: \"Ħ\",\n            hstrok: \"ħ\",\n            HumpDownHump: \"≎\",\n            HumpEqual: \"≏\",\n            hybull: \"⁃\",\n            hyphen: \"‐\",\n            Iacute: \"\\xcd\",\n            iacute: \"\\xed\",\n            ic: \"⁣\",\n            Icirc: \"\\xce\",\n            icirc: \"\\xee\",\n            Icy: \"И\",\n            icy: \"и\",\n            Idot: \"İ\",\n            IEcy: \"Е\",\n            iecy: \"е\",\n            iexcl: \"\\xa1\",\n            iff: \"⇔\",\n            ifr: \"\\uD835\\uDD26\",\n            Ifr: \"ℑ\",\n            Igrave: \"\\xcc\",\n            igrave: \"\\xec\",\n            ii: \"ⅈ\",\n            iiiint: \"⨌\",\n            iiint: \"∭\",\n            iinfin: \"⧜\",\n            iiota: \"℩\",\n            IJlig: \"Ĳ\",\n            ijlig: \"ĳ\",\n            Imacr: \"Ī\",\n            imacr: \"ī\",\n            image: \"ℑ\",\n            ImaginaryI: \"ⅈ\",\n            imagline: \"ℐ\",\n            imagpart: \"ℑ\",\n            imath: \"ı\",\n            Im: \"ℑ\",\n            imof: \"⊷\",\n            imped: \"Ƶ\",\n            Implies: \"⇒\",\n            incare: \"℅\",\n            in: \"∈\",\n            infin: \"∞\",\n            infintie: \"⧝\",\n            inodot: \"ı\",\n            intcal: \"⊺\",\n            int: \"∫\",\n            Int: \"∬\",\n            integers: \"ℤ\",\n            Integral: \"∫\",\n            intercal: \"⊺\",\n            Intersection: \"⋂\",\n            intlarhk: \"⨗\",\n            intprod: \"⨼\",\n            InvisibleComma: \"⁣\",\n            InvisibleTimes: \"⁢\",\n            IOcy: \"Ё\",\n            iocy: \"ё\",\n            Iogon: \"Į\",\n            iogon: \"į\",\n            Iopf: \"\\uD835\\uDD40\",\n            iopf: \"\\uD835\\uDD5A\",\n            Iota: \"Ι\",\n            iota: \"ι\",\n            iprod: \"⨼\",\n            iquest: \"\\xbf\",\n            iscr: \"\\uD835\\uDCBE\",\n            Iscr: \"ℐ\",\n            isin: \"∈\",\n            isindot: \"⋵\",\n            isinE: \"⋹\",\n            isins: \"⋴\",\n            isinsv: \"⋳\",\n            isinv: \"∈\",\n            it: \"⁢\",\n            Itilde: \"Ĩ\",\n            itilde: \"ĩ\",\n            Iukcy: \"І\",\n            iukcy: \"і\",\n            Iuml: \"\\xcf\",\n            iuml: \"\\xef\",\n            Jcirc: \"Ĵ\",\n            jcirc: \"ĵ\",\n            Jcy: \"Й\",\n            jcy: \"й\",\n            Jfr: \"\\uD835\\uDD0D\",\n            jfr: \"\\uD835\\uDD27\",\n            jmath: \"ȷ\",\n            Jopf: \"\\uD835\\uDD41\",\n            jopf: \"\\uD835\\uDD5B\",\n            Jscr: \"\\uD835\\uDCA5\",\n            jscr: \"\\uD835\\uDCBF\",\n            Jsercy: \"Ј\",\n            jsercy: \"ј\",\n            Jukcy: \"Є\",\n            jukcy: \"є\",\n            Kappa: \"Κ\",\n            kappa: \"κ\",\n            kappav: \"ϰ\",\n            Kcedil: \"Ķ\",\n            kcedil: \"ķ\",\n            Kcy: \"К\",\n            kcy: \"к\",\n            Kfr: \"\\uD835\\uDD0E\",\n            kfr: \"\\uD835\\uDD28\",\n            kgreen: \"ĸ\",\n            KHcy: \"Х\",\n            khcy: \"х\",\n            KJcy: \"Ќ\",\n            kjcy: \"ќ\",\n            Kopf: \"\\uD835\\uDD42\",\n            kopf: \"\\uD835\\uDD5C\",\n            Kscr: \"\\uD835\\uDCA6\",\n            kscr: \"\\uD835\\uDCC0\",\n            lAarr: \"⇚\",\n            Lacute: \"Ĺ\",\n            lacute: \"ĺ\",\n            laemptyv: \"⦴\",\n            lagran: \"ℒ\",\n            Lambda: \"Λ\",\n            lambda: \"λ\",\n            lang: \"⟨\",\n            Lang: \"⟪\",\n            langd: \"⦑\",\n            langle: \"⟨\",\n            lap: \"⪅\",\n            Laplacetrf: \"ℒ\",\n            laquo: \"\\xab\",\n            larrb: \"⇤\",\n            larrbfs: \"⤟\",\n            larr: \"←\",\n            Larr: \"↞\",\n            lArr: \"⇐\",\n            larrfs: \"⤝\",\n            larrhk: \"↩\",\n            larrlp: \"↫\",\n            larrpl: \"⤹\",\n            larrsim: \"⥳\",\n            larrtl: \"↢\",\n            latail: \"⤙\",\n            lAtail: \"⤛\",\n            lat: \"⪫\",\n            late: \"⪭\",\n            lates: \"⪭︀\",\n            lbarr: \"⤌\",\n            lBarr: \"⤎\",\n            lbbrk: \"❲\",\n            lbrace: \"{\",\n            lbrack: \"[\",\n            lbrke: \"⦋\",\n            lbrksld: \"⦏\",\n            lbrkslu: \"⦍\",\n            Lcaron: \"Ľ\",\n            lcaron: \"ľ\",\n            Lcedil: \"Ļ\",\n            lcedil: \"ļ\",\n            lceil: \"⌈\",\n            lcub: \"{\",\n            Lcy: \"Л\",\n            lcy: \"л\",\n            ldca: \"⤶\",\n            ldquo: \"“\",\n            ldquor: \"„\",\n            ldrdhar: \"⥧\",\n            ldrushar: \"⥋\",\n            ldsh: \"↲\",\n            le: \"≤\",\n            lE: \"≦\",\n            LeftAngleBracket: \"⟨\",\n            LeftArrowBar: \"⇤\",\n            leftarrow: \"←\",\n            LeftArrow: \"←\",\n            Leftarrow: \"⇐\",\n            LeftArrowRightArrow: \"⇆\",\n            leftarrowtail: \"↢\",\n            LeftCeiling: \"⌈\",\n            LeftDoubleBracket: \"⟦\",\n            LeftDownTeeVector: \"⥡\",\n            LeftDownVectorBar: \"⥙\",\n            LeftDownVector: \"⇃\",\n            LeftFloor: \"⌊\",\n            leftharpoondown: \"↽\",\n            leftharpoonup: \"↼\",\n            leftleftarrows: \"⇇\",\n            leftrightarrow: \"↔\",\n            LeftRightArrow: \"↔\",\n            Leftrightarrow: \"⇔\",\n            leftrightarrows: \"⇆\",\n            leftrightharpoons: \"⇋\",\n            leftrightsquigarrow: \"↭\",\n            LeftRightVector: \"⥎\",\n            LeftTeeArrow: \"↤\",\n            LeftTee: \"⊣\",\n            LeftTeeVector: \"⥚\",\n            leftthreetimes: \"⋋\",\n            LeftTriangleBar: \"⧏\",\n            LeftTriangle: \"⊲\",\n            LeftTriangleEqual: \"⊴\",\n            LeftUpDownVector: \"⥑\",\n            LeftUpTeeVector: \"⥠\",\n            LeftUpVectorBar: \"⥘\",\n            LeftUpVector: \"↿\",\n            LeftVectorBar: \"⥒\",\n            LeftVector: \"↼\",\n            lEg: \"⪋\",\n            leg: \"⋚\",\n            leq: \"≤\",\n            leqq: \"≦\",\n            leqslant: \"⩽\",\n            lescc: \"⪨\",\n            les: \"⩽\",\n            lesdot: \"⩿\",\n            lesdoto: \"⪁\",\n            lesdotor: \"⪃\",\n            lesg: \"⋚︀\",\n            lesges: \"⪓\",\n            lessapprox: \"⪅\",\n            lessdot: \"⋖\",\n            lesseqgtr: \"⋚\",\n            lesseqqgtr: \"⪋\",\n            LessEqualGreater: \"⋚\",\n            LessFullEqual: \"≦\",\n            LessGreater: \"≶\",\n            lessgtr: \"≶\",\n            LessLess: \"⪡\",\n            lesssim: \"≲\",\n            LessSlantEqual: \"⩽\",\n            LessTilde: \"≲\",\n            lfisht: \"⥼\",\n            lfloor: \"⌊\",\n            Lfr: \"\\uD835\\uDD0F\",\n            lfr: \"\\uD835\\uDD29\",\n            lg: \"≶\",\n            lgE: \"⪑\",\n            lHar: \"⥢\",\n            lhard: \"↽\",\n            lharu: \"↼\",\n            lharul: \"⥪\",\n            lhblk: \"▄\",\n            LJcy: \"Љ\",\n            ljcy: \"љ\",\n            llarr: \"⇇\",\n            ll: \"≪\",\n            Ll: \"⋘\",\n            llcorner: \"⌞\",\n            Lleftarrow: \"⇚\",\n            llhard: \"⥫\",\n            lltri: \"◺\",\n            Lmidot: \"Ŀ\",\n            lmidot: \"ŀ\",\n            lmoustache: \"⎰\",\n            lmoust: \"⎰\",\n            lnap: \"⪉\",\n            lnapprox: \"⪉\",\n            lne: \"⪇\",\n            lnE: \"≨\",\n            lneq: \"⪇\",\n            lneqq: \"≨\",\n            lnsim: \"⋦\",\n            loang: \"⟬\",\n            loarr: \"⇽\",\n            lobrk: \"⟦\",\n            longleftarrow: \"⟵\",\n            LongLeftArrow: \"⟵\",\n            Longleftarrow: \"⟸\",\n            longleftrightarrow: \"⟷\",\n            LongLeftRightArrow: \"⟷\",\n            Longleftrightarrow: \"⟺\",\n            longmapsto: \"⟼\",\n            longrightarrow: \"⟶\",\n            LongRightArrow: \"⟶\",\n            Longrightarrow: \"⟹\",\n            looparrowleft: \"↫\",\n            looparrowright: \"↬\",\n            lopar: \"⦅\",\n            Lopf: \"\\uD835\\uDD43\",\n            lopf: \"\\uD835\\uDD5D\",\n            loplus: \"⨭\",\n            lotimes: \"⨴\",\n            lowast: \"∗\",\n            lowbar: \"_\",\n            LowerLeftArrow: \"↙\",\n            LowerRightArrow: \"↘\",\n            loz: \"◊\",\n            lozenge: \"◊\",\n            lozf: \"⧫\",\n            lpar: \"(\",\n            lparlt: \"⦓\",\n            lrarr: \"⇆\",\n            lrcorner: \"⌟\",\n            lrhar: \"⇋\",\n            lrhard: \"⥭\",\n            lrm: \"‎\",\n            lrtri: \"⊿\",\n            lsaquo: \"‹\",\n            lscr: \"\\uD835\\uDCC1\",\n            Lscr: \"ℒ\",\n            lsh: \"↰\",\n            Lsh: \"↰\",\n            lsim: \"≲\",\n            lsime: \"⪍\",\n            lsimg: \"⪏\",\n            lsqb: \"[\",\n            lsquo: \"‘\",\n            lsquor: \"‚\",\n            Lstrok: \"Ł\",\n            lstrok: \"ł\",\n            ltcc: \"⪦\",\n            ltcir: \"⩹\",\n            lt: \"<\",\n            LT: \"<\",\n            Lt: \"≪\",\n            ltdot: \"⋖\",\n            lthree: \"⋋\",\n            ltimes: \"⋉\",\n            ltlarr: \"⥶\",\n            ltquest: \"⩻\",\n            ltri: \"◃\",\n            ltrie: \"⊴\",\n            ltrif: \"◂\",\n            ltrPar: \"⦖\",\n            lurdshar: \"⥊\",\n            luruhar: \"⥦\",\n            lvertneqq: \"≨︀\",\n            lvnE: \"≨︀\",\n            macr: \"\\xaf\",\n            male: \"♂\",\n            malt: \"✠\",\n            maltese: \"✠\",\n            Map: \"⤅\",\n            map: \"↦\",\n            mapsto: \"↦\",\n            mapstodown: \"↧\",\n            mapstoleft: \"↤\",\n            mapstoup: \"↥\",\n            marker: \"▮\",\n            mcomma: \"⨩\",\n            Mcy: \"М\",\n            mcy: \"м\",\n            mdash: \"—\",\n            mDDot: \"∺\",\n            measuredangle: \"∡\",\n            MediumSpace: \" \",\n            Mellintrf: \"ℳ\",\n            Mfr: \"\\uD835\\uDD10\",\n            mfr: \"\\uD835\\uDD2A\",\n            mho: \"℧\",\n            micro: \"\\xb5\",\n            midast: \"*\",\n            midcir: \"⫰\",\n            mid: \"∣\",\n            middot: \"\\xb7\",\n            minusb: \"⊟\",\n            minus: \"−\",\n            minusd: \"∸\",\n            minusdu: \"⨪\",\n            MinusPlus: \"∓\",\n            mlcp: \"⫛\",\n            mldr: \"…\",\n            mnplus: \"∓\",\n            models: \"⊧\",\n            Mopf: \"\\uD835\\uDD44\",\n            mopf: \"\\uD835\\uDD5E\",\n            mp: \"∓\",\n            mscr: \"\\uD835\\uDCC2\",\n            Mscr: \"ℳ\",\n            mstpos: \"∾\",\n            Mu: \"Μ\",\n            mu: \"μ\",\n            multimap: \"⊸\",\n            mumap: \"⊸\",\n            nabla: \"∇\",\n            Nacute: \"Ń\",\n            nacute: \"ń\",\n            nang: \"∠⃒\",\n            nap: \"≉\",\n            napE: \"⩰̸\",\n            napid: \"≋̸\",\n            napos: \"ŉ\",\n            napprox: \"≉\",\n            natural: \"♮\",\n            naturals: \"ℕ\",\n            natur: \"♮\",\n            nbsp: \"\\xa0\",\n            nbump: \"≎̸\",\n            nbumpe: \"≏̸\",\n            ncap: \"⩃\",\n            Ncaron: \"Ň\",\n            ncaron: \"ň\",\n            Ncedil: \"Ņ\",\n            ncedil: \"ņ\",\n            ncong: \"≇\",\n            ncongdot: \"⩭̸\",\n            ncup: \"⩂\",\n            Ncy: \"Н\",\n            ncy: \"н\",\n            ndash: \"–\",\n            nearhk: \"⤤\",\n            nearr: \"↗\",\n            neArr: \"⇗\",\n            nearrow: \"↗\",\n            ne: \"≠\",\n            nedot: \"≐̸\",\n            NegativeMediumSpace: \"​\",\n            NegativeThickSpace: \"​\",\n            NegativeThinSpace: \"​\",\n            NegativeVeryThinSpace: \"​\",\n            nequiv: \"≢\",\n            nesear: \"⤨\",\n            nesim: \"≂̸\",\n            NestedGreaterGreater: \"≫\",\n            NestedLessLess: \"≪\",\n            NewLine: \"\\n\",\n            nexist: \"∄\",\n            nexists: \"∄\",\n            Nfr: \"\\uD835\\uDD11\",\n            nfr: \"\\uD835\\uDD2B\",\n            ngE: \"≧̸\",\n            nge: \"≱\",\n            ngeq: \"≱\",\n            ngeqq: \"≧̸\",\n            ngeqslant: \"⩾̸\",\n            nges: \"⩾̸\",\n            nGg: \"⋙̸\",\n            ngsim: \"≵\",\n            nGt: \"≫⃒\",\n            ngt: \"≯\",\n            ngtr: \"≯\",\n            nGtv: \"≫̸\",\n            nharr: \"↮\",\n            nhArr: \"⇎\",\n            nhpar: \"⫲\",\n            ni: \"∋\",\n            nis: \"⋼\",\n            nisd: \"⋺\",\n            niv: \"∋\",\n            NJcy: \"Њ\",\n            njcy: \"њ\",\n            nlarr: \"↚\",\n            nlArr: \"⇍\",\n            nldr: \"‥\",\n            nlE: \"≦̸\",\n            nle: \"≰\",\n            nleftarrow: \"↚\",\n            nLeftarrow: \"⇍\",\n            nleftrightarrow: \"↮\",\n            nLeftrightarrow: \"⇎\",\n            nleq: \"≰\",\n            nleqq: \"≦̸\",\n            nleqslant: \"⩽̸\",\n            nles: \"⩽̸\",\n            nless: \"≮\",\n            nLl: \"⋘̸\",\n            nlsim: \"≴\",\n            nLt: \"≪⃒\",\n            nlt: \"≮\",\n            nltri: \"⋪\",\n            nltrie: \"⋬\",\n            nLtv: \"≪̸\",\n            nmid: \"∤\",\n            NoBreak: \"⁠\",\n            NonBreakingSpace: \"\\xa0\",\n            nopf: \"\\uD835\\uDD5F\",\n            Nopf: \"ℕ\",\n            Not: \"⫬\",\n            not: \"\\xac\",\n            NotCongruent: \"≢\",\n            NotCupCap: \"≭\",\n            NotDoubleVerticalBar: \"∦\",\n            NotElement: \"∉\",\n            NotEqual: \"≠\",\n            NotEqualTilde: \"≂̸\",\n            NotExists: \"∄\",\n            NotGreater: \"≯\",\n            NotGreaterEqual: \"≱\",\n            NotGreaterFullEqual: \"≧̸\",\n            NotGreaterGreater: \"≫̸\",\n            NotGreaterLess: \"≹\",\n            NotGreaterSlantEqual: \"⩾̸\",\n            NotGreaterTilde: \"≵\",\n            NotHumpDownHump: \"≎̸\",\n            NotHumpEqual: \"≏̸\",\n            notin: \"∉\",\n            notindot: \"⋵̸\",\n            notinE: \"⋹̸\",\n            notinva: \"∉\",\n            notinvb: \"⋷\",\n            notinvc: \"⋶\",\n            NotLeftTriangleBar: \"⧏̸\",\n            NotLeftTriangle: \"⋪\",\n            NotLeftTriangleEqual: \"⋬\",\n            NotLess: \"≮\",\n            NotLessEqual: \"≰\",\n            NotLessGreater: \"≸\",\n            NotLessLess: \"≪̸\",\n            NotLessSlantEqual: \"⩽̸\",\n            NotLessTilde: \"≴\",\n            NotNestedGreaterGreater: \"⪢̸\",\n            NotNestedLessLess: \"⪡̸\",\n            notni: \"∌\",\n            notniva: \"∌\",\n            notnivb: \"⋾\",\n            notnivc: \"⋽\",\n            NotPrecedes: \"⊀\",\n            NotPrecedesEqual: \"⪯̸\",\n            NotPrecedesSlantEqual: \"⋠\",\n            NotReverseElement: \"∌\",\n            NotRightTriangleBar: \"⧐̸\",\n            NotRightTriangle: \"⋫\",\n            NotRightTriangleEqual: \"⋭\",\n            NotSquareSubset: \"⊏̸\",\n            NotSquareSubsetEqual: \"⋢\",\n            NotSquareSuperset: \"⊐̸\",\n            NotSquareSupersetEqual: \"⋣\",\n            NotSubset: \"⊂⃒\",\n            NotSubsetEqual: \"⊈\",\n            NotSucceeds: \"⊁\",\n            NotSucceedsEqual: \"⪰̸\",\n            NotSucceedsSlantEqual: \"⋡\",\n            NotSucceedsTilde: \"≿̸\",\n            NotSuperset: \"⊃⃒\",\n            NotSupersetEqual: \"⊉\",\n            NotTilde: \"≁\",\n            NotTildeEqual: \"≄\",\n            NotTildeFullEqual: \"≇\",\n            NotTildeTilde: \"≉\",\n            NotVerticalBar: \"∤\",\n            nparallel: \"∦\",\n            npar: \"∦\",\n            nparsl: \"⫽⃥\",\n            npart: \"∂̸\",\n            npolint: \"⨔\",\n            npr: \"⊀\",\n            nprcue: \"⋠\",\n            nprec: \"⊀\",\n            npreceq: \"⪯̸\",\n            npre: \"⪯̸\",\n            nrarrc: \"⤳̸\",\n            nrarr: \"↛\",\n            nrArr: \"⇏\",\n            nrarrw: \"↝̸\",\n            nrightarrow: \"↛\",\n            nRightarrow: \"⇏\",\n            nrtri: \"⋫\",\n            nrtrie: \"⋭\",\n            nsc: \"⊁\",\n            nsccue: \"⋡\",\n            nsce: \"⪰̸\",\n            Nscr: \"\\uD835\\uDCA9\",\n            nscr: \"\\uD835\\uDCC3\",\n            nshortmid: \"∤\",\n            nshortparallel: \"∦\",\n            nsim: \"≁\",\n            nsime: \"≄\",\n            nsimeq: \"≄\",\n            nsmid: \"∤\",\n            nspar: \"∦\",\n            nsqsube: \"⋢\",\n            nsqsupe: \"⋣\",\n            nsub: \"⊄\",\n            nsubE: \"⫅̸\",\n            nsube: \"⊈\",\n            nsubset: \"⊂⃒\",\n            nsubseteq: \"⊈\",\n            nsubseteqq: \"⫅̸\",\n            nsucc: \"⊁\",\n            nsucceq: \"⪰̸\",\n            nsup: \"⊅\",\n            nsupE: \"⫆̸\",\n            nsupe: \"⊉\",\n            nsupset: \"⊃⃒\",\n            nsupseteq: \"⊉\",\n            nsupseteqq: \"⫆̸\",\n            ntgl: \"≹\",\n            Ntilde: \"\\xd1\",\n            ntilde: \"\\xf1\",\n            ntlg: \"≸\",\n            ntriangleleft: \"⋪\",\n            ntrianglelefteq: \"⋬\",\n            ntriangleright: \"⋫\",\n            ntrianglerighteq: \"⋭\",\n            Nu: \"Ν\",\n            nu: \"ν\",\n            num: \"#\",\n            numero: \"№\",\n            numsp: \" \",\n            nvap: \"≍⃒\",\n            nvdash: \"⊬\",\n            nvDash: \"⊭\",\n            nVdash: \"⊮\",\n            nVDash: \"⊯\",\n            nvge: \"≥⃒\",\n            nvgt: \">⃒\",\n            nvHarr: \"⤄\",\n            nvinfin: \"⧞\",\n            nvlArr: \"⤂\",\n            nvle: \"≤⃒\",\n            nvlt: \"<⃒\",\n            nvltrie: \"⊴⃒\",\n            nvrArr: \"⤃\",\n            nvrtrie: \"⊵⃒\",\n            nvsim: \"∼⃒\",\n            nwarhk: \"⤣\",\n            nwarr: \"↖\",\n            nwArr: \"⇖\",\n            nwarrow: \"↖\",\n            nwnear: \"⤧\",\n            Oacute: \"\\xd3\",\n            oacute: \"\\xf3\",\n            oast: \"⊛\",\n            Ocirc: \"\\xd4\",\n            ocirc: \"\\xf4\",\n            ocir: \"⊚\",\n            Ocy: \"О\",\n            ocy: \"о\",\n            odash: \"⊝\",\n            Odblac: \"Ő\",\n            odblac: \"ő\",\n            odiv: \"⨸\",\n            odot: \"⊙\",\n            odsold: \"⦼\",\n            OElig: \"Œ\",\n            oelig: \"œ\",\n            ofcir: \"⦿\",\n            Ofr: \"\\uD835\\uDD12\",\n            ofr: \"\\uD835\\uDD2C\",\n            ogon: \"˛\",\n            Ograve: \"\\xd2\",\n            ograve: \"\\xf2\",\n            ogt: \"⧁\",\n            ohbar: \"⦵\",\n            ohm: \"Ω\",\n            oint: \"∮\",\n            olarr: \"↺\",\n            olcir: \"⦾\",\n            olcross: \"⦻\",\n            oline: \"‾\",\n            olt: \"⧀\",\n            Omacr: \"Ō\",\n            omacr: \"ō\",\n            Omega: \"Ω\",\n            omega: \"ω\",\n            Omicron: \"Ο\",\n            omicron: \"ο\",\n            omid: \"⦶\",\n            ominus: \"⊖\",\n            Oopf: \"\\uD835\\uDD46\",\n            oopf: \"\\uD835\\uDD60\",\n            opar: \"⦷\",\n            OpenCurlyDoubleQuote: \"“\",\n            OpenCurlyQuote: \"‘\",\n            operp: \"⦹\",\n            oplus: \"⊕\",\n            orarr: \"↻\",\n            Or: \"⩔\",\n            or: \"∨\",\n            ord: \"⩝\",\n            order: \"ℴ\",\n            orderof: \"ℴ\",\n            ordf: \"\\xaa\",\n            ordm: \"\\xba\",\n            origof: \"⊶\",\n            oror: \"⩖\",\n            orslope: \"⩗\",\n            orv: \"⩛\",\n            oS: \"Ⓢ\",\n            Oscr: \"\\uD835\\uDCAA\",\n            oscr: \"ℴ\",\n            Oslash: \"\\xd8\",\n            oslash: \"\\xf8\",\n            osol: \"⊘\",\n            Otilde: \"\\xd5\",\n            otilde: \"\\xf5\",\n            otimesas: \"⨶\",\n            Otimes: \"⨷\",\n            otimes: \"⊗\",\n            Ouml: \"\\xd6\",\n            ouml: \"\\xf6\",\n            ovbar: \"⌽\",\n            OverBar: \"‾\",\n            OverBrace: \"⏞\",\n            OverBracket: \"⎴\",\n            OverParenthesis: \"⏜\",\n            para: \"\\xb6\",\n            parallel: \"∥\",\n            par: \"∥\",\n            parsim: \"⫳\",\n            parsl: \"⫽\",\n            part: \"∂\",\n            PartialD: \"∂\",\n            Pcy: \"П\",\n            pcy: \"п\",\n            percnt: \"%\",\n            period: \".\",\n            permil: \"‰\",\n            perp: \"⊥\",\n            pertenk: \"‱\",\n            Pfr: \"\\uD835\\uDD13\",\n            pfr: \"\\uD835\\uDD2D\",\n            Phi: \"Φ\",\n            phi: \"φ\",\n            phiv: \"ϕ\",\n            phmmat: \"ℳ\",\n            phone: \"☎\",\n            Pi: \"Π\",\n            pi: \"π\",\n            pitchfork: \"⋔\",\n            piv: \"ϖ\",\n            planck: \"ℏ\",\n            planckh: \"ℎ\",\n            plankv: \"ℏ\",\n            plusacir: \"⨣\",\n            plusb: \"⊞\",\n            pluscir: \"⨢\",\n            plus: \"+\",\n            plusdo: \"∔\",\n            plusdu: \"⨥\",\n            pluse: \"⩲\",\n            PlusMinus: \"\\xb1\",\n            plusmn: \"\\xb1\",\n            plussim: \"⨦\",\n            plustwo: \"⨧\",\n            pm: \"\\xb1\",\n            Poincareplane: \"ℌ\",\n            pointint: \"⨕\",\n            popf: \"\\uD835\\uDD61\",\n            Popf: \"ℙ\",\n            pound: \"\\xa3\",\n            prap: \"⪷\",\n            Pr: \"⪻\",\n            pr: \"≺\",\n            prcue: \"≼\",\n            precapprox: \"⪷\",\n            prec: \"≺\",\n            preccurlyeq: \"≼\",\n            Precedes: \"≺\",\n            PrecedesEqual: \"⪯\",\n            PrecedesSlantEqual: \"≼\",\n            PrecedesTilde: \"≾\",\n            preceq: \"⪯\",\n            precnapprox: \"⪹\",\n            precneqq: \"⪵\",\n            precnsim: \"⋨\",\n            pre: \"⪯\",\n            prE: \"⪳\",\n            precsim: \"≾\",\n            prime: \"′\",\n            Prime: \"″\",\n            primes: \"ℙ\",\n            prnap: \"⪹\",\n            prnE: \"⪵\",\n            prnsim: \"⋨\",\n            prod: \"∏\",\n            Product: \"∏\",\n            profalar: \"⌮\",\n            profline: \"⌒\",\n            profsurf: \"⌓\",\n            prop: \"∝\",\n            Proportional: \"∝\",\n            Proportion: \"∷\",\n            propto: \"∝\",\n            prsim: \"≾\",\n            prurel: \"⊰\",\n            Pscr: \"\\uD835\\uDCAB\",\n            pscr: \"\\uD835\\uDCC5\",\n            Psi: \"Ψ\",\n            psi: \"ψ\",\n            puncsp: \" \",\n            Qfr: \"\\uD835\\uDD14\",\n            qfr: \"\\uD835\\uDD2E\",\n            qint: \"⨌\",\n            qopf: \"\\uD835\\uDD62\",\n            Qopf: \"ℚ\",\n            qprime: \"⁗\",\n            Qscr: \"\\uD835\\uDCAC\",\n            qscr: \"\\uD835\\uDCC6\",\n            quaternions: \"ℍ\",\n            quatint: \"⨖\",\n            quest: \"?\",\n            questeq: \"≟\",\n            quot: '\"',\n            QUOT: '\"',\n            rAarr: \"⇛\",\n            race: \"∽̱\",\n            Racute: \"Ŕ\",\n            racute: \"ŕ\",\n            radic: \"√\",\n            raemptyv: \"⦳\",\n            rang: \"⟩\",\n            Rang: \"⟫\",\n            rangd: \"⦒\",\n            range: \"⦥\",\n            rangle: \"⟩\",\n            raquo: \"\\xbb\",\n            rarrap: \"⥵\",\n            rarrb: \"⇥\",\n            rarrbfs: \"⤠\",\n            rarrc: \"⤳\",\n            rarr: \"→\",\n            Rarr: \"↠\",\n            rArr: \"⇒\",\n            rarrfs: \"⤞\",\n            rarrhk: \"↪\",\n            rarrlp: \"↬\",\n            rarrpl: \"⥅\",\n            rarrsim: \"⥴\",\n            Rarrtl: \"⤖\",\n            rarrtl: \"↣\",\n            rarrw: \"↝\",\n            ratail: \"⤚\",\n            rAtail: \"⤜\",\n            ratio: \"∶\",\n            rationals: \"ℚ\",\n            rbarr: \"⤍\",\n            rBarr: \"⤏\",\n            RBarr: \"⤐\",\n            rbbrk: \"❳\",\n            rbrace: \"}\",\n            rbrack: \"]\",\n            rbrke: \"⦌\",\n            rbrksld: \"⦎\",\n            rbrkslu: \"⦐\",\n            Rcaron: \"Ř\",\n            rcaron: \"ř\",\n            Rcedil: \"Ŗ\",\n            rcedil: \"ŗ\",\n            rceil: \"⌉\",\n            rcub: \"}\",\n            Rcy: \"Р\",\n            rcy: \"р\",\n            rdca: \"⤷\",\n            rdldhar: \"⥩\",\n            rdquo: \"”\",\n            rdquor: \"”\",\n            rdsh: \"↳\",\n            real: \"ℜ\",\n            realine: \"ℛ\",\n            realpart: \"ℜ\",\n            reals: \"ℝ\",\n            Re: \"ℜ\",\n            rect: \"▭\",\n            reg: \"\\xae\",\n            REG: \"\\xae\",\n            ReverseElement: \"∋\",\n            ReverseEquilibrium: \"⇋\",\n            ReverseUpEquilibrium: \"⥯\",\n            rfisht: \"⥽\",\n            rfloor: \"⌋\",\n            rfr: \"\\uD835\\uDD2F\",\n            Rfr: \"ℜ\",\n            rHar: \"⥤\",\n            rhard: \"⇁\",\n            rharu: \"⇀\",\n            rharul: \"⥬\",\n            Rho: \"Ρ\",\n            rho: \"ρ\",\n            rhov: \"ϱ\",\n            RightAngleBracket: \"⟩\",\n            RightArrowBar: \"⇥\",\n            rightarrow: \"→\",\n            RightArrow: \"→\",\n            Rightarrow: \"⇒\",\n            RightArrowLeftArrow: \"⇄\",\n            rightarrowtail: \"↣\",\n            RightCeiling: \"⌉\",\n            RightDoubleBracket: \"⟧\",\n            RightDownTeeVector: \"⥝\",\n            RightDownVectorBar: \"⥕\",\n            RightDownVector: \"⇂\",\n            RightFloor: \"⌋\",\n            rightharpoondown: \"⇁\",\n            rightharpoonup: \"⇀\",\n            rightleftarrows: \"⇄\",\n            rightleftharpoons: \"⇌\",\n            rightrightarrows: \"⇉\",\n            rightsquigarrow: \"↝\",\n            RightTeeArrow: \"↦\",\n            RightTee: \"⊢\",\n            RightTeeVector: \"⥛\",\n            rightthreetimes: \"⋌\",\n            RightTriangleBar: \"⧐\",\n            RightTriangle: \"⊳\",\n            RightTriangleEqual: \"⊵\",\n            RightUpDownVector: \"⥏\",\n            RightUpTeeVector: \"⥜\",\n            RightUpVectorBar: \"⥔\",\n            RightUpVector: \"↾\",\n            RightVectorBar: \"⥓\",\n            RightVector: \"⇀\",\n            ring: \"˚\",\n            risingdotseq: \"≓\",\n            rlarr: \"⇄\",\n            rlhar: \"⇌\",\n            rlm: \"‏\",\n            rmoustache: \"⎱\",\n            rmoust: \"⎱\",\n            rnmid: \"⫮\",\n            roang: \"⟭\",\n            roarr: \"⇾\",\n            robrk: \"⟧\",\n            ropar: \"⦆\",\n            ropf: \"\\uD835\\uDD63\",\n            Ropf: \"ℝ\",\n            roplus: \"⨮\",\n            rotimes: \"⨵\",\n            RoundImplies: \"⥰\",\n            rpar: \")\",\n            rpargt: \"⦔\",\n            rppolint: \"⨒\",\n            rrarr: \"⇉\",\n            Rrightarrow: \"⇛\",\n            rsaquo: \"›\",\n            rscr: \"\\uD835\\uDCC7\",\n            Rscr: \"ℛ\",\n            rsh: \"↱\",\n            Rsh: \"↱\",\n            rsqb: \"]\",\n            rsquo: \"’\",\n            rsquor: \"’\",\n            rthree: \"⋌\",\n            rtimes: \"⋊\",\n            rtri: \"▹\",\n            rtrie: \"⊵\",\n            rtrif: \"▸\",\n            rtriltri: \"⧎\",\n            RuleDelayed: \"⧴\",\n            ruluhar: \"⥨\",\n            rx: \"℞\",\n            Sacute: \"Ś\",\n            sacute: \"ś\",\n            sbquo: \"‚\",\n            scap: \"⪸\",\n            Scaron: \"Š\",\n            scaron: \"š\",\n            Sc: \"⪼\",\n            sc: \"≻\",\n            sccue: \"≽\",\n            sce: \"⪰\",\n            scE: \"⪴\",\n            Scedil: \"Ş\",\n            scedil: \"ş\",\n            Scirc: \"Ŝ\",\n            scirc: \"ŝ\",\n            scnap: \"⪺\",\n            scnE: \"⪶\",\n            scnsim: \"⋩\",\n            scpolint: \"⨓\",\n            scsim: \"≿\",\n            Scy: \"С\",\n            scy: \"с\",\n            sdotb: \"⊡\",\n            sdot: \"⋅\",\n            sdote: \"⩦\",\n            searhk: \"⤥\",\n            searr: \"↘\",\n            seArr: \"⇘\",\n            searrow: \"↘\",\n            sect: \"\\xa7\",\n            semi: \";\",\n            seswar: \"⤩\",\n            setminus: \"∖\",\n            setmn: \"∖\",\n            sext: \"✶\",\n            Sfr: \"\\uD835\\uDD16\",\n            sfr: \"\\uD835\\uDD30\",\n            sfrown: \"⌢\",\n            sharp: \"♯\",\n            SHCHcy: \"Щ\",\n            shchcy: \"щ\",\n            SHcy: \"Ш\",\n            shcy: \"ш\",\n            ShortDownArrow: \"↓\",\n            ShortLeftArrow: \"←\",\n            shortmid: \"∣\",\n            shortparallel: \"∥\",\n            ShortRightArrow: \"→\",\n            ShortUpArrow: \"↑\",\n            shy: \"\\xad\",\n            Sigma: \"Σ\",\n            sigma: \"σ\",\n            sigmaf: \"ς\",\n            sigmav: \"ς\",\n            sim: \"∼\",\n            simdot: \"⩪\",\n            sime: \"≃\",\n            simeq: \"≃\",\n            simg: \"⪞\",\n            simgE: \"⪠\",\n            siml: \"⪝\",\n            simlE: \"⪟\",\n            simne: \"≆\",\n            simplus: \"⨤\",\n            simrarr: \"⥲\",\n            slarr: \"←\",\n            SmallCircle: \"∘\",\n            smallsetminus: \"∖\",\n            smashp: \"⨳\",\n            smeparsl: \"⧤\",\n            smid: \"∣\",\n            smile: \"⌣\",\n            smt: \"⪪\",\n            smte: \"⪬\",\n            smtes: \"⪬︀\",\n            SOFTcy: \"Ь\",\n            softcy: \"ь\",\n            solbar: \"⌿\",\n            solb: \"⧄\",\n            sol: \"/\",\n            Sopf: \"\\uD835\\uDD4A\",\n            sopf: \"\\uD835\\uDD64\",\n            spades: \"♠\",\n            spadesuit: \"♠\",\n            spar: \"∥\",\n            sqcap: \"⊓\",\n            sqcaps: \"⊓︀\",\n            sqcup: \"⊔\",\n            sqcups: \"⊔︀\",\n            Sqrt: \"√\",\n            sqsub: \"⊏\",\n            sqsube: \"⊑\",\n            sqsubset: \"⊏\",\n            sqsubseteq: \"⊑\",\n            sqsup: \"⊐\",\n            sqsupe: \"⊒\",\n            sqsupset: \"⊐\",\n            sqsupseteq: \"⊒\",\n            square: \"□\",\n            Square: \"□\",\n            SquareIntersection: \"⊓\",\n            SquareSubset: \"⊏\",\n            SquareSubsetEqual: \"⊑\",\n            SquareSuperset: \"⊐\",\n            SquareSupersetEqual: \"⊒\",\n            SquareUnion: \"⊔\",\n            squarf: \"▪\",\n            squ: \"□\",\n            squf: \"▪\",\n            srarr: \"→\",\n            Sscr: \"\\uD835\\uDCAE\",\n            sscr: \"\\uD835\\uDCC8\",\n            ssetmn: \"∖\",\n            ssmile: \"⌣\",\n            sstarf: \"⋆\",\n            Star: \"⋆\",\n            star: \"☆\",\n            starf: \"★\",\n            straightepsilon: \"ϵ\",\n            straightphi: \"ϕ\",\n            strns: \"\\xaf\",\n            sub: \"⊂\",\n            Sub: \"⋐\",\n            subdot: \"⪽\",\n            subE: \"⫅\",\n            sube: \"⊆\",\n            subedot: \"⫃\",\n            submult: \"⫁\",\n            subnE: \"⫋\",\n            subne: \"⊊\",\n            subplus: \"⪿\",\n            subrarr: \"⥹\",\n            subset: \"⊂\",\n            Subset: \"⋐\",\n            subseteq: \"⊆\",\n            subseteqq: \"⫅\",\n            SubsetEqual: \"⊆\",\n            subsetneq: \"⊊\",\n            subsetneqq: \"⫋\",\n            subsim: \"⫇\",\n            subsub: \"⫕\",\n            subsup: \"⫓\",\n            succapprox: \"⪸\",\n            succ: \"≻\",\n            succcurlyeq: \"≽\",\n            Succeeds: \"≻\",\n            SucceedsEqual: \"⪰\",\n            SucceedsSlantEqual: \"≽\",\n            SucceedsTilde: \"≿\",\n            succeq: \"⪰\",\n            succnapprox: \"⪺\",\n            succneqq: \"⪶\",\n            succnsim: \"⋩\",\n            succsim: \"≿\",\n            SuchThat: \"∋\",\n            sum: \"∑\",\n            Sum: \"∑\",\n            sung: \"♪\",\n            sup1: \"\\xb9\",\n            sup2: \"\\xb2\",\n            sup3: \"\\xb3\",\n            sup: \"⊃\",\n            Sup: \"⋑\",\n            supdot: \"⪾\",\n            supdsub: \"⫘\",\n            supE: \"⫆\",\n            supe: \"⊇\",\n            supedot: \"⫄\",\n            Superset: \"⊃\",\n            SupersetEqual: \"⊇\",\n            suphsol: \"⟉\",\n            suphsub: \"⫗\",\n            suplarr: \"⥻\",\n            supmult: \"⫂\",\n            supnE: \"⫌\",\n            supne: \"⊋\",\n            supplus: \"⫀\",\n            supset: \"⊃\",\n            Supset: \"⋑\",\n            supseteq: \"⊇\",\n            supseteqq: \"⫆\",\n            supsetneq: \"⊋\",\n            supsetneqq: \"⫌\",\n            supsim: \"⫈\",\n            supsub: \"⫔\",\n            supsup: \"⫖\",\n            swarhk: \"⤦\",\n            swarr: \"↙\",\n            swArr: \"⇙\",\n            swarrow: \"↙\",\n            swnwar: \"⤪\",\n            szlig: \"\\xdf\",\n            Tab: \"\t\",\n            target: \"⌖\",\n            Tau: \"Τ\",\n            tau: \"τ\",\n            tbrk: \"⎴\",\n            Tcaron: \"Ť\",\n            tcaron: \"ť\",\n            Tcedil: \"Ţ\",\n            tcedil: \"ţ\",\n            Tcy: \"Т\",\n            tcy: \"т\",\n            tdot: \"⃛\",\n            telrec: \"⌕\",\n            Tfr: \"\\uD835\\uDD17\",\n            tfr: \"\\uD835\\uDD31\",\n            there4: \"∴\",\n            therefore: \"∴\",\n            Therefore: \"∴\",\n            Theta: \"Θ\",\n            theta: \"θ\",\n            thetasym: \"ϑ\",\n            thetav: \"ϑ\",\n            thickapprox: \"≈\",\n            thicksim: \"∼\",\n            ThickSpace: \"  \",\n            ThinSpace: \" \",\n            thinsp: \" \",\n            thkap: \"≈\",\n            thksim: \"∼\",\n            THORN: \"\\xde\",\n            thorn: \"\\xfe\",\n            tilde: \"˜\",\n            Tilde: \"∼\",\n            TildeEqual: \"≃\",\n            TildeFullEqual: \"≅\",\n            TildeTilde: \"≈\",\n            timesbar: \"⨱\",\n            timesb: \"⊠\",\n            times: \"\\xd7\",\n            timesd: \"⨰\",\n            tint: \"∭\",\n            toea: \"⤨\",\n            topbot: \"⌶\",\n            topcir: \"⫱\",\n            top: \"⊤\",\n            Topf: \"\\uD835\\uDD4B\",\n            topf: \"\\uD835\\uDD65\",\n            topfork: \"⫚\",\n            tosa: \"⤩\",\n            tprime: \"‴\",\n            trade: \"™\",\n            TRADE: \"™\",\n            triangle: \"▵\",\n            triangledown: \"▿\",\n            triangleleft: \"◃\",\n            trianglelefteq: \"⊴\",\n            triangleq: \"≜\",\n            triangleright: \"▹\",\n            trianglerighteq: \"⊵\",\n            tridot: \"◬\",\n            trie: \"≜\",\n            triminus: \"⨺\",\n            TripleDot: \"⃛\",\n            triplus: \"⨹\",\n            trisb: \"⧍\",\n            tritime: \"⨻\",\n            trpezium: \"⏢\",\n            Tscr: \"\\uD835\\uDCAF\",\n            tscr: \"\\uD835\\uDCC9\",\n            TScy: \"Ц\",\n            tscy: \"ц\",\n            TSHcy: \"Ћ\",\n            tshcy: \"ћ\",\n            Tstrok: \"Ŧ\",\n            tstrok: \"ŧ\",\n            twixt: \"≬\",\n            twoheadleftarrow: \"↞\",\n            twoheadrightarrow: \"↠\",\n            Uacute: \"\\xda\",\n            uacute: \"\\xfa\",\n            uarr: \"↑\",\n            Uarr: \"↟\",\n            uArr: \"⇑\",\n            Uarrocir: \"⥉\",\n            Ubrcy: \"Ў\",\n            ubrcy: \"ў\",\n            Ubreve: \"Ŭ\",\n            ubreve: \"ŭ\",\n            Ucirc: \"\\xdb\",\n            ucirc: \"\\xfb\",\n            Ucy: \"У\",\n            ucy: \"у\",\n            udarr: \"⇅\",\n            Udblac: \"Ű\",\n            udblac: \"ű\",\n            udhar: \"⥮\",\n            ufisht: \"⥾\",\n            Ufr: \"\\uD835\\uDD18\",\n            ufr: \"\\uD835\\uDD32\",\n            Ugrave: \"\\xd9\",\n            ugrave: \"\\xf9\",\n            uHar: \"⥣\",\n            uharl: \"↿\",\n            uharr: \"↾\",\n            uhblk: \"▀\",\n            ulcorn: \"⌜\",\n            ulcorner: \"⌜\",\n            ulcrop: \"⌏\",\n            ultri: \"◸\",\n            Umacr: \"Ū\",\n            umacr: \"ū\",\n            uml: \"\\xa8\",\n            UnderBar: \"_\",\n            UnderBrace: \"⏟\",\n            UnderBracket: \"⎵\",\n            UnderParenthesis: \"⏝\",\n            Union: \"⋃\",\n            UnionPlus: \"⊎\",\n            Uogon: \"Ų\",\n            uogon: \"ų\",\n            Uopf: \"\\uD835\\uDD4C\",\n            uopf: \"\\uD835\\uDD66\",\n            UpArrowBar: \"⤒\",\n            uparrow: \"↑\",\n            UpArrow: \"↑\",\n            Uparrow: \"⇑\",\n            UpArrowDownArrow: \"⇅\",\n            updownarrow: \"↕\",\n            UpDownArrow: \"↕\",\n            Updownarrow: \"⇕\",\n            UpEquilibrium: \"⥮\",\n            upharpoonleft: \"↿\",\n            upharpoonright: \"↾\",\n            uplus: \"⊎\",\n            UpperLeftArrow: \"↖\",\n            UpperRightArrow: \"↗\",\n            upsi: \"υ\",\n            Upsi: \"ϒ\",\n            upsih: \"ϒ\",\n            Upsilon: \"Υ\",\n            upsilon: \"υ\",\n            UpTeeArrow: \"↥\",\n            UpTee: \"⊥\",\n            upuparrows: \"⇈\",\n            urcorn: \"⌝\",\n            urcorner: \"⌝\",\n            urcrop: \"⌎\",\n            Uring: \"Ů\",\n            uring: \"ů\",\n            urtri: \"◹\",\n            Uscr: \"\\uD835\\uDCB0\",\n            uscr: \"\\uD835\\uDCCA\",\n            utdot: \"⋰\",\n            Utilde: \"Ũ\",\n            utilde: \"ũ\",\n            utri: \"▵\",\n            utrif: \"▴\",\n            uuarr: \"⇈\",\n            Uuml: \"\\xdc\",\n            uuml: \"\\xfc\",\n            uwangle: \"⦧\",\n            vangrt: \"⦜\",\n            varepsilon: \"ϵ\",\n            varkappa: \"ϰ\",\n            varnothing: \"∅\",\n            varphi: \"ϕ\",\n            varpi: \"ϖ\",\n            varpropto: \"∝\",\n            varr: \"↕\",\n            vArr: \"⇕\",\n            varrho: \"ϱ\",\n            varsigma: \"ς\",\n            varsubsetneq: \"⊊︀\",\n            varsubsetneqq: \"⫋︀\",\n            varsupsetneq: \"⊋︀\",\n            varsupsetneqq: \"⫌︀\",\n            vartheta: \"ϑ\",\n            vartriangleleft: \"⊲\",\n            vartriangleright: \"⊳\",\n            vBar: \"⫨\",\n            Vbar: \"⫫\",\n            vBarv: \"⫩\",\n            Vcy: \"В\",\n            vcy: \"в\",\n            vdash: \"⊢\",\n            vDash: \"⊨\",\n            Vdash: \"⊩\",\n            VDash: \"⊫\",\n            Vdashl: \"⫦\",\n            veebar: \"⊻\",\n            vee: \"∨\",\n            Vee: \"⋁\",\n            veeeq: \"≚\",\n            vellip: \"⋮\",\n            verbar: \"|\",\n            Verbar: \"‖\",\n            vert: \"|\",\n            Vert: \"‖\",\n            VerticalBar: \"∣\",\n            VerticalLine: \"|\",\n            VerticalSeparator: \"❘\",\n            VerticalTilde: \"≀\",\n            VeryThinSpace: \" \",\n            Vfr: \"\\uD835\\uDD19\",\n            vfr: \"\\uD835\\uDD33\",\n            vltri: \"⊲\",\n            vnsub: \"⊂⃒\",\n            vnsup: \"⊃⃒\",\n            Vopf: \"\\uD835\\uDD4D\",\n            vopf: \"\\uD835\\uDD67\",\n            vprop: \"∝\",\n            vrtri: \"⊳\",\n            Vscr: \"\\uD835\\uDCB1\",\n            vscr: \"\\uD835\\uDCCB\",\n            vsubnE: \"⫋︀\",\n            vsubne: \"⊊︀\",\n            vsupnE: \"⫌︀\",\n            vsupne: \"⊋︀\",\n            Vvdash: \"⊪\",\n            vzigzag: \"⦚\",\n            Wcirc: \"Ŵ\",\n            wcirc: \"ŵ\",\n            wedbar: \"⩟\",\n            wedge: \"∧\",\n            Wedge: \"⋀\",\n            wedgeq: \"≙\",\n            weierp: \"℘\",\n            Wfr: \"\\uD835\\uDD1A\",\n            wfr: \"\\uD835\\uDD34\",\n            Wopf: \"\\uD835\\uDD4E\",\n            wopf: \"\\uD835\\uDD68\",\n            wp: \"℘\",\n            wr: \"≀\",\n            wreath: \"≀\",\n            Wscr: \"\\uD835\\uDCB2\",\n            wscr: \"\\uD835\\uDCCC\",\n            xcap: \"⋂\",\n            xcirc: \"◯\",\n            xcup: \"⋃\",\n            xdtri: \"▽\",\n            Xfr: \"\\uD835\\uDD1B\",\n            xfr: \"\\uD835\\uDD35\",\n            xharr: \"⟷\",\n            xhArr: \"⟺\",\n            Xi: \"Ξ\",\n            xi: \"ξ\",\n            xlarr: \"⟵\",\n            xlArr: \"⟸\",\n            xmap: \"⟼\",\n            xnis: \"⋻\",\n            xodot: \"⨀\",\n            Xopf: \"\\uD835\\uDD4F\",\n            xopf: \"\\uD835\\uDD69\",\n            xoplus: \"⨁\",\n            xotime: \"⨂\",\n            xrarr: \"⟶\",\n            xrArr: \"⟹\",\n            Xscr: \"\\uD835\\uDCB3\",\n            xscr: \"\\uD835\\uDCCD\",\n            xsqcup: \"⨆\",\n            xuplus: \"⨄\",\n            xutri: \"△\",\n            xvee: \"⋁\",\n            xwedge: \"⋀\",\n            Yacute: \"\\xdd\",\n            yacute: \"\\xfd\",\n            YAcy: \"Я\",\n            yacy: \"я\",\n            Ycirc: \"Ŷ\",\n            ycirc: \"ŷ\",\n            Ycy: \"Ы\",\n            ycy: \"ы\",\n            yen: \"\\xa5\",\n            Yfr: \"\\uD835\\uDD1C\",\n            yfr: \"\\uD835\\uDD36\",\n            YIcy: \"Ї\",\n            yicy: \"ї\",\n            Yopf: \"\\uD835\\uDD50\",\n            yopf: \"\\uD835\\uDD6A\",\n            Yscr: \"\\uD835\\uDCB4\",\n            yscr: \"\\uD835\\uDCCE\",\n            YUcy: \"Ю\",\n            yucy: \"ю\",\n            yuml: \"\\xff\",\n            Yuml: \"Ÿ\",\n            Zacute: \"Ź\",\n            zacute: \"ź\",\n            Zcaron: \"Ž\",\n            zcaron: \"ž\",\n            Zcy: \"З\",\n            zcy: \"з\",\n            Zdot: \"Ż\",\n            zdot: \"ż\",\n            zeetrf: \"ℨ\",\n            ZeroWidthSpace: \"​\",\n            Zeta: \"Ζ\",\n            zeta: \"ζ\",\n            zfr: \"\\uD835\\uDD37\",\n            Zfr: \"ℨ\",\n            ZHcy: \"Ж\",\n            zhcy: \"ж\",\n            zigrarr: \"⇝\",\n            zopf: \"\\uD835\\uDD6B\",\n            Zopf: \"ℤ\",\n            Zscr: \"\\uD835\\uDCB5\",\n            zscr: \"\\uD835\\uDCCF\",\n            zwj: \"‍\",\n            zwnj: \"‌\"\n        };\n    }\n});\n// node_modules/markdown-it/lib/common/entities.js\nvar require_entities2 = __commonJS({\n    \"node_modules/markdown-it/lib/common/entities.js\" (exports, module) {\n        \"use strict\";\n        module.exports = require_entities();\n    }\n});\n// node_modules/uc.micro/categories/P/regex.js\nvar require_regex = __commonJS({\n    \"node_modules/uc.micro/categories/P/regex.js\" (exports, module) {\n        module.exports = /[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/;\n    }\n});\n// node_modules/mdurl/encode.js\nvar require_encode = __commonJS({\n    \"node_modules/mdurl/encode.js\" (exports, module) {\n        \"use strict\";\n        var encodeCache = {};\n        function getEncodeCache(exclude) {\n            var i, ch, cache = encodeCache[exclude];\n            if (cache) {\n                return cache;\n            }\n            cache = encodeCache[exclude] = [];\n            for(i = 0; i < 128; i++){\n                ch = String.fromCharCode(i);\n                if (/^[0-9a-z]$/i.test(ch)) {\n                    cache.push(ch);\n                } else {\n                    cache.push(\"%\" + (\"0\" + i.toString(16).toUpperCase()).slice(-2));\n                }\n            }\n            for(i = 0; i < exclude.length; i++){\n                cache[exclude.charCodeAt(i)] = exclude[i];\n            }\n            return cache;\n        }\n        function encode(string, exclude, keepEscaped) {\n            var i, l, code2, nextCode, cache, result = \"\";\n            if (typeof exclude !== \"string\") {\n                keepEscaped = exclude;\n                exclude = encode.defaultChars;\n            }\n            if (typeof keepEscaped === \"undefined\") {\n                keepEscaped = true;\n            }\n            cache = getEncodeCache(exclude);\n            for(i = 0, l = string.length; i < l; i++){\n                code2 = string.charCodeAt(i);\n                if (keepEscaped && code2 === 37 && i + 2 < l) {\n                    if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n                        result += string.slice(i, i + 3);\n                        i += 2;\n                        continue;\n                    }\n                }\n                if (code2 < 128) {\n                    result += cache[code2];\n                    continue;\n                }\n                if (code2 >= 55296 && code2 <= 57343) {\n                    if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {\n                        nextCode = string.charCodeAt(i + 1);\n                        if (nextCode >= 56320 && nextCode <= 57343) {\n                            result += encodeURIComponent(string[i] + string[i + 1]);\n                            i++;\n                            continue;\n                        }\n                    }\n                    result += \"%EF%BF%BD\";\n                    continue;\n                }\n                result += encodeURIComponent(string[i]);\n            }\n            return result;\n        }\n        encode.defaultChars = \";/?:@&=+$,-_.!~*'()#\";\n        encode.componentChars = \"-_.!~*'()\";\n        module.exports = encode;\n    }\n});\n// node_modules/mdurl/decode.js\nvar require_decode = __commonJS({\n    \"node_modules/mdurl/decode.js\" (exports, module) {\n        \"use strict\";\n        var decodeCache = {};\n        function getDecodeCache(exclude) {\n            var i, ch, cache = decodeCache[exclude];\n            if (cache) {\n                return cache;\n            }\n            cache = decodeCache[exclude] = [];\n            for(i = 0; i < 128; i++){\n                ch = String.fromCharCode(i);\n                cache.push(ch);\n            }\n            for(i = 0; i < exclude.length; i++){\n                ch = exclude.charCodeAt(i);\n                cache[ch] = \"%\" + (\"0\" + ch.toString(16).toUpperCase()).slice(-2);\n            }\n            return cache;\n        }\n        function decode(string, exclude) {\n            var cache;\n            if (typeof exclude !== \"string\") {\n                exclude = decode.defaultChars;\n            }\n            cache = getDecodeCache(exclude);\n            return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n                var i, l, b1, b2, b3, b4, chr, result = \"\";\n                for(i = 0, l = seq.length; i < l; i += 3){\n                    b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n                    if (b1 < 128) {\n                        result += cache[b1];\n                        continue;\n                    }\n                    if ((b1 & 224) === 192 && i + 3 < l) {\n                        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                        if ((b2 & 192) === 128) {\n                            chr = b1 << 6 & 1984 | b2 & 63;\n                            if (chr < 128) {\n                                result += \"��\";\n                            } else {\n                                result += String.fromCharCode(chr);\n                            }\n                            i += 3;\n                            continue;\n                        }\n                    }\n                    if ((b1 & 240) === 224 && i + 6 < l) {\n                        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                        if ((b2 & 192) === 128 && (b3 & 192) === 128) {\n                            chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;\n                            if (chr < 2048 || chr >= 55296 && chr <= 57343) {\n                                result += \"���\";\n                            } else {\n                                result += String.fromCharCode(chr);\n                            }\n                            i += 6;\n                            continue;\n                        }\n                    }\n                    if ((b1 & 248) === 240 && i + 9 < l) {\n                        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n                        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n                        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n                        if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {\n                            chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;\n                            if (chr < 65536 || chr > 1114111) {\n                                result += \"����\";\n                            } else {\n                                chr -= 65536;\n                                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));\n                            }\n                            i += 9;\n                            continue;\n                        }\n                    }\n                    result += \"�\";\n                }\n                return result;\n            });\n        }\n        decode.defaultChars = \";/?:@&=+$,#\";\n        decode.componentChars = \"\";\n        module.exports = decode;\n    }\n});\n// node_modules/mdurl/format.js\nvar require_format = __commonJS({\n    \"node_modules/mdurl/format.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function format2(url) {\n            var result = \"\";\n            result += url.protocol || \"\";\n            result += url.slashes ? \"//\" : \"\";\n            result += url.auth ? url.auth + \"@\" : \"\";\n            if (url.hostname && url.hostname.indexOf(\":\") !== -1) {\n                result += \"[\" + url.hostname + \"]\";\n            } else {\n                result += url.hostname || \"\";\n            }\n            result += url.port ? \":\" + url.port : \"\";\n            result += url.pathname || \"\";\n            result += url.search || \"\";\n            result += url.hash || \"\";\n            return result;\n        };\n    }\n});\n// node_modules/mdurl/parse.js\nvar require_parse = __commonJS({\n    \"node_modules/mdurl/parse.js\" (exports, module) {\n        \"use strict\";\n        function Url() {\n            this.protocol = null;\n            this.slashes = null;\n            this.auth = null;\n            this.port = null;\n            this.hostname = null;\n            this.hash = null;\n            this.search = null;\n            this.pathname = null;\n        }\n        var protocolPattern = /^([a-z0-9.+-]+:)/i;\n        var portPattern = /:[0-9]*$/;\n        var simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/;\n        var delims = [\n            \"<\",\n            \">\",\n            '\"',\n            \"`\",\n            \" \",\n            \"\\r\",\n            \"\\n\",\n            \"\t\"\n        ];\n        var unwise = [\n            \"{\",\n            \"}\",\n            \"|\",\n            \"\\\\\",\n            \"^\",\n            \"`\"\n        ].concat(delims);\n        var autoEscape = [\n            \"'\"\n        ].concat(unwise);\n        var nonHostChars = [\n            \"%\",\n            \"/\",\n            \"?\",\n            \";\",\n            \"#\"\n        ].concat(autoEscape);\n        var hostEndingChars = [\n            \"/\",\n            \"?\",\n            \"#\"\n        ];\n        var hostnameMaxLen = 255;\n        var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;\n        var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;\n        var hostlessProtocol = {\n            \"javascript\": true,\n            \"javascript:\": true\n        };\n        var slashedProtocol = {\n            \"http\": true,\n            \"https\": true,\n            \"ftp\": true,\n            \"gopher\": true,\n            \"file\": true,\n            \"http:\": true,\n            \"https:\": true,\n            \"ftp:\": true,\n            \"gopher:\": true,\n            \"file:\": true\n        };\n        function urlParse(url, slashesDenoteHost) {\n            if (url && url instanceof Url) {\n                return url;\n            }\n            var u = new Url();\n            u.parse(url, slashesDenoteHost);\n            return u;\n        }\n        Url.prototype.parse = function(url, slashesDenoteHost) {\n            var i, l, lowerProto, hec, slashes, rest = url;\n            rest = rest.trim();\n            if (!slashesDenoteHost && url.split(\"#\").length === 1) {\n                var simplePath = simplePathPattern.exec(rest);\n                if (simplePath) {\n                    this.pathname = simplePath[1];\n                    if (simplePath[2]) {\n                        this.search = simplePath[2];\n                    }\n                    return this;\n                }\n            }\n            var proto = protocolPattern.exec(rest);\n            if (proto) {\n                proto = proto[0];\n                lowerProto = proto.toLowerCase();\n                this.protocol = proto;\n                rest = rest.substr(proto.length);\n            }\n            if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n                slashes = rest.substr(0, 2) === \"//\";\n                if (slashes && !(proto && hostlessProtocol[proto])) {\n                    rest = rest.substr(2);\n                    this.slashes = true;\n                }\n            }\n            if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n                var hostEnd = -1;\n                for(i = 0; i < hostEndingChars.length; i++){\n                    hec = rest.indexOf(hostEndingChars[i]);\n                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n                        hostEnd = hec;\n                    }\n                }\n                var auth, atSign;\n                if (hostEnd === -1) {\n                    atSign = rest.lastIndexOf(\"@\");\n                } else {\n                    atSign = rest.lastIndexOf(\"@\", hostEnd);\n                }\n                if (atSign !== -1) {\n                    auth = rest.slice(0, atSign);\n                    rest = rest.slice(atSign + 1);\n                    this.auth = auth;\n                }\n                hostEnd = -1;\n                for(i = 0; i < nonHostChars.length; i++){\n                    hec = rest.indexOf(nonHostChars[i]);\n                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n                        hostEnd = hec;\n                    }\n                }\n                if (hostEnd === -1) {\n                    hostEnd = rest.length;\n                }\n                if (rest[hostEnd - 1] === \":\") {\n                    hostEnd--;\n                }\n                var host = rest.slice(0, hostEnd);\n                rest = rest.slice(hostEnd);\n                this.parseHost(host);\n                this.hostname = this.hostname || \"\";\n                var ipv6Hostname = this.hostname[0] === \"[\" && this.hostname[this.hostname.length - 1] === \"]\";\n                if (!ipv6Hostname) {\n                    var hostparts = this.hostname.split(/\\./);\n                    for(i = 0, l = hostparts.length; i < l; i++){\n                        var part = hostparts[i];\n                        if (!part) {\n                            continue;\n                        }\n                        if (!part.match(hostnamePartPattern)) {\n                            var newpart = \"\";\n                            for(var j = 0, k = part.length; j < k; j++){\n                                if (part.charCodeAt(j) > 127) {\n                                    newpart += \"x\";\n                                } else {\n                                    newpart += part[j];\n                                }\n                            }\n                            if (!newpart.match(hostnamePartPattern)) {\n                                var validParts = hostparts.slice(0, i);\n                                var notHost = hostparts.slice(i + 1);\n                                var bit = part.match(hostnamePartStart);\n                                if (bit) {\n                                    validParts.push(bit[1]);\n                                    notHost.unshift(bit[2]);\n                                }\n                                if (notHost.length) {\n                                    rest = notHost.join(\".\") + rest;\n                                }\n                                this.hostname = validParts.join(\".\");\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (this.hostname.length > hostnameMaxLen) {\n                    this.hostname = \"\";\n                }\n                if (ipv6Hostname) {\n                    this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n                }\n            }\n            var hash = rest.indexOf(\"#\");\n            if (hash !== -1) {\n                this.hash = rest.substr(hash);\n                rest = rest.slice(0, hash);\n            }\n            var qm = rest.indexOf(\"?\");\n            if (qm !== -1) {\n                this.search = rest.substr(qm);\n                rest = rest.slice(0, qm);\n            }\n            if (rest) {\n                this.pathname = rest;\n            }\n            if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n                this.pathname = \"\";\n            }\n            return this;\n        };\n        Url.prototype.parseHost = function(host) {\n            var port = portPattern.exec(host);\n            if (port) {\n                port = port[0];\n                if (port !== \":\") {\n                    this.port = port.substr(1);\n                }\n                host = host.substr(0, host.length - port.length);\n            }\n            if (host) {\n                this.hostname = host;\n            }\n        };\n        module.exports = urlParse;\n    }\n});\n// node_modules/mdurl/index.js\nvar require_mdurl = __commonJS({\n    \"node_modules/mdurl/index.js\" (exports, module) {\n        \"use strict\";\n        module.exports.encode = require_encode();\n        module.exports.decode = require_decode();\n        module.exports.format = require_format();\n        module.exports.parse = require_parse();\n    }\n});\n// node_modules/uc.micro/properties/Any/regex.js\nvar require_regex2 = __commonJS({\n    \"node_modules/uc.micro/properties/Any/regex.js\" (exports, module) {\n        module.exports = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n    }\n});\n// node_modules/uc.micro/categories/Cc/regex.js\nvar require_regex3 = __commonJS({\n    \"node_modules/uc.micro/categories/Cc/regex.js\" (exports, module) {\n        module.exports = /[\\0-\\x1F\\x7F-\\x9F]/;\n    }\n});\n// node_modules/uc.micro/categories/Cf/regex.js\nvar require_regex4 = __commonJS({\n    \"node_modules/uc.micro/categories/Cf/regex.js\" (exports, module) {\n        module.exports = /[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/;\n    }\n});\n// node_modules/uc.micro/categories/Z/regex.js\nvar require_regex5 = __commonJS({\n    \"node_modules/uc.micro/categories/Z/regex.js\" (exports, module) {\n        module.exports = /[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/;\n    }\n});\n// node_modules/uc.micro/index.js\nvar require_uc = __commonJS({\n    \"node_modules/uc.micro/index.js\" (exports) {\n        \"use strict\";\n        exports.Any = require_regex2();\n        exports.Cc = require_regex3();\n        exports.Cf = require_regex4();\n        exports.P = require_regex();\n        exports.Z = require_regex5();\n    }\n});\n// node_modules/markdown-it/lib/common/utils.js\nvar require_utils = __commonJS({\n    \"node_modules/markdown-it/lib/common/utils.js\" (exports) {\n        \"use strict\";\n        function _class(obj) {\n            return Object.prototype.toString.call(obj);\n        }\n        function isString(obj) {\n            return _class(obj) === \"[object String]\";\n        }\n        var _hasOwnProperty = Object.prototype.hasOwnProperty;\n        function has(object, key) {\n            return _hasOwnProperty.call(object, key);\n        }\n        function assign(obj) {\n            var sources = Array.prototype.slice.call(arguments, 1);\n            sources.forEach(function(source) {\n                if (!source) {\n                    return;\n                }\n                if (typeof source !== \"object\") {\n                    throw new TypeError(source + \"must be object\");\n                }\n                Object.keys(source).forEach(function(key) {\n                    obj[key] = source[key];\n                });\n            });\n            return obj;\n        }\n        function arrayReplaceAt(src, pos, newElements) {\n            return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n        }\n        function isValidEntityCode(c) {\n            if (c >= 55296 && c <= 57343) {\n                return false;\n            }\n            if (c >= 64976 && c <= 65007) {\n                return false;\n            }\n            if ((c & 65535) === 65535 || (c & 65535) === 65534) {\n                return false;\n            }\n            if (c >= 0 && c <= 8) {\n                return false;\n            }\n            if (c === 11) {\n                return false;\n            }\n            if (c >= 14 && c <= 31) {\n                return false;\n            }\n            if (c >= 127 && c <= 159) {\n                return false;\n            }\n            if (c > 1114111) {\n                return false;\n            }\n            return true;\n        }\n        function fromCodePoint(c) {\n            if (c > 65535) {\n                c -= 65536;\n                var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);\n                return String.fromCharCode(surrogate1, surrogate2);\n            }\n            return String.fromCharCode(c);\n        }\n        var UNESCAPE_MD_RE = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\n        var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;\n        var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + \"|\" + ENTITY_RE.source, \"gi\");\n        var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n        var entities = require_entities2();\n        function replaceEntityPattern(match, name) {\n            var code2 = 0;\n            if (has(entities, name)) {\n                return entities[name];\n            }\n            if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {\n                code2 = name[1].toLowerCase() === \"x\" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n                if (isValidEntityCode(code2)) {\n                    return fromCodePoint(code2);\n                }\n            }\n            return match;\n        }\n        function unescapeMd(str) {\n            if (str.indexOf(\"\\\\\") < 0) {\n                return str;\n            }\n            return str.replace(UNESCAPE_MD_RE, \"$1\");\n        }\n        function unescapeAll(str) {\n            if (str.indexOf(\"\\\\\") < 0 && str.indexOf(\"&\") < 0) {\n                return str;\n            }\n            return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {\n                if (escaped) {\n                    return escaped;\n                }\n                return replaceEntityPattern(match, entity);\n            });\n        }\n        var HTML_ESCAPE_TEST_RE = /[&<>\"]/;\n        var HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\n        var HTML_REPLACEMENTS = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\"\n        };\n        function replaceUnsafeChar(ch) {\n            return HTML_REPLACEMENTS[ch];\n        }\n        function escapeHtml2(str) {\n            if (HTML_ESCAPE_TEST_RE.test(str)) {\n                return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n            }\n            return str;\n        }\n        var REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n        function escapeRE(str) {\n            return str.replace(REGEXP_ESCAPE_RE, \"\\\\$&\");\n        }\n        function isSpace(code2) {\n            switch(code2){\n                case 9:\n                case 32:\n                    return true;\n            }\n            return false;\n        }\n        function isWhiteSpace(code2) {\n            if (code2 >= 8192 && code2 <= 8202) {\n                return true;\n            }\n            switch(code2){\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 32:\n                case 160:\n                case 5760:\n                case 8239:\n                case 8287:\n                case 12288:\n                    return true;\n            }\n            return false;\n        }\n        var UNICODE_PUNCT_RE = require_regex();\n        function isPunctChar(ch) {\n            return UNICODE_PUNCT_RE.test(ch);\n        }\n        function isMdAsciiPunct(ch) {\n            switch(ch){\n                case 33:\n                case 34:\n                case 35:\n                case 36:\n                case 37:\n                case 38:\n                case 39:\n                case 40:\n                case 41:\n                case 42:\n                case 43:\n                case 44:\n                case 45:\n                case 46:\n                case 47:\n                case 58:\n                case 59:\n                case 60:\n                case 61:\n                case 62:\n                case 63:\n                case 64:\n                case 91:\n                case 92:\n                case 93:\n                case 94:\n                case 95:\n                case 96:\n                case 123:\n                case 124:\n                case 125:\n                case 126:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        function normalizeReference(str) {\n            str = str.trim().replace(/\\s+/g, \" \");\n            if (\"ẞ\".toLowerCase() === \"Ṿ\") {\n                str = str.replace(/ẞ/g, \"\\xdf\");\n            }\n            return str.toLowerCase().toUpperCase();\n        }\n        exports.lib = {};\n        exports.lib.mdurl = require_mdurl();\n        exports.lib.ucmicro = require_uc();\n        exports.assign = assign;\n        exports.isString = isString;\n        exports.has = has;\n        exports.unescapeMd = unescapeMd;\n        exports.unescapeAll = unescapeAll;\n        exports.isValidEntityCode = isValidEntityCode;\n        exports.fromCodePoint = fromCodePoint;\n        exports.escapeHtml = escapeHtml2;\n        exports.arrayReplaceAt = arrayReplaceAt;\n        exports.isSpace = isSpace;\n        exports.isWhiteSpace = isWhiteSpace;\n        exports.isMdAsciiPunct = isMdAsciiPunct;\n        exports.isPunctChar = isPunctChar;\n        exports.escapeRE = escapeRE;\n        exports.normalizeReference = normalizeReference;\n    }\n});\n// node_modules/markdown-it/lib/helpers/parse_link_label.js\nvar require_parse_link_label = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/parse_link_label.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function parseLinkLabel(state, start, disableNested) {\n            var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;\n            state.pos = start + 1;\n            level = 1;\n            while(state.pos < max2){\n                marker = state.src.charCodeAt(state.pos);\n                if (marker === 93) {\n                    level--;\n                    if (level === 0) {\n                        found = true;\n                        break;\n                    }\n                }\n                prevPos = state.pos;\n                state.md.inline.skipToken(state);\n                if (marker === 91) {\n                    if (prevPos === state.pos - 1) {\n                        level++;\n                    } else if (disableNested) {\n                        state.pos = oldPos;\n                        return -1;\n                    }\n                }\n            }\n            if (found) {\n                labelEnd = state.pos;\n            }\n            state.pos = oldPos;\n            return labelEnd;\n        };\n    }\n});\n// node_modules/markdown-it/lib/helpers/parse_link_destination.js\nvar require_parse_link_destination = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/parse_link_destination.js\" (exports, module) {\n        \"use strict\";\n        var unescapeAll = require_utils().unescapeAll;\n        module.exports = function parseLinkDestination(str, pos, max2) {\n            var code2, level, lines = 0, start = pos, result = {\n                ok: false,\n                pos: 0,\n                lines: 0,\n                str: \"\"\n            };\n            if (str.charCodeAt(pos) === 60) {\n                pos++;\n                while(pos < max2){\n                    code2 = str.charCodeAt(pos);\n                    if (code2 === 10) {\n                        return result;\n                    }\n                    if (code2 === 60) {\n                        return result;\n                    }\n                    if (code2 === 62) {\n                        result.pos = pos + 1;\n                        result.str = unescapeAll(str.slice(start + 1, pos));\n                        result.ok = true;\n                        return result;\n                    }\n                    if (code2 === 92 && pos + 1 < max2) {\n                        pos += 2;\n                        continue;\n                    }\n                    pos++;\n                }\n                return result;\n            }\n            level = 0;\n            while(pos < max2){\n                code2 = str.charCodeAt(pos);\n                if (code2 === 32) {\n                    break;\n                }\n                if (code2 < 32 || code2 === 127) {\n                    break;\n                }\n                if (code2 === 92 && pos + 1 < max2) {\n                    if (str.charCodeAt(pos + 1) === 32) {\n                        break;\n                    }\n                    pos += 2;\n                    continue;\n                }\n                if (code2 === 40) {\n                    level++;\n                    if (level > 32) {\n                        return result;\n                    }\n                }\n                if (code2 === 41) {\n                    if (level === 0) {\n                        break;\n                    }\n                    level--;\n                }\n                pos++;\n            }\n            if (start === pos) {\n                return result;\n            }\n            if (level !== 0) {\n                return result;\n            }\n            result.str = unescapeAll(str.slice(start, pos));\n            result.lines = lines;\n            result.pos = pos;\n            result.ok = true;\n            return result;\n        };\n    }\n});\n// node_modules/markdown-it/lib/helpers/parse_link_title.js\nvar require_parse_link_title = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/parse_link_title.js\" (exports, module) {\n        \"use strict\";\n        var unescapeAll = require_utils().unescapeAll;\n        module.exports = function parseLinkTitle(str, pos, max2) {\n            var code2, marker, lines = 0, start = pos, result = {\n                ok: false,\n                pos: 0,\n                lines: 0,\n                str: \"\"\n            };\n            if (pos >= max2) {\n                return result;\n            }\n            marker = str.charCodeAt(pos);\n            if (marker !== 34 && marker !== 39 && marker !== 40) {\n                return result;\n            }\n            pos++;\n            if (marker === 40) {\n                marker = 41;\n            }\n            while(pos < max2){\n                code2 = str.charCodeAt(pos);\n                if (code2 === marker) {\n                    result.pos = pos + 1;\n                    result.lines = lines;\n                    result.str = unescapeAll(str.slice(start + 1, pos));\n                    result.ok = true;\n                    return result;\n                } else if (code2 === 40 && marker === 41) {\n                    return result;\n                } else if (code2 === 10) {\n                    lines++;\n                } else if (code2 === 92 && pos + 1 < max2) {\n                    pos++;\n                    if (str.charCodeAt(pos) === 10) {\n                        lines++;\n                    }\n                }\n                pos++;\n            }\n            return result;\n        };\n    }\n});\n// node_modules/markdown-it/lib/helpers/index.js\nvar require_helpers = __commonJS({\n    \"node_modules/markdown-it/lib/helpers/index.js\" (exports) {\n        \"use strict\";\n        exports.parseLinkLabel = require_parse_link_label();\n        exports.parseLinkDestination = require_parse_link_destination();\n        exports.parseLinkTitle = require_parse_link_title();\n    }\n});\n// node_modules/markdown-it/lib/renderer.js\nvar require_renderer = __commonJS({\n    \"node_modules/markdown-it/lib/renderer.js\" (exports, module) {\n        \"use strict\";\n        var assign = require_utils().assign;\n        var unescapeAll = require_utils().unescapeAll;\n        var escapeHtml2 = require_utils().escapeHtml;\n        var default_rules = {};\n        default_rules.code_inline = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx];\n            return \"<code\" + slf.renderAttrs(token) + \">\" + escapeHtml2(tokens[idx].content) + \"</code>\";\n        };\n        default_rules.code_block = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx];\n            return \"<pre\" + slf.renderAttrs(token) + \"><code>\" + escapeHtml2(tokens[idx].content) + \"</code></pre>\\n\";\n        };\n        default_rules.fence = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : \"\", langName = \"\", langAttrs = \"\", highlighted, i, arr, tmpAttrs, tmpToken;\n            if (info) {\n                arr = info.split(/(\\s+)/g);\n                langName = arr[0];\n                langAttrs = arr.slice(2).join(\"\");\n            }\n            if (options.highlight) {\n                highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);\n            } else {\n                highlighted = escapeHtml2(token.content);\n            }\n            if (highlighted.indexOf(\"<pre\") === 0) {\n                return highlighted + \"\\n\";\n            }\n            if (info) {\n                i = token.attrIndex(\"class\");\n                tmpAttrs = token.attrs ? token.attrs.slice() : [];\n                if (i < 0) {\n                    tmpAttrs.push([\n                        \"class\",\n                        options.langPrefix + langName\n                    ]);\n                } else {\n                    tmpAttrs[i] = tmpAttrs[i].slice();\n                    tmpAttrs[i][1] += \" \" + options.langPrefix + langName;\n                }\n                tmpToken = {\n                    attrs: tmpAttrs\n                };\n                return \"<pre><code\" + slf.renderAttrs(tmpToken) + \">\" + highlighted + \"</code></pre>\\n\";\n            }\n            return \"<pre><code\" + slf.renderAttrs(token) + \">\" + highlighted + \"</code></pre>\\n\";\n        };\n        default_rules.image = function(tokens, idx, options, env, slf) {\n            var token = tokens[idx];\n            token.attrs[token.attrIndex(\"alt\")][1] = slf.renderInlineAsText(token.children, options, env);\n            return slf.renderToken(tokens, idx, options);\n        };\n        default_rules.hardbreak = function(tokens, idx, options) {\n            return options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\";\n        };\n        default_rules.softbreak = function(tokens, idx, options) {\n            return options.breaks ? options.xhtmlOut ? \"<br />\\n\" : \"<br>\\n\" : \"\\n\";\n        };\n        default_rules.text = function(tokens, idx) {\n            return escapeHtml2(tokens[idx].content);\n        };\n        default_rules.html_block = function(tokens, idx) {\n            return tokens[idx].content;\n        };\n        default_rules.html_inline = function(tokens, idx) {\n            return tokens[idx].content;\n        };\n        function Renderer() {\n            this.rules = assign({}, default_rules);\n        }\n        Renderer.prototype.renderAttrs = function renderAttrs(token) {\n            var i, l, result;\n            if (!token.attrs) {\n                return \"\";\n            }\n            result = \"\";\n            for(i = 0, l = token.attrs.length; i < l; i++){\n                result += \" \" + escapeHtml2(token.attrs[i][0]) + '=\"' + escapeHtml2(token.attrs[i][1]) + '\"';\n            }\n            return result;\n        };\n        Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n            var nextToken, result = \"\", needLf = false, token = tokens[idx];\n            if (token.hidden) {\n                return \"\";\n            }\n            if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n                result += \"\\n\";\n            }\n            result += (token.nesting === -1 ? \"</\" : \"<\") + token.tag;\n            result += this.renderAttrs(token);\n            if (token.nesting === 0 && options.xhtmlOut) {\n                result += \" /\";\n            }\n            if (token.block) {\n                needLf = true;\n                if (token.nesting === 1) {\n                    if (idx + 1 < tokens.length) {\n                        nextToken = tokens[idx + 1];\n                        if (nextToken.type === \"inline\" || nextToken.hidden) {\n                            needLf = false;\n                        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n                            needLf = false;\n                        }\n                    }\n                }\n            }\n            result += needLf ? \">\\n\" : \">\";\n            return result;\n        };\n        Renderer.prototype.renderInline = function(tokens, options, env) {\n            var type, result = \"\", rules = this.rules;\n            for(var i = 0, len = tokens.length; i < len; i++){\n                type = tokens[i].type;\n                if (typeof rules[type] !== \"undefined\") {\n                    result += rules[type](tokens, i, options, env, this);\n                } else {\n                    result += this.renderToken(tokens, i, options);\n                }\n            }\n            return result;\n        };\n        Renderer.prototype.renderInlineAsText = function(tokens, options, env) {\n            var result = \"\";\n            for(var i = 0, len = tokens.length; i < len; i++){\n                if (tokens[i].type === \"text\") {\n                    result += tokens[i].content;\n                } else if (tokens[i].type === \"image\") {\n                    result += this.renderInlineAsText(tokens[i].children, options, env);\n                } else if (tokens[i].type === \"softbreak\") {\n                    result += \"\\n\";\n                }\n            }\n            return result;\n        };\n        Renderer.prototype.render = function(tokens, options, env) {\n            var i, len, type, result = \"\", rules = this.rules;\n            for(i = 0, len = tokens.length; i < len; i++){\n                type = tokens[i].type;\n                if (type === \"inline\") {\n                    result += this.renderInline(tokens[i].children, options, env);\n                } else if (typeof rules[type] !== \"undefined\") {\n                    result += rules[tokens[i].type](tokens, i, options, env, this);\n                } else {\n                    result += this.renderToken(tokens, i, options, env);\n                }\n            }\n            return result;\n        };\n        module.exports = Renderer;\n    }\n});\n// node_modules/markdown-it/lib/ruler.js\nvar require_ruler = __commonJS({\n    \"node_modules/markdown-it/lib/ruler.js\" (exports, module) {\n        \"use strict\";\n        function Ruler() {\n            this.__rules__ = [];\n            this.__cache__ = null;\n        }\n        Ruler.prototype.__find__ = function(name) {\n            for(var i = 0; i < this.__rules__.length; i++){\n                if (this.__rules__[i].name === name) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        Ruler.prototype.__compile__ = function() {\n            var self = this;\n            var chains = [\n                \"\"\n            ];\n            self.__rules__.forEach(function(rule) {\n                if (!rule.enabled) {\n                    return;\n                }\n                rule.alt.forEach(function(altName) {\n                    if (chains.indexOf(altName) < 0) {\n                        chains.push(altName);\n                    }\n                });\n            });\n            self.__cache__ = {};\n            chains.forEach(function(chain) {\n                self.__cache__[chain] = [];\n                self.__rules__.forEach(function(rule) {\n                    if (!rule.enabled) {\n                        return;\n                    }\n                    if (chain && rule.alt.indexOf(chain) < 0) {\n                        return;\n                    }\n                    self.__cache__[chain].push(rule.fn);\n                });\n            });\n        };\n        Ruler.prototype.at = function(name, fn, options) {\n            var index = this.__find__(name);\n            var opt = options || {};\n            if (index === -1) {\n                throw new Error(\"Parser rule not found: \" + name);\n            }\n            this.__rules__[index].fn = fn;\n            this.__rules__[index].alt = opt.alt || [];\n            this.__cache__ = null;\n        };\n        Ruler.prototype.before = function(beforeName, ruleName, fn, options) {\n            var index = this.__find__(beforeName);\n            var opt = options || {};\n            if (index === -1) {\n                throw new Error(\"Parser rule not found: \" + beforeName);\n            }\n            this.__rules__.splice(index, 0, {\n                name: ruleName,\n                enabled: true,\n                fn,\n                alt: opt.alt || []\n            });\n            this.__cache__ = null;\n        };\n        Ruler.prototype.after = function(afterName, ruleName, fn, options) {\n            var index = this.__find__(afterName);\n            var opt = options || {};\n            if (index === -1) {\n                throw new Error(\"Parser rule not found: \" + afterName);\n            }\n            this.__rules__.splice(index + 1, 0, {\n                name: ruleName,\n                enabled: true,\n                fn,\n                alt: opt.alt || []\n            });\n            this.__cache__ = null;\n        };\n        Ruler.prototype.push = function(ruleName, fn, options) {\n            var opt = options || {};\n            this.__rules__.push({\n                name: ruleName,\n                enabled: true,\n                fn,\n                alt: opt.alt || []\n            });\n            this.__cache__ = null;\n        };\n        Ruler.prototype.enable = function(list2, ignoreInvalid) {\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            var result = [];\n            list2.forEach(function(name) {\n                var idx = this.__find__(name);\n                if (idx < 0) {\n                    if (ignoreInvalid) {\n                        return;\n                    }\n                    throw new Error(\"Rules manager: invalid rule name \" + name);\n                }\n                this.__rules__[idx].enabled = true;\n                result.push(name);\n            }, this);\n            this.__cache__ = null;\n            return result;\n        };\n        Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            this.__rules__.forEach(function(rule) {\n                rule.enabled = false;\n            });\n            this.enable(list2, ignoreInvalid);\n        };\n        Ruler.prototype.disable = function(list2, ignoreInvalid) {\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            var result = [];\n            list2.forEach(function(name) {\n                var idx = this.__find__(name);\n                if (idx < 0) {\n                    if (ignoreInvalid) {\n                        return;\n                    }\n                    throw new Error(\"Rules manager: invalid rule name \" + name);\n                }\n                this.__rules__[idx].enabled = false;\n                result.push(name);\n            }, this);\n            this.__cache__ = null;\n            return result;\n        };\n        Ruler.prototype.getRules = function(chainName) {\n            if (this.__cache__ === null) {\n                this.__compile__();\n            }\n            return this.__cache__[chainName] || [];\n        };\n        module.exports = Ruler;\n    }\n});\n// node_modules/markdown-it/lib/rules_core/normalize.js\nvar require_normalize = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/normalize.js\" (exports, module) {\n        \"use strict\";\n        var NEWLINES_RE = /\\r\\n?|\\n/g;\n        var NULL_RE = /\\0/g;\n        module.exports = function normalize(state) {\n            var str;\n            str = state.src.replace(NEWLINES_RE, \"\\n\");\n            str = str.replace(NULL_RE, \"�\");\n            state.src = str;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/block.js\nvar require_block = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/block.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function block4(state) {\n            var token;\n            if (state.inlineMode) {\n                token = new state.Token(\"inline\", \"\", 0);\n                token.content = state.src;\n                token.map = [\n                    0,\n                    1\n                ];\n                token.children = [];\n                state.tokens.push(token);\n            } else {\n                state.md.block.parse(state.src, state.md, state.env, state.tokens);\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/inline.js\nvar require_inline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/inline.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function inline4(state) {\n            var tokens = state.tokens, tok, i, l;\n            for(i = 0, l = tokens.length; i < l; i++){\n                tok = tokens[i];\n                if (tok.type === \"inline\") {\n                    state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/linkify.js\nvar require_linkify = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/linkify.js\" (exports, module) {\n        \"use strict\";\n        var arrayReplaceAt = require_utils().arrayReplaceAt;\n        function isLinkOpen(str) {\n            return /^<a[>\\s]/i.test(str);\n        }\n        function isLinkClose(str) {\n            return /^<\\/a\\s*>/i.test(str);\n        }\n        module.exports = function linkify(state) {\n            var i, j, l, tokens, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;\n            if (!state.md.options.linkify) {\n                return;\n            }\n            for(j = 0, l = blockTokens.length; j < l; j++){\n                if (blockTokens[j].type !== \"inline\" || !state.md.linkify.pretest(blockTokens[j].content)) {\n                    continue;\n                }\n                tokens = blockTokens[j].children;\n                htmlLinkLevel = 0;\n                for(i = tokens.length - 1; i >= 0; i--){\n                    currentToken = tokens[i];\n                    if (currentToken.type === \"link_close\") {\n                        i--;\n                        while(tokens[i].level !== currentToken.level && tokens[i].type !== \"link_open\"){\n                            i--;\n                        }\n                        continue;\n                    }\n                    if (currentToken.type === \"html_inline\") {\n                        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n                            htmlLinkLevel--;\n                        }\n                        if (isLinkClose(currentToken.content)) {\n                            htmlLinkLevel++;\n                        }\n                    }\n                    if (htmlLinkLevel > 0) {\n                        continue;\n                    }\n                    if (currentToken.type === \"text\" && state.md.linkify.test(currentToken.content)) {\n                        text2 = currentToken.content;\n                        links = state.md.linkify.match(text2);\n                        nodes = [];\n                        level = currentToken.level;\n                        lastPos = 0;\n                        for(ln = 0; ln < links.length; ln++){\n                            url = links[ln].url;\n                            fullUrl = state.md.normalizeLink(url);\n                            if (!state.md.validateLink(fullUrl)) {\n                                continue;\n                            }\n                            urlText = links[ln].text;\n                            if (!links[ln].schema) {\n                                urlText = state.md.normalizeLinkText(\"http://\" + urlText).replace(/^http:\\/\\//, \"\");\n                            } else if (links[ln].schema === \"mailto:\" && !/^mailto:/i.test(urlText)) {\n                                urlText = state.md.normalizeLinkText(\"mailto:\" + urlText).replace(/^mailto:/, \"\");\n                            } else {\n                                urlText = state.md.normalizeLinkText(urlText);\n                            }\n                            pos = links[ln].index;\n                            if (pos > lastPos) {\n                                token = new state.Token(\"text\", \"\", 0);\n                                token.content = text2.slice(lastPos, pos);\n                                token.level = level;\n                                nodes.push(token);\n                            }\n                            token = new state.Token(\"link_open\", \"a\", 1);\n                            token.attrs = [\n                                [\n                                    \"href\",\n                                    fullUrl\n                                ]\n                            ];\n                            token.level = level++;\n                            token.markup = \"linkify\";\n                            token.info = \"auto\";\n                            nodes.push(token);\n                            token = new state.Token(\"text\", \"\", 0);\n                            token.content = urlText;\n                            token.level = level;\n                            nodes.push(token);\n                            token = new state.Token(\"link_close\", \"a\", -1);\n                            token.level = --level;\n                            token.markup = \"linkify\";\n                            token.info = \"auto\";\n                            nodes.push(token);\n                            lastPos = links[ln].lastIndex;\n                        }\n                        if (lastPos < text2.length) {\n                            token = new state.Token(\"text\", \"\", 0);\n                            token.content = text2.slice(lastPos);\n                            token.level = level;\n                            nodes.push(token);\n                        }\n                        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n                    }\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/replacements.js\nvar require_replacements = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/replacements.js\" (exports, module) {\n        \"use strict\";\n        var RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n        var SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n        var SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\n        var SCOPED_ABBR = {\n            c: \"\\xa9\",\n            r: \"\\xae\",\n            p: \"\\xa7\",\n            tm: \"™\"\n        };\n        function replaceFn(match, name) {\n            return SCOPED_ABBR[name.toLowerCase()];\n        }\n        function replace_scoped(inlineTokens) {\n            var i, token, inside_autolink = 0;\n            for(i = inlineTokens.length - 1; i >= 0; i--){\n                token = inlineTokens[i];\n                if (token.type === \"text\" && !inside_autolink) {\n                    token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n                }\n                if (token.type === \"link_open\" && token.info === \"auto\") {\n                    inside_autolink--;\n                }\n                if (token.type === \"link_close\" && token.info === \"auto\") {\n                    inside_autolink++;\n                }\n            }\n        }\n        function replace_rare(inlineTokens) {\n            var i, token, inside_autolink = 0;\n            for(i = inlineTokens.length - 1; i >= 0; i--){\n                token = inlineTokens[i];\n                if (token.type === \"text\" && !inside_autolink) {\n                    if (RARE_RE.test(token.content)) {\n                        token.content = token.content.replace(/\\+-/g, \"\\xb1\").replace(/\\.{2,}/g, \"…\").replace(/([?!])…/g, \"$1..\").replace(/([?!]){4,}/g, \"$1$1$1\").replace(/,{2,}/g, \",\").replace(/(^|[^-])---(?=[^-]|$)/mg, \"$1—\").replace(/(^|\\s)--(?=\\s|$)/mg, \"$1–\").replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, \"$1–\");\n                    }\n                }\n                if (token.type === \"link_open\" && token.info === \"auto\") {\n                    inside_autolink--;\n                }\n                if (token.type === \"link_close\" && token.info === \"auto\") {\n                    inside_autolink++;\n                }\n            }\n        }\n        module.exports = function replace(state) {\n            var blkIdx;\n            if (!state.md.options.typographer) {\n                return;\n            }\n            for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n                if (state.tokens[blkIdx].type !== \"inline\") {\n                    continue;\n                }\n                if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n                    replace_scoped(state.tokens[blkIdx].children);\n                }\n                if (RARE_RE.test(state.tokens[blkIdx].content)) {\n                    replace_rare(state.tokens[blkIdx].children);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_core/smartquotes.js\nvar require_smartquotes = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/smartquotes.js\" (exports, module) {\n        \"use strict\";\n        var isWhiteSpace = require_utils().isWhiteSpace;\n        var isPunctChar = require_utils().isPunctChar;\n        var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n        var QUOTE_TEST_RE = /['\"]/;\n        var QUOTE_RE = /['\"]/g;\n        var APOSTROPHE = \"’\";\n        function replaceAt(str, index, ch) {\n            return str.substr(0, index) + ch + str.substr(index + 1);\n        }\n        function process_inlines(tokens, state) {\n            var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n            stack = [];\n            for(i = 0; i < tokens.length; i++){\n                token = tokens[i];\n                thisLevel = tokens[i].level;\n                for(j = stack.length - 1; j >= 0; j--){\n                    if (stack[j].level <= thisLevel) {\n                        break;\n                    }\n                }\n                stack.length = j + 1;\n                if (token.type !== \"text\") {\n                    continue;\n                }\n                text2 = token.content;\n                pos = 0;\n                max2 = text2.length;\n                OUTER: while(pos < max2){\n                    QUOTE_RE.lastIndex = pos;\n                    t = QUOTE_RE.exec(text2);\n                    if (!t) {\n                        break;\n                    }\n                    canOpen = canClose = true;\n                    pos = t.index + 1;\n                    isSingle = t[0] === \"'\";\n                    lastChar = 32;\n                    if (t.index - 1 >= 0) {\n                        lastChar = text2.charCodeAt(t.index - 1);\n                    } else {\n                        for(j = i - 1; j >= 0; j--){\n                            if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\") break;\n                            if (!tokens[j].content) continue;\n                            lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n                            break;\n                        }\n                    }\n                    nextChar = 32;\n                    if (pos < max2) {\n                        nextChar = text2.charCodeAt(pos);\n                    } else {\n                        for(j = i + 1; j < tokens.length; j++){\n                            if (tokens[j].type === \"softbreak\" || tokens[j].type === \"hardbreak\") break;\n                            if (!tokens[j].content) continue;\n                            nextChar = tokens[j].content.charCodeAt(0);\n                            break;\n                        }\n                    }\n                    isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n                    isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n                    isLastWhiteSpace = isWhiteSpace(lastChar);\n                    isNextWhiteSpace = isWhiteSpace(nextChar);\n                    if (isNextWhiteSpace) {\n                        canOpen = false;\n                    } else if (isNextPunctChar) {\n                        if (!(isLastWhiteSpace || isLastPunctChar)) {\n                            canOpen = false;\n                        }\n                    }\n                    if (isLastWhiteSpace) {\n                        canClose = false;\n                    } else if (isLastPunctChar) {\n                        if (!(isNextWhiteSpace || isNextPunctChar)) {\n                            canClose = false;\n                        }\n                    }\n                    if (nextChar === 34 && t[0] === '\"') {\n                        if (lastChar >= 48 && lastChar <= 57) {\n                            canClose = canOpen = false;\n                        }\n                    }\n                    if (canOpen && canClose) {\n                        canOpen = isLastPunctChar;\n                        canClose = isNextPunctChar;\n                    }\n                    if (!canOpen && !canClose) {\n                        if (isSingle) {\n                            token.content = replaceAt(token.content, t.index, APOSTROPHE);\n                        }\n                        continue;\n                    }\n                    if (canClose) {\n                        for(j = stack.length - 1; j >= 0; j--){\n                            item2 = stack[j];\n                            if (stack[j].level < thisLevel) {\n                                break;\n                            }\n                            if (item2.single === isSingle && stack[j].level === thisLevel) {\n                                item2 = stack[j];\n                                if (isSingle) {\n                                    openQuote = state.md.options.quotes[2];\n                                    closeQuote = state.md.options.quotes[3];\n                                } else {\n                                    openQuote = state.md.options.quotes[0];\n                                    closeQuote = state.md.options.quotes[1];\n                                }\n                                token.content = replaceAt(token.content, t.index, closeQuote);\n                                tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);\n                                pos += closeQuote.length - 1;\n                                if (item2.token === i) {\n                                    pos += openQuote.length - 1;\n                                }\n                                text2 = token.content;\n                                max2 = text2.length;\n                                stack.length = j;\n                                continue OUTER;\n                            }\n                        }\n                    }\n                    if (canOpen) {\n                        stack.push({\n                            token: i,\n                            pos: t.index,\n                            single: isSingle,\n                            level: thisLevel\n                        });\n                    } else if (canClose && isSingle) {\n                        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n                    }\n                }\n            }\n        }\n        module.exports = function smartquotes(state) {\n            var blkIdx;\n            if (!state.md.options.typographer) {\n                return;\n            }\n            for(blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--){\n                if (state.tokens[blkIdx].type !== \"inline\" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n                    continue;\n                }\n                process_inlines(state.tokens[blkIdx].children, state);\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/token.js\nvar require_token = __commonJS({\n    \"node_modules/markdown-it/lib/token.js\" (exports, module) {\n        \"use strict\";\n        function Token(type, tag, nesting) {\n            this.type = type;\n            this.tag = tag;\n            this.attrs = null;\n            this.map = null;\n            this.nesting = nesting;\n            this.level = 0;\n            this.children = null;\n            this.content = \"\";\n            this.markup = \"\";\n            this.info = \"\";\n            this.meta = null;\n            this.block = false;\n            this.hidden = false;\n        }\n        Token.prototype.attrIndex = function attrIndex(name) {\n            var attrs, i, len;\n            if (!this.attrs) {\n                return -1;\n            }\n            attrs = this.attrs;\n            for(i = 0, len = attrs.length; i < len; i++){\n                if (attrs[i][0] === name) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n        Token.prototype.attrPush = function attrPush(attrData) {\n            if (this.attrs) {\n                this.attrs.push(attrData);\n            } else {\n                this.attrs = [\n                    attrData\n                ];\n            }\n        };\n        Token.prototype.attrSet = function attrSet(name, value) {\n            var idx = this.attrIndex(name), attrData = [\n                name,\n                value\n            ];\n            if (idx < 0) {\n                this.attrPush(attrData);\n            } else {\n                this.attrs[idx] = attrData;\n            }\n        };\n        Token.prototype.attrGet = function attrGet(name) {\n            var idx = this.attrIndex(name), value = null;\n            if (idx >= 0) {\n                value = this.attrs[idx][1];\n            }\n            return value;\n        };\n        Token.prototype.attrJoin = function attrJoin(name, value) {\n            var idx = this.attrIndex(name);\n            if (idx < 0) {\n                this.attrPush([\n                    name,\n                    value\n                ]);\n            } else {\n                this.attrs[idx][1] = this.attrs[idx][1] + \" \" + value;\n            }\n        };\n        module.exports = Token;\n    }\n});\n// node_modules/markdown-it/lib/rules_core/state_core.js\nvar require_state_core = __commonJS({\n    \"node_modules/markdown-it/lib/rules_core/state_core.js\" (exports, module) {\n        \"use strict\";\n        var Token = require_token();\n        function StateCore(src, md, env) {\n            this.src = src;\n            this.env = env;\n            this.tokens = [];\n            this.inlineMode = false;\n            this.md = md;\n        }\n        StateCore.prototype.Token = Token;\n        module.exports = StateCore;\n    }\n});\n// node_modules/markdown-it/lib/parser_core.js\nvar require_parser_core = __commonJS({\n    \"node_modules/markdown-it/lib/parser_core.js\" (exports, module) {\n        \"use strict\";\n        var Ruler = require_ruler();\n        var _rules = [\n            [\n                \"normalize\",\n                require_normalize()\n            ],\n            [\n                \"block\",\n                require_block()\n            ],\n            [\n                \"inline\",\n                require_inline()\n            ],\n            [\n                \"linkify\",\n                require_linkify()\n            ],\n            [\n                \"replacements\",\n                require_replacements()\n            ],\n            [\n                \"smartquotes\",\n                require_smartquotes()\n            ]\n        ];\n        function Core() {\n            this.ruler = new Ruler();\n            for(var i = 0; i < _rules.length; i++){\n                this.ruler.push(_rules[i][0], _rules[i][1]);\n            }\n        }\n        Core.prototype.process = function(state) {\n            var i, l, rules;\n            rules = this.ruler.getRules(\"\");\n            for(i = 0, l = rules.length; i < l; i++){\n                rules[i](state);\n            }\n        };\n        Core.prototype.State = require_state_core();\n        module.exports = Core;\n    }\n});\n// node_modules/markdown-it/lib/rules_block/table.js\nvar require_table = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/table.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        function getLine2(state, line) {\n            var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];\n            return state.src.substr(pos, max2 - pos);\n        }\n        function escapedSplit(str) {\n            var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = \"\";\n            ch = str.charCodeAt(pos);\n            while(pos < max2){\n                if (ch === 124) {\n                    if (!isEscaped) {\n                        result.push(current + str.substring(lastPos, pos));\n                        current = \"\";\n                        lastPos = pos + 1;\n                    } else {\n                        current += str.substring(lastPos, pos - 1);\n                        lastPos = pos;\n                    }\n                }\n                isEscaped = ch === 92;\n                pos++;\n                ch = str.charCodeAt(pos);\n            }\n            result.push(current + str.substring(lastPos));\n            return result;\n        }\n        module.exports = function table3(state, startLine, endLine, silent) {\n            var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;\n            if (startLine + 2 > endLine) {\n                return false;\n            }\n            nextLine = startLine + 1;\n            if (state.sCount[nextLine] < state.blkIndent) {\n                return false;\n            }\n            if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            pos = state.bMarks[nextLine] + state.tShift[nextLine];\n            if (pos >= state.eMarks[nextLine]) {\n                return false;\n            }\n            firstCh = state.src.charCodeAt(pos++);\n            if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {\n                return false;\n            }\n            if (pos >= state.eMarks[nextLine]) {\n                return false;\n            }\n            secondCh = state.src.charCodeAt(pos++);\n            if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {\n                return false;\n            }\n            if (firstCh === 45 && isSpace(secondCh)) {\n                return false;\n            }\n            while(pos < state.eMarks[nextLine]){\n                ch = state.src.charCodeAt(pos);\n                if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {\n                    return false;\n                }\n                pos++;\n            }\n            lineText = getLine2(state, startLine + 1);\n            columns = lineText.split(\"|\");\n            aligns = [];\n            for(i = 0; i < columns.length; i++){\n                t = columns[i].trim();\n                if (!t) {\n                    if (i === 0 || i === columns.length - 1) {\n                        continue;\n                    } else {\n                        return false;\n                    }\n                }\n                if (!/^:?-+:?$/.test(t)) {\n                    return false;\n                }\n                if (t.charCodeAt(t.length - 1) === 58) {\n                    aligns.push(t.charCodeAt(0) === 58 ? \"center\" : \"right\");\n                } else if (t.charCodeAt(0) === 58) {\n                    aligns.push(\"left\");\n                } else {\n                    aligns.push(\"\");\n                }\n            }\n            lineText = getLine2(state, startLine).trim();\n            if (lineText.indexOf(\"|\") === -1) {\n                return false;\n            }\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            columns = escapedSplit(lineText);\n            if (columns.length && columns[0] === \"\") columns.shift();\n            if (columns.length && columns[columns.length - 1] === \"\") columns.pop();\n            columnCount = columns.length;\n            if (columnCount === 0 || columnCount !== aligns.length) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            oldParentType = state.parentType;\n            state.parentType = \"table\";\n            terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n            token = state.push(\"table_open\", \"table\", 1);\n            token.map = tableLines = [\n                startLine,\n                0\n            ];\n            token = state.push(\"thead_open\", \"thead\", 1);\n            token.map = [\n                startLine,\n                startLine + 1\n            ];\n            token = state.push(\"tr_open\", \"tr\", 1);\n            token.map = [\n                startLine,\n                startLine + 1\n            ];\n            for(i = 0; i < columns.length; i++){\n                token = state.push(\"th_open\", \"th\", 1);\n                if (aligns[i]) {\n                    token.attrs = [\n                        [\n                            \"style\",\n                            \"text-align:\" + aligns[i]\n                        ]\n                    ];\n                }\n                token = state.push(\"inline\", \"\", 0);\n                token.content = columns[i].trim();\n                token.children = [];\n                token = state.push(\"th_close\", \"th\", -1);\n            }\n            token = state.push(\"tr_close\", \"tr\", -1);\n            token = state.push(\"thead_close\", \"thead\", -1);\n            for(nextLine = startLine + 2; nextLine < endLine; nextLine++){\n                if (state.sCount[nextLine] < state.blkIndent) {\n                    break;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n                lineText = getLine2(state, nextLine).trim();\n                if (!lineText) {\n                    break;\n                }\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n                    break;\n                }\n                columns = escapedSplit(lineText);\n                if (columns.length && columns[0] === \"\") columns.shift();\n                if (columns.length && columns[columns.length - 1] === \"\") columns.pop();\n                if (nextLine === startLine + 2) {\n                    token = state.push(\"tbody_open\", \"tbody\", 1);\n                    token.map = tbodyLines = [\n                        startLine + 2,\n                        0\n                    ];\n                }\n                token = state.push(\"tr_open\", \"tr\", 1);\n                token.map = [\n                    nextLine,\n                    nextLine + 1\n                ];\n                for(i = 0; i < columnCount; i++){\n                    token = state.push(\"td_open\", \"td\", 1);\n                    if (aligns[i]) {\n                        token.attrs = [\n                            [\n                                \"style\",\n                                \"text-align:\" + aligns[i]\n                            ]\n                        ];\n                    }\n                    token = state.push(\"inline\", \"\", 0);\n                    token.content = columns[i] ? columns[i].trim() : \"\";\n                    token.children = [];\n                    token = state.push(\"td_close\", \"td\", -1);\n                }\n                token = state.push(\"tr_close\", \"tr\", -1);\n            }\n            if (tbodyLines) {\n                token = state.push(\"tbody_close\", \"tbody\", -1);\n                tbodyLines[1] = nextLine;\n            }\n            token = state.push(\"table_close\", \"table\", -1);\n            tableLines[1] = nextLine;\n            state.parentType = oldParentType;\n            state.line = nextLine;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/code.js\nvar require_code = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/code.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function code2(state, startLine, endLine) {\n            if (state.md.options.allowIndentation) {\n                return false;\n            }\n            var nextLine, last, token;\n            if (state.sCount[startLine] - state.blkIndent < 4) {\n                return false;\n            }\n            last = nextLine = startLine + 1;\n            while(nextLine < endLine){\n                if (state.isEmpty(nextLine)) {\n                    nextLine++;\n                    continue;\n                }\n                if (state.sCount[nextLine] - state.blkIndent >= 4) {\n                    nextLine++;\n                    last = nextLine;\n                    continue;\n                }\n                break;\n            }\n            state.line = last;\n            token = state.push(\"code_block\", \"code\", 0);\n            token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + \"\\n\";\n            token.map = [\n                startLine,\n                state.line\n            ];\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/fence.js\nvar require_fence = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/fence.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function fence3(state, startLine, endLine, silent) {\n            var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (pos + 3 > max2) {\n                return false;\n            }\n            marker = state.src.charCodeAt(pos);\n            if (marker !== 126 && marker !== 96) {\n                return false;\n            }\n            mem = pos;\n            pos = state.skipChars(pos, marker);\n            len = pos - mem;\n            if (len < 3) {\n                return false;\n            }\n            markup = state.src.slice(mem, pos);\n            params = state.src.slice(pos, max2);\n            if (marker === 96) {\n                if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n                    return false;\n                }\n            }\n            if (silent) {\n                return true;\n            }\n            nextLine = startLine;\n            for(;;){\n                nextLine++;\n                if (nextLine >= endLine) {\n                    break;\n                }\n                pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n                max2 = state.eMarks[nextLine];\n                if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {\n                    break;\n                }\n                if (state.src.charCodeAt(pos) !== marker) {\n                    continue;\n                }\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {\n                    continue;\n                }\n                pos = state.skipChars(pos, marker);\n                if (pos - mem < len) {\n                    continue;\n                }\n                pos = state.skipSpaces(pos);\n                if (pos < max2) {\n                    continue;\n                }\n                haveEndMarker = true;\n                break;\n            }\n            len = state.sCount[startLine];\n            state.line = nextLine + (haveEndMarker ? 1 : 0);\n            token = state.push(\"fence\", \"code\", 0);\n            token.info = params;\n            token.content = state.getLines(startLine + 1, nextLine, len, true);\n            token.markup = markup;\n            token.map = [\n                startLine,\n                state.line\n            ];\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/blockquote.js\nvar require_blockquote = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/blockquote.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module.exports = function blockquote2(state, startLine, endLine, silent) {\n            var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos++) !== 62) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            initial = offset = state.sCount[startLine] + 1;\n            if (state.src.charCodeAt(pos) === 32) {\n                pos++;\n                initial++;\n                offset++;\n                adjustTab = false;\n                spaceAfterMarker = true;\n            } else if (state.src.charCodeAt(pos) === 9) {\n                spaceAfterMarker = true;\n                if ((state.bsCount[startLine] + offset) % 4 === 3) {\n                    pos++;\n                    initial++;\n                    offset++;\n                    adjustTab = false;\n                } else {\n                    adjustTab = true;\n                }\n            } else {\n                spaceAfterMarker = false;\n            }\n            oldBMarks = [\n                state.bMarks[startLine]\n            ];\n            state.bMarks[startLine] = pos;\n            while(pos < max2){\n                ch = state.src.charCodeAt(pos);\n                if (isSpace(ch)) {\n                    if (ch === 9) {\n                        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n                    } else {\n                        offset++;\n                    }\n                } else {\n                    break;\n                }\n                pos++;\n            }\n            oldBSCount = [\n                state.bsCount[startLine]\n            ];\n            state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n            lastLineEmpty = pos >= max2;\n            oldSCount = [\n                state.sCount[startLine]\n            ];\n            state.sCount[startLine] = offset - initial;\n            oldTShift = [\n                state.tShift[startLine]\n            ];\n            state.tShift[startLine] = pos - state.bMarks[startLine];\n            terminatorRules = state.md.block.ruler.getRules(\"blockquote\");\n            oldParentType = state.parentType;\n            state.parentType = \"blockquote\";\n            for(nextLine = startLine + 1; nextLine < endLine; nextLine++){\n                isOutdented = state.sCount[nextLine] < state.blkIndent;\n                pos = state.bMarks[nextLine] + state.tShift[nextLine];\n                max2 = state.eMarks[nextLine];\n                if (pos >= max2) {\n                    break;\n                }\n                if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {\n                    initial = offset = state.sCount[nextLine] + 1;\n                    if (state.src.charCodeAt(pos) === 32) {\n                        pos++;\n                        initial++;\n                        offset++;\n                        adjustTab = false;\n                        spaceAfterMarker = true;\n                    } else if (state.src.charCodeAt(pos) === 9) {\n                        spaceAfterMarker = true;\n                        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n                            pos++;\n                            initial++;\n                            offset++;\n                            adjustTab = false;\n                        } else {\n                            adjustTab = true;\n                        }\n                    } else {\n                        spaceAfterMarker = false;\n                    }\n                    oldBMarks.push(state.bMarks[nextLine]);\n                    state.bMarks[nextLine] = pos;\n                    while(pos < max2){\n                        ch = state.src.charCodeAt(pos);\n                        if (isSpace(ch)) {\n                            if (ch === 9) {\n                                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n                            } else {\n                                offset++;\n                            }\n                        } else {\n                            break;\n                        }\n                        pos++;\n                    }\n                    lastLineEmpty = pos >= max2;\n                    oldBSCount.push(state.bsCount[nextLine]);\n                    state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n                    oldSCount.push(state.sCount[nextLine]);\n                    state.sCount[nextLine] = offset - initial;\n                    oldTShift.push(state.tShift[nextLine]);\n                    state.tShift[nextLine] = pos - state.bMarks[nextLine];\n                    continue;\n                }\n                if (lastLineEmpty) {\n                    break;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    state.lineMax = nextLine;\n                    if (state.blkIndent !== 0) {\n                        oldBMarks.push(state.bMarks[nextLine]);\n                        oldBSCount.push(state.bsCount[nextLine]);\n                        oldTShift.push(state.tShift[nextLine]);\n                        oldSCount.push(state.sCount[nextLine]);\n                        state.sCount[nextLine] -= state.blkIndent;\n                    }\n                    break;\n                }\n                oldBMarks.push(state.bMarks[nextLine]);\n                oldBSCount.push(state.bsCount[nextLine]);\n                oldTShift.push(state.tShift[nextLine]);\n                oldSCount.push(state.sCount[nextLine]);\n                state.sCount[nextLine] = -1;\n            }\n            oldIndent = state.blkIndent;\n            state.blkIndent = 0;\n            token = state.push(\"blockquote_open\", \"blockquote\", 1);\n            token.markup = \">\";\n            token.map = lines = [\n                startLine,\n                0\n            ];\n            state.md.block.tokenize(state, startLine, nextLine);\n            token = state.push(\"blockquote_close\", \"blockquote\", -1);\n            token.markup = \">\";\n            state.lineMax = oldLineMax;\n            state.parentType = oldParentType;\n            lines[1] = state.line;\n            for(i = 0; i < oldTShift.length; i++){\n                state.bMarks[i + startLine] = oldBMarks[i];\n                state.tShift[i + startLine] = oldTShift[i];\n                state.sCount[i + startLine] = oldSCount[i];\n                state.bsCount[i + startLine] = oldBSCount[i];\n            }\n            state.blkIndent = oldIndent;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/hr.js\nvar require_hr = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/hr.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module.exports = function hr2(state, startLine, endLine, silent) {\n            var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            marker = state.src.charCodeAt(pos++);\n            if (marker !== 42 && marker !== 45 && marker !== 95) {\n                return false;\n            }\n            cnt = 1;\n            while(pos < max2){\n                ch = state.src.charCodeAt(pos++);\n                if (ch !== marker && !isSpace(ch)) {\n                    return false;\n                }\n                if (ch === marker) {\n                    cnt++;\n                }\n            }\n            if (cnt < 3) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            state.line = startLine + 1;\n            token = state.push(\"hr\", \"hr\", 0);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/list.js\nvar require_list = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/list.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        function skipBulletListMarker(state, startLine) {\n            var marker, pos, max2, ch;\n            pos = state.bMarks[startLine] + state.tShift[startLine];\n            max2 = state.eMarks[startLine];\n            marker = state.src.charCodeAt(pos++);\n            if (marker !== 42 && marker !== 45 && marker !== 43) {\n                return -1;\n            }\n            if (pos < max2) {\n                ch = state.src.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    return -1;\n                }\n            }\n            return pos;\n        }\n        function skipOrderedListMarker(state, startLine) {\n            var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max2 = state.eMarks[startLine];\n            if (pos + 1 >= max2) {\n                return -1;\n            }\n            ch = state.src.charCodeAt(pos++);\n            if (ch < 48 || ch > 57) {\n                return -1;\n            }\n            for(;;){\n                if (pos >= max2) {\n                    return -1;\n                }\n                ch = state.src.charCodeAt(pos++);\n                if (ch >= 48 && ch <= 57) {\n                    if (pos - start >= 10) {\n                        return -1;\n                    }\n                    continue;\n                }\n                if (ch === 41 || ch === 46) {\n                    break;\n                }\n                return -1;\n            }\n            if (pos < max2) {\n                ch = state.src.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    return -1;\n                }\n            }\n            return pos;\n        }\n        function markTightParagraphs(state, idx) {\n            var i, l, level = state.level + 2;\n            for(i = idx + 2, l = state.tokens.length - 2; i < l; i++){\n                if (state.tokens[i].level === level && state.tokens[i].type === \"paragraph_open\") {\n                    state.tokens[i + 2].hidden = true;\n                    state.tokens[i].hidden = true;\n                    i += 2;\n                }\n            }\n        }\n        module.exports = function list2(state, startLine, endLine, silent) {\n            var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {\n                return false;\n            }\n            if (silent && state.parentType === \"paragraph\") {\n                if (state.sCount[startLine] >= state.blkIndent) {\n                    isTerminatingParagraph = true;\n                }\n            }\n            if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n                isOrdered = true;\n                start = state.bMarks[startLine] + state.tShift[startLine];\n                markerValue = Number(state.src.slice(start, posAfterMarker - 1));\n                if (isTerminatingParagraph && markerValue !== 1) return false;\n            } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n                isOrdered = false;\n            } else {\n                return false;\n            }\n            if (isTerminatingParagraph) {\n                if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n            }\n            markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n            if (silent) {\n                return true;\n            }\n            listTokIdx = state.tokens.length;\n            if (isOrdered) {\n                token = state.push(\"ordered_list_open\", \"ol\", 1);\n                if (markerValue !== 1) {\n                    token.attrs = [\n                        [\n                            \"start\",\n                            markerValue\n                        ]\n                    ];\n                }\n            } else {\n                token = state.push(\"bullet_list_open\", \"ul\", 1);\n            }\n            token.map = listLines = [\n                startLine,\n                0\n            ];\n            token.markup = String.fromCharCode(markerCharCode);\n            nextLine = startLine;\n            prevEmptyEnd = false;\n            terminatorRules = state.md.block.ruler.getRules(\"list\");\n            oldParentType = state.parentType;\n            state.parentType = \"list\";\n            while(nextLine < endLine){\n                pos = posAfterMarker;\n                max2 = state.eMarks[nextLine];\n                initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n                while(pos < max2){\n                    ch = state.src.charCodeAt(pos);\n                    if (ch === 9) {\n                        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n                    } else if (ch === 32) {\n                        offset++;\n                    } else {\n                        break;\n                    }\n                    pos++;\n                }\n                contentStart = pos;\n                if (contentStart >= max2) {\n                    indentAfterMarker = 1;\n                } else {\n                    indentAfterMarker = offset - initial;\n                }\n                if (!state.md.options.allowIndentation && indentAfterMarker > 4) {\n                    indentAfterMarker = 1;\n                }\n                indent = initial + indentAfterMarker;\n                token = state.push(\"list_item_open\", \"li\", 1);\n                token.markup = String.fromCharCode(markerCharCode);\n                token.map = itemLines = [\n                    startLine,\n                    0\n                ];\n                if (isOrdered) {\n                    token.info = state.src.slice(start, posAfterMarker - 1);\n                }\n                oldTight = state.tight;\n                oldTShift = state.tShift[startLine];\n                oldSCount = state.sCount[startLine];\n                oldListIndent = state.listIndent;\n                state.listIndent = state.blkIndent;\n                state.blkIndent = indent;\n                state.tight = true;\n                state.tShift[startLine] = contentStart - state.bMarks[startLine];\n                state.sCount[startLine] = offset;\n                if (contentStart >= max2 && state.isEmpty(startLine + 1)) {\n                    state.line = Math.min(state.line + 2, endLine);\n                } else {\n                    state.md.block.tokenize(state, startLine, endLine, true);\n                }\n                if (!state.tight || prevEmptyEnd) {\n                    tight = false;\n                }\n                prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);\n                state.blkIndent = state.listIndent;\n                state.listIndent = oldListIndent;\n                state.tShift[startLine] = oldTShift;\n                state.sCount[startLine] = oldSCount;\n                state.tight = oldTight;\n                token = state.push(\"list_item_close\", \"li\", -1);\n                token.markup = String.fromCharCode(markerCharCode);\n                nextLine = startLine = state.line;\n                itemLines[1] = nextLine;\n                contentStart = state.bMarks[startLine];\n                if (nextLine >= endLine) {\n                    break;\n                }\n                if (state.sCount[nextLine] < state.blkIndent) {\n                    break;\n                }\n                if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                    break;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n                if (isOrdered) {\n                    posAfterMarker = skipOrderedListMarker(state, nextLine);\n                    if (posAfterMarker < 0) {\n                        break;\n                    }\n                    start = state.bMarks[nextLine] + state.tShift[nextLine];\n                } else {\n                    posAfterMarker = skipBulletListMarker(state, nextLine);\n                    if (posAfterMarker < 0) {\n                        break;\n                    }\n                }\n                if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {\n                    break;\n                }\n            }\n            if (isOrdered) {\n                token = state.push(\"ordered_list_close\", \"ol\", -1);\n            } else {\n                token = state.push(\"bullet_list_close\", \"ul\", -1);\n            }\n            token.markup = String.fromCharCode(markerCharCode);\n            listLines[1] = nextLine;\n            state.line = nextLine;\n            state.parentType = oldParentType;\n            if (tight) {\n                markTightParagraphs(state, listTokIdx);\n            }\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/reference.js\nvar require_reference = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/reference.js\" (exports, module) {\n        \"use strict\";\n        var normalizeReference = require_utils().normalizeReference;\n        var isSpace = require_utils().isSpace;\n        module.exports = function reference(state, startLine, _endLine, silent) {\n            var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos) !== 91) {\n                return false;\n            }\n            while(++pos < max2){\n                if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {\n                    if (pos + 1 === max2) {\n                        return false;\n                    }\n                    if (state.src.charCodeAt(pos + 1) !== 58) {\n                        return false;\n                    }\n                    break;\n                }\n            }\n            endLine = state.lineMax;\n            terminatorRules = state.md.block.ruler.getRules(\"reference\");\n            oldParentType = state.parentType;\n            state.parentType = \"reference\";\n            for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n                    continue;\n                }\n                if (state.sCount[nextLine] < 0) {\n                    continue;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n            }\n            str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n            max2 = str.length;\n            for(pos = 1; pos < max2; pos++){\n                ch = str.charCodeAt(pos);\n                if (ch === 91) {\n                    return false;\n                } else if (ch === 93) {\n                    labelEnd = pos;\n                    break;\n                } else if (ch === 10) {\n                    lines++;\n                } else if (ch === 92) {\n                    pos++;\n                    if (pos < max2 && str.charCodeAt(pos) === 10) {\n                        lines++;\n                    }\n                }\n            }\n            if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {\n                return false;\n            }\n            for(pos = labelEnd + 2; pos < max2; pos++){\n                ch = str.charCodeAt(pos);\n                if (ch === 10) {\n                    lines++;\n                } else if (isSpace(ch)) {} else {\n                    break;\n                }\n            }\n            res = state.md.helpers.parseLinkDestination(str, pos, max2);\n            if (!res.ok) {\n                return false;\n            }\n            href = state.md.normalizeLink(res.str);\n            if (!state.md.validateLink(href)) {\n                return false;\n            }\n            pos = res.pos;\n            lines += res.lines;\n            destEndPos = pos;\n            destEndLineNo = lines;\n            start = pos;\n            for(; pos < max2; pos++){\n                ch = str.charCodeAt(pos);\n                if (ch === 10) {\n                    lines++;\n                } else if (isSpace(ch)) {} else {\n                    break;\n                }\n            }\n            res = state.md.helpers.parseLinkTitle(str, pos, max2);\n            if (pos < max2 && start !== pos && res.ok) {\n                title = res.str;\n                pos = res.pos;\n                lines += res.lines;\n            } else {\n                title = \"\";\n                pos = destEndPos;\n                lines = destEndLineNo;\n            }\n            while(pos < max2){\n                ch = str.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    break;\n                }\n                pos++;\n            }\n            if (pos < max2 && str.charCodeAt(pos) !== 10) {\n                if (title) {\n                    title = \"\";\n                    pos = destEndPos;\n                    lines = destEndLineNo;\n                    while(pos < max2){\n                        ch = str.charCodeAt(pos);\n                        if (!isSpace(ch)) {\n                            break;\n                        }\n                        pos++;\n                    }\n                }\n            }\n            if (pos < max2 && str.charCodeAt(pos) !== 10) {\n                return false;\n            }\n            label = normalizeReference(str.slice(1, labelEnd));\n            if (!label) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            if (typeof state.env.references === \"undefined\") {\n                state.env.references = {};\n            }\n            if (typeof state.env.references[label] === \"undefined\") {\n                state.env.references[label] = {\n                    title,\n                    href\n                };\n            }\n            state.parentType = oldParentType;\n            state.line = startLine + lines + 1;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/common/html_blocks.js\nvar require_html_blocks = __commonJS({\n    \"node_modules/markdown-it/lib/common/html_blocks.js\" (exports, module) {\n        \"use strict\";\n        module.exports = [\n            \"address\",\n            \"article\",\n            \"aside\",\n            \"base\",\n            \"basefont\",\n            \"blockquote\",\n            \"body\",\n            \"caption\",\n            \"center\",\n            \"col\",\n            \"colgroup\",\n            \"dd\",\n            \"details\",\n            \"dialog\",\n            \"dir\",\n            \"div\",\n            \"dl\",\n            \"dt\",\n            \"fieldset\",\n            \"figcaption\",\n            \"figure\",\n            \"footer\",\n            \"form\",\n            \"frame\",\n            \"frameset\",\n            \"h1\",\n            \"h2\",\n            \"h3\",\n            \"h4\",\n            \"h5\",\n            \"h6\",\n            \"head\",\n            \"header\",\n            \"hr\",\n            \"html\",\n            \"iframe\",\n            \"legend\",\n            \"li\",\n            \"link\",\n            \"main\",\n            \"menu\",\n            \"menuitem\",\n            \"nav\",\n            \"noframes\",\n            \"ol\",\n            \"optgroup\",\n            \"option\",\n            \"p\",\n            \"param\",\n            \"section\",\n            \"source\",\n            \"summary\",\n            \"table\",\n            \"tbody\",\n            \"td\",\n            \"tfoot\",\n            \"th\",\n            \"thead\",\n            \"title\",\n            \"tr\",\n            \"track\",\n            \"ul\"\n        ];\n    }\n});\n// node_modules/markdown-it/lib/common/html_re.js\nvar require_html_re = __commonJS({\n    \"node_modules/markdown-it/lib/common/html_re.js\" (exports, module) {\n        \"use strict\";\n        var attr_name = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\n        var unquoted = \"[^\\\"'=<>`\\\\x00-\\\\x20]+\";\n        var single_quoted = \"'[^']*'\";\n        var double_quoted = '\"[^\"]*\"';\n        var attr_value = \"(?:\" + unquoted + \"|\" + single_quoted + \"|\" + double_quoted + \")\";\n        var attribute = \"(?:\\\\s+\" + attr_name + \"(?:\\\\s*=\\\\s*\" + attr_value + \")?)\";\n        var open_tag = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + attribute + \"*\\\\s*\\\\/?>\";\n        var close_tag = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\";\n        var comment2 = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\n        var processing = \"<[?][\\\\s\\\\S]*?[?]>\";\n        var declaration = \"<![A-Z]+\\\\s+[^>]*>\";\n        var cdata = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\n        var HTML_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \"|\" + comment2 + \"|\" + processing + \"|\" + declaration + \"|\" + cdata + \")\");\n        var HTML_OPEN_CLOSE_TAG_RE = new RegExp(\"^(?:\" + open_tag + \"|\" + close_tag + \")\");\n        module.exports.HTML_TAG_RE = HTML_TAG_RE;\n        module.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n    }\n});\n// node_modules/markdown-it/lib/rules_block/html_block.js\nvar require_html_block = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/html_block.js\" (exports, module) {\n        \"use strict\";\n        var block_names = require_html_blocks();\n        var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;\n        var HTML_SEQUENCES = [\n            [\n                /^<(script|pre|style|textarea)(?=(\\s|>|$))/i,\n                /<\\/(script|pre|style|textarea)>/i,\n                true\n            ],\n            [\n                /^<!--/,\n                /-->/,\n                true\n            ],\n            [\n                /^<\\?/,\n                /\\?>/,\n                true\n            ],\n            [\n                /^<![A-Z]/,\n                />/,\n                true\n            ],\n            [\n                /^<!\\[CDATA\\[/,\n                /\\]\\]>/,\n                true\n            ],\n            [\n                new RegExp(\"^</?(\" + block_names.join(\"|\") + \")(?=(\\\\s|/?>|$))\", \"i\"),\n                /^$/,\n                true\n            ],\n            [\n                new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + \"\\\\s*$\"),\n                /^$/,\n                false\n            ]\n        ];\n        module.exports = function html_block(state, startLine, endLine, silent) {\n            var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            if (!state.md.options.html) {\n                return false;\n            }\n            if (state.src.charCodeAt(pos) !== 60) {\n                return false;\n            }\n            lineText = state.src.slice(pos, max2);\n            for(i = 0; i < HTML_SEQUENCES.length; i++){\n                if (HTML_SEQUENCES[i][0].test(lineText)) {\n                    break;\n                }\n            }\n            if (i === HTML_SEQUENCES.length) {\n                return false;\n            }\n            if (silent) {\n                return HTML_SEQUENCES[i][2];\n            }\n            nextLine = startLine + 1;\n            if (!HTML_SEQUENCES[i][1].test(lineText)) {\n                for(; nextLine < endLine; nextLine++){\n                    if (state.sCount[nextLine] < state.blkIndent) {\n                        break;\n                    }\n                    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n                    max2 = state.eMarks[nextLine];\n                    lineText = state.src.slice(pos, max2);\n                    if (HTML_SEQUENCES[i][1].test(lineText)) {\n                        if (lineText.length !== 0) {\n                            nextLine++;\n                        }\n                        break;\n                    }\n                }\n            }\n            state.line = nextLine;\n            token = state.push(\"html_block\", \"\", 0);\n            token.map = [\n                startLine,\n                nextLine\n            ];\n            token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/heading.js\nvar require_heading = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/heading.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module.exports = function heading2(state, startLine, endLine, silent) {\n            var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            ch = state.src.charCodeAt(pos);\n            if (ch !== 35 || pos >= max2) {\n                return false;\n            }\n            level = 1;\n            ch = state.src.charCodeAt(++pos);\n            while(ch === 35 && pos < max2 && level <= 6){\n                level++;\n                ch = state.src.charCodeAt(++pos);\n            }\n            if (level > 6 || pos < max2 && !isSpace(ch)) {\n                return false;\n            }\n            if (silent) {\n                return true;\n            }\n            max2 = state.skipSpacesBack(max2, pos);\n            tmp = state.skipCharsBack(max2, 35, pos);\n            if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n                max2 = tmp;\n            }\n            state.line = startLine + 1;\n            token = state.push(\"heading_open\", \"h\" + String(level), 1);\n            token.markup = \"########\".slice(0, level);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token = state.push(\"inline\", \"\", 0);\n            token.content = state.src.slice(pos, max2).trim();\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token.children = [];\n            token = state.push(\"heading_close\", \"h\" + String(level), -1);\n            token.markup = \"########\".slice(0, level);\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/lheading.js\nvar require_lheading = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/lheading.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function lheading(state, startLine, endLine) {\n            var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules(\"paragraph\");\n            if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {\n                return false;\n            }\n            oldParentType = state.parentType;\n            state.parentType = \"paragraph\";\n            for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n                    continue;\n                }\n                if (state.sCount[nextLine] >= state.blkIndent) {\n                    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n                    max2 = state.eMarks[nextLine];\n                    if (pos < max2) {\n                        marker = state.src.charCodeAt(pos);\n                        if (marker === 45 || marker === 61) {\n                            pos = state.skipChars(pos, marker);\n                            pos = state.skipSpaces(pos);\n                            if (pos >= max2) {\n                                level = marker === 61 ? 1 : 2;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (state.sCount[nextLine] < 0) {\n                    continue;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n            }\n            if (!level) {\n                return false;\n            }\n            content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n            state.line = nextLine + 1;\n            token = state.push(\"heading_open\", \"h\" + String(level), 1);\n            token.markup = String.fromCharCode(marker);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token = state.push(\"inline\", \"\", 0);\n            token.content = content;\n            token.map = [\n                startLine,\n                state.line - 1\n            ];\n            token.children = [];\n            token = state.push(\"heading_close\", \"h\" + String(level), -1);\n            token.markup = String.fromCharCode(marker);\n            state.parentType = oldParentType;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/paragraph.js\nvar require_paragraph = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/paragraph.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function paragraph2(state, startLine) {\n            var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules(\"paragraph\"), endLine = state.lineMax;\n            oldParentType = state.parentType;\n            state.parentType = \"paragraph\";\n            for(; nextLine < endLine && !state.isEmpty(nextLine); nextLine++){\n                if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {\n                    continue;\n                }\n                if (state.sCount[nextLine] < 0) {\n                    continue;\n                }\n                terminate = false;\n                for(i = 0, l = terminatorRules.length; i < l; i++){\n                    if (terminatorRules[i](state, nextLine, endLine, true)) {\n                        terminate = true;\n                        break;\n                    }\n                }\n                if (terminate) {\n                    break;\n                }\n            }\n            content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n            state.line = nextLine;\n            token = state.push(\"paragraph_open\", \"p\", 1);\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token = state.push(\"inline\", \"\", 0);\n            token.content = content;\n            token.map = [\n                startLine,\n                state.line\n            ];\n            token.children = [];\n            token = state.push(\"paragraph_close\", \"p\", -1);\n            state.parentType = oldParentType;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_block/state_block.js\nvar require_state_block = __commonJS({\n    \"node_modules/markdown-it/lib/rules_block/state_block.js\" (exports, module) {\n        \"use strict\";\n        var Token = require_token();\n        var isSpace = require_utils().isSpace;\n        function StateBlock(src, md, env, tokens) {\n            var ch, s2, start, pos, len, indent, offset, indent_found;\n            this.src = src;\n            this.md = md;\n            this.env = env;\n            this.tokens = tokens;\n            this.bMarks = [];\n            this.eMarks = [];\n            this.tShift = [];\n            this.sCount = [];\n            this.bsCount = [];\n            this.blkIndent = 0;\n            this.line = 0;\n            this.lineMax = 0;\n            this.tight = false;\n            this.ddIndent = -1;\n            this.listIndent = -1;\n            this.parentType = \"root\";\n            this.level = 0;\n            this.result = \"\";\n            s2 = this.src;\n            indent_found = false;\n            for(start = pos = indent = offset = 0, len = s2.length; pos < len; pos++){\n                ch = s2.charCodeAt(pos);\n                if (!indent_found) {\n                    if (isSpace(ch)) {\n                        indent++;\n                        if (ch === 9) {\n                            offset += 4 - offset % 4;\n                        } else {\n                            offset++;\n                        }\n                        continue;\n                    } else {\n                        indent_found = true;\n                    }\n                }\n                if (ch === 10 || pos === len - 1) {\n                    if (ch !== 10) {\n                        pos++;\n                    }\n                    this.bMarks.push(start);\n                    this.eMarks.push(pos);\n                    this.tShift.push(indent);\n                    this.sCount.push(offset);\n                    this.bsCount.push(0);\n                    indent_found = false;\n                    indent = 0;\n                    offset = 0;\n                    start = pos + 1;\n                }\n            }\n            this.bMarks.push(s2.length);\n            this.eMarks.push(s2.length);\n            this.tShift.push(0);\n            this.sCount.push(0);\n            this.bsCount.push(0);\n            this.lineMax = this.bMarks.length - 1;\n        }\n        StateBlock.prototype.push = function(type, tag, nesting) {\n            var token = new Token(type, tag, nesting);\n            token.block = true;\n            if (nesting < 0) this.level--;\n            token.level = this.level;\n            if (nesting > 0) this.level++;\n            this.tokens.push(token);\n            return token;\n        };\n        StateBlock.prototype.isEmpty = function isEmpty(line) {\n            return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n        };\n        StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n            for(var max2 = this.lineMax; from < max2; from++){\n                if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n                    break;\n                }\n            }\n            return from;\n        };\n        StateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n            var ch;\n            for(var max2 = this.src.length; pos < max2; pos++){\n                ch = this.src.charCodeAt(pos);\n                if (!isSpace(ch)) {\n                    break;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n            if (pos <= min) {\n                return pos;\n            }\n            while(pos > min){\n                if (!isSpace(this.src.charCodeAt(--pos))) {\n                    return pos + 1;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.skipChars = function skipChars(pos, code2) {\n            for(var max2 = this.src.length; pos < max2; pos++){\n                if (this.src.charCodeAt(pos) !== code2) {\n                    break;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min) {\n            if (pos <= min) {\n                return pos;\n            }\n            while(pos > min){\n                if (code2 !== this.src.charCodeAt(--pos)) {\n                    return pos + 1;\n                }\n            }\n            return pos;\n        };\n        StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n            var i, lineIndent, ch, first, last, queue, lineStart, line = begin;\n            if (begin >= end) {\n                return \"\";\n            }\n            queue = new Array(end - begin);\n            for(i = 0; line < end; line++, i++){\n                lineIndent = 0;\n                lineStart = first = this.bMarks[line];\n                if (line + 1 < end || keepLastLF) {\n                    last = this.eMarks[line] + 1;\n                } else {\n                    last = this.eMarks[line];\n                }\n                while(first < last && lineIndent < indent){\n                    ch = this.src.charCodeAt(first);\n                    if (isSpace(ch)) {\n                        if (ch === 9) {\n                            lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n                        } else {\n                            lineIndent++;\n                        }\n                    } else if (first - lineStart < this.tShift[line]) {\n                        lineIndent++;\n                    } else {\n                        break;\n                    }\n                    first++;\n                }\n                if (lineIndent > indent) {\n                    queue[i] = new Array(lineIndent - indent + 1).join(\" \") + this.src.slice(first, last);\n                } else {\n                    queue[i] = this.src.slice(first, last);\n                }\n            }\n            return queue.join(\"\");\n        };\n        StateBlock.prototype.Token = Token;\n        module.exports = StateBlock;\n    }\n});\n// node_modules/markdown-it/lib/parser_block.js\nvar require_parser_block = __commonJS({\n    \"node_modules/markdown-it/lib/parser_block.js\" (exports, module) {\n        \"use strict\";\n        var Ruler = require_ruler();\n        var _rules = [\n            [\n                \"table\",\n                require_table(),\n                [\n                    \"paragraph\",\n                    \"reference\"\n                ]\n            ],\n            [\n                \"code\",\n                require_code()\n            ],\n            [\n                \"fence\",\n                require_fence(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\",\n                    \"list\"\n                ]\n            ],\n            [\n                \"blockquote\",\n                require_blockquote(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\",\n                    \"list\"\n                ]\n            ],\n            [\n                \"hr\",\n                require_hr(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\",\n                    \"list\"\n                ]\n            ],\n            [\n                \"list\",\n                require_list(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\"\n                ]\n            ],\n            [\n                \"reference\",\n                require_reference()\n            ],\n            [\n                \"html_block\",\n                require_html_block(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\"\n                ]\n            ],\n            [\n                \"heading\",\n                require_heading(),\n                [\n                    \"paragraph\",\n                    \"reference\",\n                    \"blockquote\"\n                ]\n            ],\n            [\n                \"lheading\",\n                require_lheading()\n            ],\n            [\n                \"paragraph\",\n                require_paragraph()\n            ]\n        ];\n        function ParserBlock() {\n            this.ruler = new Ruler();\n            for(var i = 0; i < _rules.length; i++){\n                this.ruler.push(_rules[i][0], _rules[i][1], {\n                    alt: (_rules[i][2] || []).slice()\n                });\n            }\n        }\n        ParserBlock.prototype.tokenize = function(state, startLine, endLine) {\n            var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;\n            while(line < endLine){\n                state.line = line = state.skipEmptyLines(line);\n                if (line >= endLine) {\n                    break;\n                }\n                if (state.sCount[line] < state.blkIndent) {\n                    break;\n                }\n                if (state.level >= maxNesting) {\n                    state.line = endLine;\n                    break;\n                }\n                for(i = 0; i < len; i++){\n                    ok = rules[i](state, line, endLine, false);\n                    if (ok) {\n                        break;\n                    }\n                }\n                state.tight = !hasEmptyLines;\n                if (state.isEmpty(state.line - 1)) {\n                    hasEmptyLines = true;\n                }\n                line = state.line;\n                if (line < endLine && state.isEmpty(line)) {\n                    hasEmptyLines = true;\n                    line++;\n                    state.line = line;\n                }\n            }\n        };\n        ParserBlock.prototype.parse = function(src, md, env, outTokens) {\n            var state;\n            if (!src) {\n                return;\n            }\n            state = new this.State(src, md, env, outTokens);\n            this.tokenize(state, state.line, state.lineMax);\n        };\n        ParserBlock.prototype.State = require_state_block();\n        module.exports = ParserBlock;\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/text.js\nvar require_text = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/text.js\" (exports, module) {\n        \"use strict\";\n        function isTerminatorChar(ch) {\n            switch(ch){\n                case 10:\n                case 33:\n                case 35:\n                case 36:\n                case 37:\n                case 38:\n                case 42:\n                case 43:\n                case 45:\n                case 58:\n                case 60:\n                case 61:\n                case 62:\n                case 64:\n                case 91:\n                case 92:\n                case 93:\n                case 94:\n                case 95:\n                case 96:\n                case 123:\n                case 125:\n                case 126:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        module.exports = function text2(state, silent) {\n            var pos = state.pos;\n            while(pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))){\n                pos++;\n            }\n            if (pos === state.pos) {\n                return false;\n            }\n            if (!silent) {\n                state.pending += state.src.slice(state.pos, pos);\n            }\n            state.pos = pos;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/newline.js\nvar require_newline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/newline.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        module.exports = function newline(state, silent) {\n            var pmax, max2, ws, pos = state.pos;\n            if (state.src.charCodeAt(pos) !== 10) {\n                return false;\n            }\n            pmax = state.pending.length - 1;\n            max2 = state.posMax;\n            if (!silent) {\n                if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {\n                    if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {\n                        ws = pmax - 1;\n                        while(ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)ws--;\n                        state.pending = state.pending.slice(0, ws);\n                        state.push(\"hardbreak\", \"br\", 0);\n                    } else {\n                        state.pending = state.pending.slice(0, -1);\n                        state.push(\"softbreak\", \"br\", 0);\n                    }\n                } else {\n                    state.push(\"softbreak\", \"br\", 0);\n                }\n            }\n            pos++;\n            while(pos < max2 && isSpace(state.src.charCodeAt(pos))){\n                pos++;\n            }\n            state.pos = pos;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/escape.js\nvar require_escape = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/escape.js\" (exports, module) {\n        \"use strict\";\n        var isSpace = require_utils().isSpace;\n        var ESCAPED = [];\n        for(i = 0; i < 256; i++){\n            ESCAPED.push(0);\n        }\n        var i;\n        \"\\\\!\\\"#$%&'()*+,./:;<=>?@[]^_`{|}~-\".split(\"\").forEach(function(ch) {\n            ESCAPED[ch.charCodeAt(0)] = 1;\n        });\n        module.exports = function escape(state, silent) {\n            var ch, pos = state.pos, max2 = state.posMax;\n            if (state.src.charCodeAt(pos) !== 92) {\n                return false;\n            }\n            pos++;\n            if (pos < max2) {\n                ch = state.src.charCodeAt(pos);\n                if (ch < 256 && ESCAPED[ch] !== 0) {\n                    if (!silent) {\n                        state.pending += state.src[pos];\n                    }\n                    state.pos += 2;\n                    return true;\n                }\n                if (ch === 10) {\n                    if (!silent) {\n                        state.push(\"hardbreak\", \"br\", 0);\n                    }\n                    pos++;\n                    while(pos < max2){\n                        ch = state.src.charCodeAt(pos);\n                        if (!isSpace(ch)) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    state.pos = pos;\n                    return true;\n                }\n            }\n            if (!silent) {\n                state.pending += \"\\\\\";\n            }\n            state.pos++;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/backticks.js\nvar require_backticks = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/backticks.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function backtick(state, silent) {\n            var start, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);\n            if (ch !== 96) {\n                return false;\n            }\n            start = pos;\n            pos++;\n            max2 = state.posMax;\n            while(pos < max2 && state.src.charCodeAt(pos) === 96){\n                pos++;\n            }\n            marker = state.src.slice(start, pos);\n            openerLength = marker.length;\n            if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n                if (!silent) state.pending += marker;\n                state.pos += openerLength;\n                return true;\n            }\n            matchStart = matchEnd = pos;\n            while((matchStart = state.src.indexOf(\"`\", matchEnd)) !== -1){\n                matchEnd = matchStart + 1;\n                while(matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96){\n                    matchEnd++;\n                }\n                closerLength = matchEnd - matchStart;\n                if (closerLength === openerLength) {\n                    if (!silent) {\n                        token = state.push(\"code_inline\", \"code\", 0);\n                        token.markup = marker;\n                        token.content = state.src.slice(pos, matchStart).replace(/\\n/g, \" \").replace(/^ (.+) $/, \"$1\");\n                    }\n                    state.pos = matchEnd;\n                    return true;\n                }\n                state.backticks[closerLength] = matchStart;\n            }\n            state.backticksScanned = true;\n            if (!silent) state.pending += marker;\n            state.pos += openerLength;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/strikethrough.js\nvar require_strikethrough = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/strikethrough.js\" (exports, module) {\n        \"use strict\";\n        module.exports.tokenize = function strikethrough(state, silent) {\n            var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);\n            if (silent) {\n                return false;\n            }\n            if (marker !== 126) {\n                return false;\n            }\n            scanned = state.scanDelims(state.pos, true);\n            len = scanned.length;\n            ch = String.fromCharCode(marker);\n            if (len < 2) {\n                return false;\n            }\n            if (len % 2) {\n                token = state.push(\"text\", \"\", 0);\n                token.content = ch;\n                len--;\n            }\n            for(i = 0; i < len; i += 2){\n                token = state.push(\"text\", \"\", 0);\n                token.content = ch + ch;\n                state.delimiters.push({\n                    marker,\n                    length: 0,\n                    token: state.tokens.length - 1,\n                    end: -1,\n                    open: scanned.can_open,\n                    close: scanned.can_close\n                });\n            }\n            state.pos += scanned.length;\n            return true;\n        };\n        function postProcess(state, delimiters) {\n            var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;\n            for(i = 0; i < max2; i++){\n                startDelim = delimiters[i];\n                if (startDelim.marker !== 126) {\n                    continue;\n                }\n                if (startDelim.end === -1) {\n                    continue;\n                }\n                endDelim = delimiters[startDelim.end];\n                token = state.tokens[startDelim.token];\n                token.type = \"s_open\";\n                token.tag = \"s\";\n                token.nesting = 1;\n                token.markup = \"~~\";\n                token.content = \"\";\n                token = state.tokens[endDelim.token];\n                token.type = \"s_close\";\n                token.tag = \"s\";\n                token.nesting = -1;\n                token.markup = \"~~\";\n                token.content = \"\";\n                if (state.tokens[endDelim.token - 1].type === \"text\" && state.tokens[endDelim.token - 1].content === \"~\") {\n                    loneMarkers.push(endDelim.token - 1);\n                }\n            }\n            while(loneMarkers.length){\n                i = loneMarkers.pop();\n                j = i + 1;\n                while(j < state.tokens.length && state.tokens[j].type === \"s_close\"){\n                    j++;\n                }\n                j--;\n                if (i !== j) {\n                    token = state.tokens[j];\n                    state.tokens[j] = state.tokens[i];\n                    state.tokens[i] = token;\n                }\n            }\n        }\n        module.exports.postProcess = function strikethrough(state) {\n            var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n            postProcess(state, state.delimiters);\n            for(curr = 0; curr < max2; curr++){\n                if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n                    postProcess(state, tokens_meta[curr].delimiters);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/emphasis.js\nvar require_emphasis = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/emphasis.js\" (exports, module) {\n        \"use strict\";\n        module.exports.tokenize = function emphasis(state, silent) {\n            var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);\n            if (silent) {\n                return false;\n            }\n            if (marker !== 95 && marker !== 42) {\n                return false;\n            }\n            scanned = state.scanDelims(state.pos, marker === 42);\n            for(i = 0; i < scanned.length; i++){\n                token = state.push(\"text\", \"\", 0);\n                token.content = String.fromCharCode(marker);\n                state.delimiters.push({\n                    marker,\n                    length: scanned.length,\n                    token: state.tokens.length - 1,\n                    end: -1,\n                    open: scanned.can_open,\n                    close: scanned.can_close\n                });\n            }\n            state.pos += scanned.length;\n            return true;\n        };\n        function postProcess(state, delimiters) {\n            var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;\n            for(i = max2 - 1; i >= 0; i--){\n                startDelim = delimiters[i];\n                if (startDelim.marker !== 95 && startDelim.marker !== 42) {\n                    continue;\n                }\n                if (startDelim.end === -1) {\n                    continue;\n                }\n                endDelim = delimiters[startDelim.end];\n                isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;\n                ch = String.fromCharCode(startDelim.marker);\n                token = state.tokens[startDelim.token];\n                token.type = isStrong ? \"strong_open\" : \"em_open\";\n                token.tag = isStrong ? \"strong\" : \"em\";\n                token.nesting = 1;\n                token.markup = isStrong ? ch + ch : ch;\n                token.content = \"\";\n                token = state.tokens[endDelim.token];\n                token.type = isStrong ? \"strong_close\" : \"em_close\";\n                token.tag = isStrong ? \"strong\" : \"em\";\n                token.nesting = -1;\n                token.markup = isStrong ? ch + ch : ch;\n                token.content = \"\";\n                if (isStrong) {\n                    state.tokens[delimiters[i - 1].token].content = \"\";\n                    state.tokens[delimiters[startDelim.end + 1].token].content = \"\";\n                    i--;\n                }\n            }\n        }\n        module.exports.postProcess = function emphasis(state) {\n            var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n            postProcess(state, state.delimiters);\n            for(curr = 0; curr < max2; curr++){\n                if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n                    postProcess(state, tokens_meta[curr].delimiters);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/link.js\nvar require_link = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/link.js\" (exports, module) {\n        \"use strict\";\n        var normalizeReference = require_utils().normalizeReference;\n        var isSpace = require_utils().isSpace;\n        module.exports = function link2(state, silent) {\n            var attrs, code2, label, labelEnd, labelStart, pos, res, ref, token, href = \"\", title = \"\", oldPos = state.pos, max2 = state.posMax, start = state.pos, parseReference = true;\n            if (state.src.charCodeAt(state.pos) !== 91) {\n                return false;\n            }\n            labelStart = state.pos + 1;\n            labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n            if (labelEnd < 0) {\n                return false;\n            }\n            pos = labelEnd + 1;\n            if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n                parseReference = false;\n                pos++;\n                for(; pos < max2; pos++){\n                    code2 = state.src.charCodeAt(pos);\n                    if (!isSpace(code2) && code2 !== 10) {\n                        break;\n                    }\n                }\n                if (pos >= max2) {\n                    return false;\n                }\n                start = pos;\n                res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n                if (res.ok) {\n                    href = state.md.normalizeLink(res.str);\n                    if (state.md.validateLink(href)) {\n                        pos = res.pos;\n                    } else {\n                        href = \"\";\n                    }\n                    start = pos;\n                    for(; pos < max2; pos++){\n                        code2 = state.src.charCodeAt(pos);\n                        if (!isSpace(code2) && code2 !== 10) {\n                            break;\n                        }\n                    }\n                    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n                    if (pos < max2 && start !== pos && res.ok) {\n                        title = res.str;\n                        pos = res.pos;\n                        for(; pos < max2; pos++){\n                            code2 = state.src.charCodeAt(pos);\n                            if (!isSpace(code2) && code2 !== 10) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n                    parseReference = true;\n                }\n                pos++;\n            }\n            if (parseReference) {\n                if (typeof state.env.references === \"undefined\") {\n                    return false;\n                }\n                if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n                    start = pos + 1;\n                    pos = state.md.helpers.parseLinkLabel(state, pos);\n                    if (pos >= 0) {\n                        label = state.src.slice(start, pos++);\n                    } else {\n                        pos = labelEnd + 1;\n                    }\n                } else {\n                    pos = labelEnd + 1;\n                }\n                if (!label) {\n                    label = state.src.slice(labelStart, labelEnd);\n                }\n                ref = state.env.references[normalizeReference(label)];\n                if (!ref) {\n                    state.pos = oldPos;\n                    return false;\n                }\n                href = ref.href;\n                title = ref.title;\n            }\n            if (!silent) {\n                state.pos = labelStart;\n                state.posMax = labelEnd;\n                token = state.push(\"link_open\", \"a\", 1);\n                token.attrs = attrs = [\n                    [\n                        \"href\",\n                        href\n                    ]\n                ];\n                if (title) {\n                    attrs.push([\n                        \"title\",\n                        title\n                    ]);\n                }\n                state.md.inline.tokenize(state);\n                token = state.push(\"link_close\", \"a\", -1);\n            }\n            state.pos = pos;\n            state.posMax = max2;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/image.js\nvar require_image = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/image.js\" (exports, module) {\n        \"use strict\";\n        var normalizeReference = require_utils().normalizeReference;\n        var isSpace = require_utils().isSpace;\n        module.exports = function image2(state, silent) {\n            var attrs, code2, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = \"\", oldPos = state.pos, max2 = state.posMax;\n            if (state.src.charCodeAt(state.pos) !== 33) {\n                return false;\n            }\n            if (state.src.charCodeAt(state.pos + 1) !== 91) {\n                return false;\n            }\n            labelStart = state.pos + 2;\n            labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n            if (labelEnd < 0) {\n                return false;\n            }\n            pos = labelEnd + 1;\n            if (pos < max2 && state.src.charCodeAt(pos) === 40) {\n                pos++;\n                for(; pos < max2; pos++){\n                    code2 = state.src.charCodeAt(pos);\n                    if (!isSpace(code2) && code2 !== 10) {\n                        break;\n                    }\n                }\n                if (pos >= max2) {\n                    return false;\n                }\n                start = pos;\n                res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n                if (res.ok) {\n                    href = state.md.normalizeLink(res.str);\n                    if (state.md.validateLink(href)) {\n                        pos = res.pos;\n                    } else {\n                        href = \"\";\n                    }\n                }\n                start = pos;\n                for(; pos < max2; pos++){\n                    code2 = state.src.charCodeAt(pos);\n                    if (!isSpace(code2) && code2 !== 10) {\n                        break;\n                    }\n                }\n                res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n                if (pos < max2 && start !== pos && res.ok) {\n                    title = res.str;\n                    pos = res.pos;\n                    for(; pos < max2; pos++){\n                        code2 = state.src.charCodeAt(pos);\n                        if (!isSpace(code2) && code2 !== 10) {\n                            break;\n                        }\n                    }\n                } else {\n                    title = \"\";\n                }\n                if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {\n                    state.pos = oldPos;\n                    return false;\n                }\n                pos++;\n            } else {\n                if (typeof state.env.references === \"undefined\") {\n                    return false;\n                }\n                if (pos < max2 && state.src.charCodeAt(pos) === 91) {\n                    start = pos + 1;\n                    pos = state.md.helpers.parseLinkLabel(state, pos);\n                    if (pos >= 0) {\n                        label = state.src.slice(start, pos++);\n                    } else {\n                        pos = labelEnd + 1;\n                    }\n                } else {\n                    pos = labelEnd + 1;\n                }\n                if (!label) {\n                    label = state.src.slice(labelStart, labelEnd);\n                }\n                ref = state.env.references[normalizeReference(label)];\n                if (!ref) {\n                    state.pos = oldPos;\n                    return false;\n                }\n                href = ref.href;\n                title = ref.title;\n            }\n            if (!silent) {\n                content = state.src.slice(labelStart, labelEnd);\n                state.md.inline.parse(content, state.md, state.env, tokens = []);\n                token = state.push(\"image\", \"img\", 0);\n                token.attrs = attrs = [\n                    [\n                        \"src\",\n                        href\n                    ],\n                    [\n                        \"alt\",\n                        \"\"\n                    ]\n                ];\n                token.children = tokens;\n                token.content = content;\n                if (title) {\n                    attrs.push([\n                        \"title\",\n                        title\n                    ]);\n                }\n            }\n            state.pos = pos;\n            state.posMax = max2;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/autolink.js\nvar require_autolink = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/autolink.js\" (exports, module) {\n        \"use strict\";\n        var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;\n        var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)$/;\n        module.exports = function autolink(state, silent) {\n            var url, fullUrl, token, ch, start, max2, pos = state.pos;\n            if (state.src.charCodeAt(pos) !== 60) {\n                return false;\n            }\n            start = state.pos;\n            max2 = state.posMax;\n            for(;;){\n                if (++pos >= max2) return false;\n                ch = state.src.charCodeAt(pos);\n                if (ch === 60) return false;\n                if (ch === 62) break;\n            }\n            url = state.src.slice(start + 1, pos);\n            if (AUTOLINK_RE.test(url)) {\n                fullUrl = state.md.normalizeLink(url);\n                if (!state.md.validateLink(fullUrl)) {\n                    return false;\n                }\n                if (!silent) {\n                    token = state.push(\"link_open\", \"a\", 1);\n                    token.attrs = [\n                        [\n                            \"href\",\n                            fullUrl\n                        ]\n                    ];\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                    token = state.push(\"text\", \"\", 0);\n                    token.content = state.md.normalizeLinkText(url);\n                    token = state.push(\"link_close\", \"a\", -1);\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                }\n                state.pos += url.length + 2;\n                return true;\n            }\n            if (EMAIL_RE.test(url)) {\n                fullUrl = state.md.normalizeLink(\"mailto:\" + url);\n                if (!state.md.validateLink(fullUrl)) {\n                    return false;\n                }\n                if (!silent) {\n                    token = state.push(\"link_open\", \"a\", 1);\n                    token.attrs = [\n                        [\n                            \"href\",\n                            fullUrl\n                        ]\n                    ];\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                    token = state.push(\"text\", \"\", 0);\n                    token.content = state.md.normalizeLinkText(url);\n                    token = state.push(\"link_close\", \"a\", -1);\n                    token.markup = \"autolink\";\n                    token.info = \"auto\";\n                }\n                state.pos += url.length + 2;\n                return true;\n            }\n            return false;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/html_inline.js\nvar require_html_inline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/html_inline.js\" (exports, module) {\n        \"use strict\";\n        var HTML_TAG_RE = require_html_re().HTML_TAG_RE;\n        function isLetter(ch) {\n            var lc = ch | 32;\n            return lc >= 97 && lc <= 122;\n        }\n        module.exports = function html_inline(state, silent) {\n            var ch, match, max2, token, pos = state.pos;\n            if (!state.md.options.html) {\n                return false;\n            }\n            max2 = state.posMax;\n            if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {\n                return false;\n            }\n            ch = state.src.charCodeAt(pos + 1);\n            if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {\n                return false;\n            }\n            match = state.src.slice(pos).match(HTML_TAG_RE);\n            if (!match) {\n                return false;\n            }\n            if (!silent) {\n                token = state.push(\"html_inline\", \"\", 0);\n                token.content = state.src.slice(pos, pos + match[0].length);\n            }\n            state.pos += match[0].length;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/entity.js\nvar require_entity = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/entity.js\" (exports, module) {\n        \"use strict\";\n        var entities = require_entities2();\n        var has = require_utils().has;\n        var isValidEntityCode = require_utils().isValidEntityCode;\n        var fromCodePoint = require_utils().fromCodePoint;\n        var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\n        var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;\n        module.exports = function entity(state, silent) {\n            var ch, code2, match, pos = state.pos, max2 = state.posMax;\n            if (state.src.charCodeAt(pos) !== 38) {\n                return false;\n            }\n            if (pos + 1 < max2) {\n                ch = state.src.charCodeAt(pos + 1);\n                if (ch === 35) {\n                    match = state.src.slice(pos).match(DIGITAL_RE);\n                    if (match) {\n                        if (!silent) {\n                            code2 = match[1][0].toLowerCase() === \"x\" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n                            state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);\n                        }\n                        state.pos += match[0].length;\n                        return true;\n                    }\n                } else {\n                    match = state.src.slice(pos).match(NAMED_RE);\n                    if (match) {\n                        if (has(entities, match[1])) {\n                            if (!silent) {\n                                state.pending += entities[match[1]];\n                            }\n                            state.pos += match[0].length;\n                            return true;\n                        }\n                    }\n                }\n            }\n            if (!silent) {\n                state.pending += \"&\";\n            }\n            state.pos++;\n            return true;\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/balance_pairs.js\nvar require_balance_pairs = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/balance_pairs.js\" (exports, module) {\n        \"use strict\";\n        function processDelimiters(state, delimiters) {\n            var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;\n            if (!max2) return;\n            var headerIdx = 0;\n            var lastTokenIdx = -2;\n            var jumps = [];\n            for(closerIdx = 0; closerIdx < max2; closerIdx++){\n                closer = delimiters[closerIdx];\n                jumps.push(0);\n                if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n                    headerIdx = closerIdx;\n                }\n                lastTokenIdx = closer.token;\n                closer.length = closer.length || 0;\n                if (!closer.close) continue;\n                if (!openersBottom.hasOwnProperty(closer.marker)) {\n                    openersBottom[closer.marker] = [\n                        -1,\n                        -1,\n                        -1,\n                        -1,\n                        -1,\n                        -1\n                    ];\n                }\n                minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];\n                openerIdx = headerIdx - jumps[headerIdx] - 1;\n                newMinOpenerIdx = openerIdx;\n                for(; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1){\n                    opener = delimiters[openerIdx];\n                    if (opener.marker !== closer.marker) continue;\n                    if (opener.open && opener.end < 0) {\n                        isOddMatch = false;\n                        if (opener.close || closer.open) {\n                            if ((opener.length + closer.length) % 3 === 0) {\n                                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n                                    isOddMatch = true;\n                                }\n                            }\n                        }\n                        if (!isOddMatch) {\n                            lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;\n                            jumps[closerIdx] = closerIdx - openerIdx + lastJump;\n                            jumps[openerIdx] = lastJump;\n                            closer.open = false;\n                            opener.end = closerIdx;\n                            opener.close = false;\n                            newMinOpenerIdx = -1;\n                            lastTokenIdx = -2;\n                            break;\n                        }\n                    }\n                }\n                if (newMinOpenerIdx !== -1) {\n                    openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;\n                }\n            }\n        }\n        module.exports = function link_pairs(state) {\n            var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;\n            processDelimiters(state, state.delimiters);\n            for(curr = 0; curr < max2; curr++){\n                if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n                    processDelimiters(state, tokens_meta[curr].delimiters);\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/text_collapse.js\nvar require_text_collapse = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/text_collapse.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function text_collapse(state) {\n            var curr, last, level = 0, tokens = state.tokens, max2 = state.tokens.length;\n            for(curr = last = 0; curr < max2; curr++){\n                if (tokens[curr].nesting < 0) level--;\n                tokens[curr].level = level;\n                if (tokens[curr].nesting > 0) level++;\n                if (tokens[curr].type === \"text\" && curr + 1 < max2 && tokens[curr + 1].type === \"text\") {\n                    tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n                } else {\n                    if (curr !== last) {\n                        tokens[last] = tokens[curr];\n                    }\n                    last++;\n                }\n            }\n            if (curr !== last) {\n                tokens.length = last;\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/rules_inline/state_inline.js\nvar require_state_inline = __commonJS({\n    \"node_modules/markdown-it/lib/rules_inline/state_inline.js\" (exports, module) {\n        \"use strict\";\n        var Token = require_token();\n        var isWhiteSpace = require_utils().isWhiteSpace;\n        var isPunctChar = require_utils().isPunctChar;\n        var isMdAsciiPunct = require_utils().isMdAsciiPunct;\n        function StateInline(src, md, env, outTokens) {\n            this.src = src;\n            this.env = env;\n            this.md = md;\n            this.tokens = outTokens;\n            this.tokens_meta = Array(outTokens.length);\n            this.pos = 0;\n            this.posMax = this.src.length;\n            this.level = 0;\n            this.pending = \"\";\n            this.pendingLevel = 0;\n            this.cache = {};\n            this.delimiters = [];\n            this._prev_delimiters = [];\n            this.backticks = {};\n            this.backticksScanned = false;\n        }\n        StateInline.prototype.pushPending = function() {\n            var token = new Token(\"text\", \"\", 0);\n            token.content = this.pending;\n            token.level = this.pendingLevel;\n            this.tokens.push(token);\n            this.pending = \"\";\n            return token;\n        };\n        StateInline.prototype.push = function(type, tag, nesting) {\n            if (this.pending) {\n                this.pushPending();\n            }\n            var token = new Token(type, tag, nesting);\n            var token_meta = null;\n            if (nesting < 0) {\n                this.level--;\n                this.delimiters = this._prev_delimiters.pop();\n            }\n            token.level = this.level;\n            if (nesting > 0) {\n                this.level++;\n                this._prev_delimiters.push(this.delimiters);\n                this.delimiters = [];\n                token_meta = {\n                    delimiters: this.delimiters\n                };\n            }\n            this.pendingLevel = this.level;\n            this.tokens.push(token);\n            this.tokens_meta.push(token_meta);\n            return token;\n        };\n        StateInline.prototype.scanDelims = function(start, canSplitWord) {\n            var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start);\n            lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;\n            while(pos < max2 && this.src.charCodeAt(pos) === marker){\n                pos++;\n            }\n            count = pos - start;\n            nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;\n            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n            isLastWhiteSpace = isWhiteSpace(lastChar);\n            isNextWhiteSpace = isWhiteSpace(nextChar);\n            if (isNextWhiteSpace) {\n                left_flanking = false;\n            } else if (isNextPunctChar) {\n                if (!(isLastWhiteSpace || isLastPunctChar)) {\n                    left_flanking = false;\n                }\n            }\n            if (isLastWhiteSpace) {\n                right_flanking = false;\n            } else if (isLastPunctChar) {\n                if (!(isNextWhiteSpace || isNextPunctChar)) {\n                    right_flanking = false;\n                }\n            }\n            if (!canSplitWord) {\n                can_open = left_flanking && (!right_flanking || isLastPunctChar);\n                can_close = right_flanking && (!left_flanking || isNextPunctChar);\n            } else {\n                can_open = left_flanking;\n                can_close = right_flanking;\n            }\n            return {\n                can_open,\n                can_close,\n                length: count\n            };\n        };\n        StateInline.prototype.Token = Token;\n        module.exports = StateInline;\n    }\n});\n// node_modules/markdown-it/lib/parser_inline.js\nvar require_parser_inline = __commonJS({\n    \"node_modules/markdown-it/lib/parser_inline.js\" (exports, module) {\n        \"use strict\";\n        var Ruler = require_ruler();\n        var _rules = [\n            [\n                \"text\",\n                require_text()\n            ],\n            [\n                \"newline\",\n                require_newline()\n            ],\n            [\n                \"escape\",\n                require_escape()\n            ],\n            [\n                \"backticks\",\n                require_backticks()\n            ],\n            [\n                \"strikethrough\",\n                require_strikethrough().tokenize\n            ],\n            [\n                \"emphasis\",\n                require_emphasis().tokenize\n            ],\n            [\n                \"link\",\n                require_link()\n            ],\n            [\n                \"image\",\n                require_image()\n            ],\n            [\n                \"autolink\",\n                require_autolink()\n            ],\n            [\n                \"html_inline\",\n                require_html_inline()\n            ],\n            [\n                \"entity\",\n                require_entity()\n            ]\n        ];\n        var _rules2 = [\n            [\n                \"balance_pairs\",\n                require_balance_pairs()\n            ],\n            [\n                \"strikethrough\",\n                require_strikethrough().postProcess\n            ],\n            [\n                \"emphasis\",\n                require_emphasis().postProcess\n            ],\n            [\n                \"text_collapse\",\n                require_text_collapse()\n            ]\n        ];\n        function ParserInline() {\n            var i;\n            this.ruler = new Ruler();\n            for(i = 0; i < _rules.length; i++){\n                this.ruler.push(_rules[i][0], _rules[i][1]);\n            }\n            this.ruler2 = new Ruler();\n            for(i = 0; i < _rules2.length; i++){\n                this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n            }\n        }\n        ParserInline.prototype.skipToken = function(state) {\n            var ok, i, pos = state.pos, rules = this.ruler.getRules(\"\"), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;\n            if (typeof cache[pos] !== \"undefined\") {\n                state.pos = cache[pos];\n                return;\n            }\n            if (state.level < maxNesting) {\n                for(i = 0; i < len; i++){\n                    state.level++;\n                    ok = rules[i](state, true);\n                    state.level--;\n                    if (ok) {\n                        break;\n                    }\n                }\n            } else {\n                state.pos = state.posMax;\n            }\n            if (!ok) {\n                state.pos++;\n            }\n            cache[pos] = state.pos;\n        };\n        ParserInline.prototype.tokenize = function(state) {\n            var ok, i, rules = this.ruler.getRules(\"\"), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;\n            while(state.pos < end){\n                if (state.level < maxNesting) {\n                    for(i = 0; i < len; i++){\n                        ok = rules[i](state, false);\n                        if (ok) {\n                            break;\n                        }\n                    }\n                }\n                if (ok) {\n                    if (state.pos >= end) {\n                        break;\n                    }\n                    continue;\n                }\n                state.pending += state.src[state.pos++];\n            }\n            if (state.pending) {\n                state.pushPending();\n            }\n        };\n        ParserInline.prototype.parse = function(str, md, env, outTokens) {\n            var i, rules, len;\n            var state = new this.State(str, md, env, outTokens);\n            this.tokenize(state);\n            rules = this.ruler2.getRules(\"\");\n            len = rules.length;\n            for(i = 0; i < len; i++){\n                rules[i](state);\n            }\n        };\n        ParserInline.prototype.State = require_state_inline();\n        module.exports = ParserInline;\n    }\n});\n// node_modules/linkify-it/lib/re.js\nvar require_re = __commonJS({\n    \"node_modules/linkify-it/lib/re.js\" (exports, module) {\n        \"use strict\";\n        module.exports = function(opts) {\n            var re = {};\n            re.src_Any = require_regex2().source;\n            re.src_Cc = require_regex3().source;\n            re.src_Z = require_regex5().source;\n            re.src_P = require_regex().source;\n            re.src_ZPCc = [\n                re.src_Z,\n                re.src_P,\n                re.src_Cc\n            ].join(\"|\");\n            re.src_ZCc = [\n                re.src_Z,\n                re.src_Cc\n            ].join(\"|\");\n            var text_separators = \"[><｜]\";\n            re.src_pseudo_letter = \"(?:(?!\" + text_separators + \"|\" + re.src_ZPCc + \")\" + re.src_Any + \")\";\n            re.src_ip4 = \"(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\";\n            re.src_auth = \"(?:(?:(?!\" + re.src_ZCc + \"|[@/\\\\[\\\\]()]).)+@)?\";\n            re.src_port = \"(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?\";\n            re.src_host_terminator = \"(?=$|\" + text_separators + \"|\" + re.src_ZPCc + \")(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|\" + re.src_ZPCc + \"))\";\n            re.src_path = \"(?:[/?#](?:(?!\" + re.src_ZCc + \"|\" + text_separators + `|[()[\\\\]{}.,\"'?!\\\\-;]).|\\\\[(?:(?!` + re.src_ZCc + \"|\\\\]).)*\\\\]|\\\\((?:(?!\" + re.src_ZCc + \"|[)]).)*\\\\)|\\\\{(?:(?!\" + re.src_ZCc + '|[}]).)*\\\\}|\\\\\"(?:(?!' + re.src_ZCc + `|[\"]).)+\\\\\"|\\\\'(?:(?!` + re.src_ZCc + \"|[']).)+\\\\'|\\\\'(?=\" + re.src_pseudo_letter + \"|[-]).|\\\\.{2,}[a-zA-Z0-9%/&]|\\\\.(?!\" + re.src_ZCc + \"|[.]).|\" + (opts && opts[\"---\"] ? \"\\\\-(?!--(?:[^-]|$))(?:-*)|\" : \"\\\\-+|\") + \",(?!\" + re.src_ZCc + \").|;(?!\" + re.src_ZCc + \").|\\\\!+(?!\" + re.src_ZCc + \"|[!]).|\\\\?(?!\" + re.src_ZCc + \"|[?]).)+|\\\\/)?\";\n            re.src_email_name = '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n            re.src_xn = \"xn--[a-z0-9\\\\-]{1,59}\";\n            re.src_domain_root = \"(?:\" + re.src_xn + \"|\" + re.src_pseudo_letter + \"{1,63})\";\n            re.src_domain = \"(?:\" + re.src_xn + \"|(?:\" + re.src_pseudo_letter + \")|(?:\" + re.src_pseudo_letter + \"(?:-|\" + re.src_pseudo_letter + \"){0,61}\" + re.src_pseudo_letter + \"))\";\n            re.src_host = \"(?:(?:(?:(?:\" + re.src_domain + \")\\\\.)*\" + re.src_domain + \"))\";\n            re.tpl_host_fuzzy = \"(?:\" + re.src_ip4 + \"|(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%)))\";\n            re.tpl_host_no_ip_fuzzy = \"(?:(?:(?:\" + re.src_domain + \")\\\\.)+(?:%TLDS%))\";\n            re.src_host_strict = re.src_host + re.src_host_terminator;\n            re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;\n            re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;\n            re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n            re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n            re.tpl_host_fuzzy_test = \"localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:\" + re.src_ZPCc + \"|>|$))\";\n            re.tpl_email_fuzzy = \"(^|\" + text_separators + '|\"|\\\\(|' + re.src_ZCc + \")(\" + re.src_email_name + \"@\" + re.tpl_host_fuzzy_strict + \")\";\n            re.tpl_link_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|｜]|\" + re.src_ZPCc + \"))((?![$+<=>^`|｜])\" + re.tpl_host_port_fuzzy_strict + re.src_path + \")\";\n            re.tpl_link_no_ip_fuzzy = \"(^|(?![.:/\\\\-_@])(?:[$+<=>^`|｜]|\" + re.src_ZPCc + \"))((?![$+<=>^`|｜])\" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + \")\";\n            return re;\n        };\n    }\n});\n// node_modules/linkify-it/index.js\nvar require_linkify_it = __commonJS({\n    \"node_modules/linkify-it/index.js\" (exports, module) {\n        \"use strict\";\n        function assign(obj) {\n            var sources = Array.prototype.slice.call(arguments, 1);\n            sources.forEach(function(source) {\n                if (!source) {\n                    return;\n                }\n                Object.keys(source).forEach(function(key) {\n                    obj[key] = source[key];\n                });\n            });\n            return obj;\n        }\n        function _class(obj) {\n            return Object.prototype.toString.call(obj);\n        }\n        function isString(obj) {\n            return _class(obj) === \"[object String]\";\n        }\n        function isObject(obj) {\n            return _class(obj) === \"[object Object]\";\n        }\n        function isRegExp(obj) {\n            return _class(obj) === \"[object RegExp]\";\n        }\n        function isFunction2(obj) {\n            return _class(obj) === \"[object Function]\";\n        }\n        function escapeRE(str) {\n            return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&\");\n        }\n        var defaultOptions = {\n            fuzzyLink: true,\n            fuzzyEmail: true,\n            fuzzyIP: false\n        };\n        function isOptionsObj(obj) {\n            return Object.keys(obj || {}).reduce(function(acc, k) {\n                return acc || defaultOptions.hasOwnProperty(k);\n            }, false);\n        }\n        var defaultSchemas = {\n            \"http:\": {\n                validate: function(text2, pos, self) {\n                    var tail = text2.slice(pos);\n                    if (!self.re.http) {\n                        self.re.http = new RegExp(\"^\\\\/\\\\/\" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, \"i\");\n                    }\n                    if (self.re.http.test(tail)) {\n                        return tail.match(self.re.http)[0].length;\n                    }\n                    return 0;\n                }\n            },\n            \"https:\": \"http:\",\n            \"ftp:\": \"http:\",\n            \"//\": {\n                validate: function(text2, pos, self) {\n                    var tail = text2.slice(pos);\n                    if (!self.re.no_http) {\n                        self.re.no_http = new RegExp(\"^\" + self.re.src_auth + \"(?:localhost|(?:(?:\" + self.re.src_domain + \")\\\\.)+\" + self.re.src_domain_root + \")\" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, \"i\");\n                    }\n                    if (self.re.no_http.test(tail)) {\n                        if (pos >= 3 && text2[pos - 3] === \":\") {\n                            return 0;\n                        }\n                        if (pos >= 3 && text2[pos - 3] === \"/\") {\n                            return 0;\n                        }\n                        return tail.match(self.re.no_http)[0].length;\n                    }\n                    return 0;\n                }\n            },\n            \"mailto:\": {\n                validate: function(text2, pos, self) {\n                    var tail = text2.slice(pos);\n                    if (!self.re.mailto) {\n                        self.re.mailto = new RegExp(\"^\" + self.re.src_email_name + \"@\" + self.re.src_host_strict, \"i\");\n                    }\n                    if (self.re.mailto.test(tail)) {\n                        return tail.match(self.re.mailto)[0].length;\n                    }\n                    return 0;\n                }\n            }\n        };\n        var tlds_2ch_src_re = \"a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]\";\n        var tlds_default = \"biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\".split(\"|\");\n        function resetScanCache(self) {\n            self.__index__ = -1;\n            self.__text_cache__ = \"\";\n        }\n        function createValidator(re) {\n            return function(text2, pos) {\n                var tail = text2.slice(pos);\n                if (re.test(tail)) {\n                    return tail.match(re)[0].length;\n                }\n                return 0;\n            };\n        }\n        function createNormalizer() {\n            return function(match, self) {\n                self.normalize(match);\n            };\n        }\n        function compile(self) {\n            var re = self.re = require_re()(self.__opts__);\n            var tlds = self.__tlds__.slice();\n            self.onCompile();\n            if (!self.__tlds_replaced__) {\n                tlds.push(tlds_2ch_src_re);\n            }\n            tlds.push(re.src_xn);\n            re.src_tlds = tlds.join(\"|\");\n            function untpl(tpl) {\n                return tpl.replace(\"%TLDS%\", re.src_tlds);\n            }\n            re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), \"i\");\n            re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), \"i\");\n            re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), \"i\");\n            re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), \"i\");\n            var aliases = [];\n            self.__compiled__ = {};\n            function schemaError(name, val) {\n                throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n            }\n            Object.keys(self.__schemas__).forEach(function(name) {\n                var val = self.__schemas__[name];\n                if (val === null) {\n                    return;\n                }\n                var compiled = {\n                    validate: null,\n                    link: null\n                };\n                self.__compiled__[name] = compiled;\n                if (isObject(val)) {\n                    if (isRegExp(val.validate)) {\n                        compiled.validate = createValidator(val.validate);\n                    } else if (isFunction2(val.validate)) {\n                        compiled.validate = val.validate;\n                    } else {\n                        schemaError(name, val);\n                    }\n                    if (isFunction2(val.normalize)) {\n                        compiled.normalize = val.normalize;\n                    } else if (!val.normalize) {\n                        compiled.normalize = createNormalizer();\n                    } else {\n                        schemaError(name, val);\n                    }\n                    return;\n                }\n                if (isString(val)) {\n                    aliases.push(name);\n                    return;\n                }\n                schemaError(name, val);\n            });\n            aliases.forEach(function(alias) {\n                if (!self.__compiled__[self.__schemas__[alias]]) {\n                    return;\n                }\n                self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;\n                self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;\n            });\n            self.__compiled__[\"\"] = {\n                validate: null,\n                normalize: createNormalizer()\n            };\n            var slist = Object.keys(self.__compiled__).filter(function(name) {\n                return name.length > 0 && self.__compiled__[name];\n            }).map(escapeRE).join(\"|\");\n            self.re.schema_test = RegExp(\"(^|(?!_)(?:[><｜]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"i\");\n            self.re.schema_search = RegExp(\"(^|(?!_)(?:[><｜]|\" + re.src_ZPCc + \"))(\" + slist + \")\", \"ig\");\n            self.re.pretest = RegExp(\"(\" + self.re.schema_test.source + \")|(\" + self.re.host_fuzzy_test.source + \")|@\", \"i\");\n            resetScanCache(self);\n        }\n        function Match(self, shift) {\n            var start = self.__index__, end = self.__last_index__, text2 = self.__text_cache__.slice(start, end);\n            this.schema = self.__schema__.toLowerCase();\n            this.index = start + shift;\n            this.lastIndex = end + shift;\n            this.raw = text2;\n            this.text = text2;\n            this.url = text2;\n        }\n        function createMatch(self, shift) {\n            var match = new Match(self, shift);\n            self.__compiled__[match.schema].normalize(match, self);\n            return match;\n        }\n        function LinkifyIt(schemas, options) {\n            if (!(this instanceof LinkifyIt)) {\n                return new LinkifyIt(schemas, options);\n            }\n            if (!options) {\n                if (isOptionsObj(schemas)) {\n                    options = schemas;\n                    schemas = {};\n                }\n            }\n            this.__opts__ = assign({}, defaultOptions, options);\n            this.__index__ = -1;\n            this.__last_index__ = -1;\n            this.__schema__ = \"\";\n            this.__text_cache__ = \"\";\n            this.__schemas__ = assign({}, defaultSchemas, schemas);\n            this.__compiled__ = {};\n            this.__tlds__ = tlds_default;\n            this.__tlds_replaced__ = false;\n            this.re = {};\n            compile(this);\n        }\n        LinkifyIt.prototype.add = function add(schema, definition) {\n            this.__schemas__[schema] = definition;\n            compile(this);\n            return this;\n        };\n        LinkifyIt.prototype.set = function set(options) {\n            this.__opts__ = assign(this.__opts__, options);\n            return this;\n        };\n        LinkifyIt.prototype.test = function test(text2) {\n            this.__text_cache__ = text2;\n            this.__index__ = -1;\n            if (!text2.length) {\n                return false;\n            }\n            var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n            if (this.re.schema_test.test(text2)) {\n                re = this.re.schema_search;\n                re.lastIndex = 0;\n                while((m = re.exec(text2)) !== null){\n                    len = this.testSchemaAt(text2, m[2], re.lastIndex);\n                    if (len) {\n                        this.__schema__ = m[2];\n                        this.__index__ = m.index + m[1].length;\n                        this.__last_index__ = m.index + m[0].length + len;\n                        break;\n                    }\n                }\n            }\n            if (this.__opts__.fuzzyLink && this.__compiled__[\"http:\"]) {\n                tld_pos = text2.search(this.re.host_fuzzy_test);\n                if (tld_pos >= 0) {\n                    if (this.__index__ < 0 || tld_pos < this.__index__) {\n                        if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n                            shift = ml.index + ml[1].length;\n                            if (this.__index__ < 0 || shift < this.__index__) {\n                                this.__schema__ = \"\";\n                                this.__index__ = shift;\n                                this.__last_index__ = ml.index + ml[0].length;\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.__opts__.fuzzyEmail && this.__compiled__[\"mailto:\"]) {\n                at_pos = text2.indexOf(\"@\");\n                if (at_pos >= 0) {\n                    if ((me = text2.match(this.re.email_fuzzy)) !== null) {\n                        shift = me.index + me[1].length;\n                        next = me.index + me[0].length;\n                        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {\n                            this.__schema__ = \"mailto:\";\n                            this.__index__ = shift;\n                            this.__last_index__ = next;\n                        }\n                    }\n                }\n            }\n            return this.__index__ >= 0;\n        };\n        LinkifyIt.prototype.pretest = function pretest(text2) {\n            return this.re.pretest.test(text2);\n        };\n        LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {\n            if (!this.__compiled__[schema.toLowerCase()]) {\n                return 0;\n            }\n            return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);\n        };\n        LinkifyIt.prototype.match = function match(text2) {\n            var shift = 0, result = [];\n            if (this.__index__ >= 0 && this.__text_cache__ === text2) {\n                result.push(createMatch(this, shift));\n                shift = this.__last_index__;\n            }\n            var tail = shift ? text2.slice(shift) : text2;\n            while(this.test(tail)){\n                result.push(createMatch(this, shift));\n                tail = tail.slice(this.__last_index__);\n                shift += this.__last_index__;\n            }\n            if (result.length) {\n                return result;\n            }\n            return null;\n        };\n        LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {\n            list2 = Array.isArray(list2) ? list2 : [\n                list2\n            ];\n            if (!keepOld) {\n                this.__tlds__ = list2.slice();\n                this.__tlds_replaced__ = true;\n                compile(this);\n                return this;\n            }\n            this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {\n                return el !== arr[idx - 1];\n            }).reverse();\n            compile(this);\n            return this;\n        };\n        LinkifyIt.prototype.normalize = function normalize(match) {\n            if (!match.schema) {\n                match.url = \"http://\" + match.url;\n            }\n            if (match.schema === \"mailto:\" && !/^mailto:/i.test(match.url)) {\n                match.url = \"mailto:\" + match.url;\n            }\n        };\n        LinkifyIt.prototype.onCompile = function onCompile() {};\n        module.exports = LinkifyIt;\n    }\n});\n// node_modules/punycode/punycode.js\nvar require_punycode = __commonJS({\n    \"node_modules/punycode/punycode.js\" (exports, module) {\n        \"use strict\";\n        var maxInt = 2147483647;\n        var base = 36;\n        var tMin = 1;\n        var tMax = 26;\n        var skew = 38;\n        var damp = 700;\n        var initialBias = 72;\n        var initialN = 128;\n        var delimiter = \"-\";\n        var regexPunycode = /^xn--/;\n        var regexNonASCII = /[^\\0-\\x7E]/;\n        var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g;\n        var errors = {\n            \"overflow\": \"Overflow: input needs wider integers to process\",\n            \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n            \"invalid-input\": \"Invalid input\"\n        };\n        var baseMinusTMin = base - tMin;\n        var floor = Math.floor;\n        var stringFromCharCode = String.fromCharCode;\n        function error2(type) {\n            throw new RangeError(errors[type]);\n        }\n        function map(array, fn) {\n            const result = [];\n            let length = array.length;\n            while(length--){\n                result[length] = fn(array[length]);\n            }\n            return result;\n        }\n        function mapDomain(string, fn) {\n            const parts = string.split(\"@\");\n            let result = \"\";\n            if (parts.length > 1) {\n                result = parts[0] + \"@\";\n                string = parts[1];\n            }\n            string = string.replace(regexSeparators, \".\");\n            const labels = string.split(\".\");\n            const encoded = map(labels, fn).join(\".\");\n            return result + encoded;\n        }\n        function ucs2decode(string) {\n            const output = [];\n            let counter = 0;\n            const length = string.length;\n            while(counter < length){\n                const value = string.charCodeAt(counter++);\n                if (value >= 55296 && value <= 56319 && counter < length) {\n                    const extra = string.charCodeAt(counter++);\n                    if ((extra & 64512) == 56320) {\n                        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);\n                    } else {\n                        output.push(value);\n                        counter--;\n                    }\n                } else {\n                    output.push(value);\n                }\n            }\n            return output;\n        }\n        var ucs2encode = (array)=>String.fromCodePoint(...array);\n        var basicToDigit = function(codePoint) {\n            if (codePoint - 48 < 10) {\n                return codePoint - 22;\n            }\n            if (codePoint - 65 < 26) {\n                return codePoint - 65;\n            }\n            if (codePoint - 97 < 26) {\n                return codePoint - 97;\n            }\n            return base;\n        };\n        var digitToBasic = function(digit, flag) {\n            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n        };\n        var adapt = function(delta, numPoints, firstTime) {\n            let k = 0;\n            delta = firstTime ? floor(delta / damp) : delta >> 1;\n            delta += floor(delta / numPoints);\n            for(; delta > baseMinusTMin * tMax >> 1; k += base){\n                delta = floor(delta / baseMinusTMin);\n            }\n            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n        };\n        var decode = function(input) {\n            const output = [];\n            const inputLength = input.length;\n            let i = 0;\n            let n = initialN;\n            let bias = initialBias;\n            let basic = input.lastIndexOf(delimiter);\n            if (basic < 0) {\n                basic = 0;\n            }\n            for(let j = 0; j < basic; ++j){\n                if (input.charCodeAt(j) >= 128) {\n                    error2(\"not-basic\");\n                }\n                output.push(input.charCodeAt(j));\n            }\n            for(let index = basic > 0 ? basic + 1 : 0; index < inputLength;){\n                let oldi = i;\n                for(let w = 1, k = base;; k += base){\n                    if (index >= inputLength) {\n                        error2(\"invalid-input\");\n                    }\n                    const digit = basicToDigit(input.charCodeAt(index++));\n                    if (digit >= base || digit > floor((maxInt - i) / w)) {\n                        error2(\"overflow\");\n                    }\n                    i += digit * w;\n                    const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                    if (digit < t) {\n                        break;\n                    }\n                    const baseMinusT = base - t;\n                    if (w > floor(maxInt / baseMinusT)) {\n                        error2(\"overflow\");\n                    }\n                    w *= baseMinusT;\n                }\n                const out = output.length + 1;\n                bias = adapt(i - oldi, out, oldi == 0);\n                if (floor(i / out) > maxInt - n) {\n                    error2(\"overflow\");\n                }\n                n += floor(i / out);\n                i %= out;\n                output.splice(i++, 0, n);\n            }\n            return String.fromCodePoint(...output);\n        };\n        var encode = function(input) {\n            const output = [];\n            input = ucs2decode(input);\n            let inputLength = input.length;\n            let n = initialN;\n            let delta = 0;\n            let bias = initialBias;\n            for (const currentValue of input){\n                if (currentValue < 128) {\n                    output.push(stringFromCharCode(currentValue));\n                }\n            }\n            let basicLength = output.length;\n            let handledCPCount = basicLength;\n            if (basicLength) {\n                output.push(delimiter);\n            }\n            while(handledCPCount < inputLength){\n                let m = maxInt;\n                for (const currentValue of input){\n                    if (currentValue >= n && currentValue < m) {\n                        m = currentValue;\n                    }\n                }\n                const handledCPCountPlusOne = handledCPCount + 1;\n                if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n                    error2(\"overflow\");\n                }\n                delta += (m - n) * handledCPCountPlusOne;\n                n = m;\n                for (const currentValue of input){\n                    if (currentValue < n && ++delta > maxInt) {\n                        error2(\"overflow\");\n                    }\n                    if (currentValue == n) {\n                        let q = delta;\n                        for(let k = base;; k += base){\n                            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                            if (q < t) {\n                                break;\n                            }\n                            const qMinusT = q - t;\n                            const baseMinusT = base - t;\n                            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                            q = floor(qMinusT / baseMinusT);\n                        }\n                        output.push(stringFromCharCode(digitToBasic(q, 0)));\n                        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n                        delta = 0;\n                        ++handledCPCount;\n                    }\n                }\n                ++delta;\n                ++n;\n            }\n            return output.join(\"\");\n        };\n        var toUnicode = function(input) {\n            return mapDomain(input, function(string) {\n                return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n            });\n        };\n        var toASCII = function(input) {\n            return mapDomain(input, function(string) {\n                return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n            });\n        };\n        var punycode = {\n            \"version\": \"2.1.0\",\n            \"ucs2\": {\n                \"decode\": ucs2decode,\n                \"encode\": ucs2encode\n            },\n            \"decode\": decode,\n            \"encode\": encode,\n            \"toASCII\": toASCII,\n            \"toUnicode\": toUnicode\n        };\n        module.exports = punycode;\n    }\n});\n// node_modules/markdown-it/lib/presets/default.js\nvar require_default = __commonJS({\n    \"node_modules/markdown-it/lib/presets/default.js\" (exports, module) {\n        \"use strict\";\n        module.exports = {\n            options: {\n                html: false,\n                xhtmlOut: false,\n                breaks: false,\n                langPrefix: \"language-\",\n                linkify: false,\n                typographer: false,\n                quotes: \"“”‘’\",\n                highlight: null,\n                maxNesting: 100\n            },\n            components: {\n                core: {},\n                block: {},\n                inline: {}\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/presets/zero.js\nvar require_zero = __commonJS({\n    \"node_modules/markdown-it/lib/presets/zero.js\" (exports, module) {\n        \"use strict\";\n        module.exports = {\n            options: {\n                html: false,\n                xhtmlOut: false,\n                breaks: false,\n                langPrefix: \"language-\",\n                linkify: false,\n                typographer: false,\n                quotes: \"“”‘’\",\n                highlight: null,\n                maxNesting: 20\n            },\n            components: {\n                core: {\n                    rules: [\n                        \"normalize\",\n                        \"block\",\n                        \"inline\"\n                    ]\n                },\n                block: {\n                    rules: [\n                        \"paragraph\"\n                    ]\n                },\n                inline: {\n                    rules: [\n                        \"text\"\n                    ],\n                    rules2: [\n                        \"balance_pairs\",\n                        \"text_collapse\"\n                    ]\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/presets/commonmark.js\nvar require_commonmark = __commonJS({\n    \"node_modules/markdown-it/lib/presets/commonmark.js\" (exports, module) {\n        \"use strict\";\n        module.exports = {\n            options: {\n                html: true,\n                xhtmlOut: true,\n                breaks: false,\n                langPrefix: \"language-\",\n                linkify: false,\n                typographer: false,\n                quotes: \"“”‘’\",\n                highlight: null,\n                maxNesting: 20\n            },\n            components: {\n                core: {\n                    rules: [\n                        \"normalize\",\n                        \"block\",\n                        \"inline\"\n                    ]\n                },\n                block: {\n                    rules: [\n                        \"blockquote\",\n                        \"code\",\n                        \"fence\",\n                        \"heading\",\n                        \"hr\",\n                        \"html_block\",\n                        \"lheading\",\n                        \"list\",\n                        \"reference\",\n                        \"paragraph\"\n                    ]\n                },\n                inline: {\n                    rules: [\n                        \"autolink\",\n                        \"backticks\",\n                        \"emphasis\",\n                        \"entity\",\n                        \"escape\",\n                        \"html_inline\",\n                        \"image\",\n                        \"link\",\n                        \"newline\",\n                        \"text\"\n                    ],\n                    rules2: [\n                        \"balance_pairs\",\n                        \"emphasis\",\n                        \"text_collapse\"\n                    ]\n                }\n            }\n        };\n    }\n});\n// node_modules/markdown-it/lib/index.js\nvar require_lib = __commonJS({\n    \"node_modules/markdown-it/lib/index.js\" (exports, module) {\n        \"use strict\";\n        var utils = require_utils();\n        var helpers = require_helpers();\n        var Renderer = require_renderer();\n        var ParserCore = require_parser_core();\n        var ParserBlock = require_parser_block();\n        var ParserInline = require_parser_inline();\n        var LinkifyIt = require_linkify_it();\n        var mdurl = require_mdurl();\n        var punycode = require_punycode();\n        var config = {\n            default: require_default(),\n            zero: require_zero(),\n            commonmark: require_commonmark()\n        };\n        var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\n        var GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n        function validateLink(url) {\n            var str = url.trim().toLowerCase();\n            return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;\n        }\n        var RECODE_HOSTNAME_FOR = [\n            \"http:\",\n            \"https:\",\n            \"mailto:\"\n        ];\n        function normalizeLink(url) {\n            var parsed = mdurl.parse(url, true);\n            if (parsed.hostname) {\n                if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n                    try {\n                        parsed.hostname = punycode.toASCII(parsed.hostname);\n                    } catch (er) {}\n                }\n            }\n            return mdurl.encode(mdurl.format(parsed));\n        }\n        function normalizeLinkText(url) {\n            var parsed = mdurl.parse(url, true);\n            if (parsed.hostname) {\n                if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n                    try {\n                        parsed.hostname = punycode.toUnicode(parsed.hostname);\n                    } catch (er) {}\n                }\n            }\n            return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + \"%\");\n        }\n        function MarkdownIt3(presetName, options) {\n            if (!(this instanceof MarkdownIt3)) {\n                return new MarkdownIt3(presetName, options);\n            }\n            if (!options) {\n                if (!utils.isString(presetName)) {\n                    options = presetName || {};\n                    presetName = \"default\";\n                }\n            }\n            this.inline = new ParserInline();\n            this.block = new ParserBlock();\n            this.core = new ParserCore();\n            this.renderer = new Renderer();\n            this.linkify = new LinkifyIt();\n            this.validateLink = validateLink;\n            this.normalizeLink = normalizeLink;\n            this.normalizeLinkText = normalizeLinkText;\n            this.utils = utils;\n            this.helpers = utils.assign({}, helpers);\n            this.options = {};\n            this.configure(presetName);\n            if (options) {\n                this.set(options);\n            }\n        }\n        MarkdownIt3.prototype.set = function(options) {\n            utils.assign(this.options, options);\n            return this;\n        };\n        MarkdownIt3.prototype.configure = function(presets) {\n            var self = this, presetName;\n            if (utils.isString(presets)) {\n                presetName = presets;\n                presets = config[presetName];\n                if (!presets) {\n                    throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name');\n                }\n            }\n            if (!presets) {\n                throw new Error(\"Wrong `markdown-it` preset, can't be empty\");\n            }\n            if (presets.options) {\n                self.set(presets.options);\n            }\n            if (presets.components) {\n                Object.keys(presets.components).forEach(function(name) {\n                    if (presets.components[name].rules) {\n                        self[name].ruler.enableOnly(presets.components[name].rules);\n                    }\n                    if (presets.components[name].rules2) {\n                        self[name].ruler2.enableOnly(presets.components[name].rules2);\n                    }\n                });\n            }\n            return this;\n        };\n        MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {\n            var result = [];\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            [\n                \"core\",\n                \"block\",\n                \"inline\"\n            ].forEach(function(chain) {\n                result = result.concat(this[chain].ruler.enable(list2, true));\n            }, this);\n            result = result.concat(this.inline.ruler2.enable(list2, true));\n            var missed = list2.filter(function(name) {\n                return result.indexOf(name) < 0;\n            });\n            if (missed.length && !ignoreInvalid) {\n                throw new Error(\"MarkdownIt. Failed to enable unknown rule(s): \" + missed);\n            }\n            return this;\n        };\n        MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {\n            var result = [];\n            if (!Array.isArray(list2)) {\n                list2 = [\n                    list2\n                ];\n            }\n            [\n                \"core\",\n                \"block\",\n                \"inline\"\n            ].forEach(function(chain) {\n                result = result.concat(this[chain].ruler.disable(list2, true));\n            }, this);\n            result = result.concat(this.inline.ruler2.disable(list2, true));\n            var missed = list2.filter(function(name) {\n                return result.indexOf(name) < 0;\n            });\n            if (missed.length && !ignoreInvalid) {\n                throw new Error(\"MarkdownIt. Failed to disable unknown rule(s): \" + missed);\n            }\n            return this;\n        };\n        MarkdownIt3.prototype.use = function(plugin4) {\n            var args = [\n                this\n            ].concat(Array.prototype.slice.call(arguments, 1));\n            plugin4.apply(plugin4, args);\n            return this;\n        };\n        MarkdownIt3.prototype.parse = function(src, env) {\n            if (typeof src !== \"string\") {\n                throw new Error(\"Input data should be a String\");\n            }\n            var state = new this.core.State(src, this, env);\n            this.core.process(state);\n            return state.tokens;\n        };\n        MarkdownIt3.prototype.render = function(src, env) {\n            env = env || {};\n            return this.renderer.render(this.parse(src, env), this.options, env);\n        };\n        MarkdownIt3.prototype.parseInline = function(src, env) {\n            var state = new this.core.State(src, this, env);\n            state.inlineMode = true;\n            this.core.process(state);\n            return state.tokens;\n        };\n        MarkdownIt3.prototype.renderInline = function(src, env) {\n            env = env || {};\n            return this.renderer.render(this.parseInline(src, env), this.options, env);\n        };\n        module.exports = MarkdownIt3;\n    }\n});\n// node_modules/markdown-it/index.js\nvar require_markdown_it = __commonJS({\n    \"node_modules/markdown-it/index.js\" (exports, module) {\n        \"use strict\";\n        module.exports = require_lib();\n    }\n});\n// src/ast/base.ts\nvar base_exports = {};\n__export(base_exports, {\n    getAstValues: ()=>getAstValues,\n    isAst: ()=>isAst,\n    isFunction: ()=>isFunction,\n    isVariable: ()=>isVariable,\n    resolve: ()=>resolve\n});\nfunction isAst(value) {\n    return !!value?.$$mdtype;\n}\nfunction isFunction(value) {\n    return !!(value?.$$mdtype === \"Function\");\n}\nfunction isVariable(value) {\n    return !!(value?.$$mdtype === \"Variable\");\n}\nfunction* getAstValues(value) {\n    if (value == null || typeof value !== \"object\") return;\n    if (Array.isArray(value)) for (const v of value)yield* getAstValues(v);\n    if (isAst(value)) yield value;\n    if (Object.getPrototypeOf(value) !== Object.prototype) return;\n    for (const v of Object.values(value))yield* getAstValues(v);\n}\nfunction resolve(value, config = {}) {\n    if (value == null || typeof value !== \"object\") return value;\n    if (Array.isArray(value)) return value.map((item2)=>resolve(item2, config));\n    if (isAst(value) && value?.resolve instanceof Function) return value.resolve(config);\n    if (Object.getPrototypeOf(value) !== Object.prototype) return value;\n    const output = {};\n    for (const [k, v] of Object.entries(value))output[k] = resolve(v, config);\n    return output;\n}\n// src/tag.ts\nvar Tag = class {\n    constructor(name = \"div\", attributes = {}, children = []){\n        this.$$mdtype = \"Tag\";\n        this.name = name;\n        this.attributes = attributes;\n        this.children = children;\n    }\n};\nTag.isTag = (tag)=>{\n    return !!(tag?.$$mdtype === \"Tag\");\n};\n// src/schema-types/class.ts\nvar Class = class {\n    validate(value, _config, key) {\n        if (typeof value === \"string\" || typeof value === \"object\") return [];\n        return [\n            {\n                id: \"attribute-type-invalid\",\n                level: \"error\",\n                message: `Attribute '${key}' must be type 'string | object'`\n            }\n        ];\n    }\n    transform(value) {\n        if (!value || typeof value === \"string\") return value;\n        const classes = [];\n        for (const [k, v] of Object.entries(value ?? {}))if (v) classes.push(k);\n        return classes.join(\" \");\n    }\n};\n// src/schema-types/id.ts\nvar Id = class {\n    validate(value) {\n        if (typeof value === \"string\" && value.match(/^[a-zA-Z]/)) return [];\n        return [\n            {\n                id: \"attribute-value-invalid\",\n                level: \"error\",\n                message: \"The 'id' attribute must start with a letter\"\n            }\n        ];\n    }\n};\n// src/utils.ts\nvar import_tag = __toModule(require_tag());\n// src/ast/variable.ts\nvar Variable = class {\n    constructor(path = []){\n        this.$$mdtype = \"Variable\";\n        this.path = path;\n    }\n    resolve({ variables } = {}) {\n        return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key)=>obj[key], variables);\n    }\n};\n// src/ast/function.ts\nvar Function2 = class {\n    constructor(name, parameters){\n        this.$$mdtype = \"Function\";\n        this.name = name;\n        this.parameters = parameters;\n    }\n    resolve(config = {}) {\n        const fn = config?.functions?.[this.name];\n        if (!fn) return null;\n        const parameters = resolve(this.parameters, config);\n        return fn.transform?.(parameters, config);\n    }\n};\n// src/utils.ts\nvar STATES;\n(function(STATES2) {\n    STATES2[STATES2[\"normal\"] = 0] = \"normal\";\n    STATES2[STATES2[\"string\"] = 1] = \"string\";\n    STATES2[STATES2[\"escape\"] = 2] = \"escape\";\n})(STATES || (STATES = {}));\nvar OPEN = \"{%\";\nvar CLOSE = \"%}\";\nvar IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;\nfunction isIdentifier(s2) {\n    return typeof s2 === \"string\" && IDENTIFIER_REGEX.test(s2);\n}\nfunction isPromise(a) {\n    return a && typeof a === \"object\" && typeof a.then === \"function\";\n}\nfunction findTagEnd(content, start = 0) {\n    let state = 0;\n    for(let pos = start; pos < content.length; pos++){\n        const char = content[pos];\n        switch(state){\n            case 1:\n                switch(char){\n                    case '\"':\n                        state = 0;\n                        break;\n                    case \"\\\\\":\n                        state = 2;\n                        break;\n                }\n                break;\n            case 2:\n                state = 1;\n                break;\n            case 0:\n                if (char === '\"') state = 1;\n                else if (content.startsWith(CLOSE, pos)) return pos;\n        }\n    }\n    return null;\n}\nfunction parseTag(content, line, contentStart) {\n    try {\n        return (0, import_tag.parse)(content, {\n            Variable,\n            Function: Function2\n        });\n    } catch (error2) {\n        if (!(error2 instanceof import_tag.SyntaxError)) throw error2;\n        const { message, location: { start, end } } = error2;\n        const location = {\n            start: {\n                line,\n                character: start.offset + contentStart\n            },\n            end: {\n                line: line + 1,\n                character: end.offset + contentStart\n            }\n        };\n        return {\n            type: \"error\",\n            meta: {\n                error: {\n                    message,\n                    location\n                }\n            }\n        };\n    }\n}\nfunction parseTags(content, firstLine = 0) {\n    let line = firstLine + 1;\n    const output = [];\n    let start = 0;\n    for(let pos = 0; pos < content.length; pos++){\n        if (content[pos] === \"\\n\") {\n            line++;\n            continue;\n        }\n        if (!content.startsWith(OPEN, pos)) continue;\n        const end = findTagEnd(content, pos);\n        if (end == null) {\n            pos = pos + OPEN.length;\n            continue;\n        }\n        const text2 = content.slice(pos, end + CLOSE.length);\n        const inner = content.slice(pos + OPEN.length, end);\n        const lineStart = content.lastIndexOf(\"\\n\", pos);\n        const lineEnd = content.indexOf(\"\\n\", end);\n        const lineContent = content.slice(lineStart, lineEnd);\n        const tag = parseTag(inner.trim(), line, pos - lineStart);\n        const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;\n        const precedingText = content.slice(start, precedingTextEnd);\n        output.push({\n            type: \"text\",\n            start,\n            end: pos - 1,\n            content: precedingText\n        });\n        output.push({\n            map: [\n                line,\n                line + 1\n            ],\n            position: {\n                start: pos - lineStart,\n                end: pos - lineStart + text2.length\n            },\n            start: pos,\n            end: pos + text2.length - 1,\n            info: text2,\n            ...tag\n        });\n        start = end + CLOSE.length;\n        pos = start - 1;\n    }\n    output.push({\n        type: \"text\",\n        start,\n        end: content.length - 1,\n        content: content.slice(start)\n    });\n    return output;\n}\n// src/transformer.ts\nvar globalAttributes = {\n    class: {\n        type: Class,\n        render: true\n    },\n    id: {\n        type: Id,\n        render: true\n    }\n};\nvar transformer_default = {\n    findSchema (node2, { nodes = {}, tags = {} } = {}) {\n        return node2.tag ? tags[node2.tag] : nodes[node2.type];\n    },\n    attributes (node2, config = {}) {\n        const schema = this.findSchema(node2, config) ?? {};\n        const output = {};\n        const attrs = {\n            ...globalAttributes,\n            ...schema.attributes\n        };\n        for (const [key, attr] of Object.entries(attrs)){\n            if (attr.render == false) continue;\n            const name = typeof attr.render === \"string\" ? attr.render : key;\n            let value = node2.attributes[key];\n            if (typeof attr.type === \"function\") {\n                const instance = new attr.type();\n                if (instance.transform) {\n                    value = instance.transform(value, config);\n                }\n            }\n            value = value === void 0 ? attr.default : value;\n            if (value === void 0) continue;\n            output[name] = value;\n        }\n        if (schema.slots) {\n            for (const [key, slot2] of Object.entries(schema.slots)){\n                if (slot2.render === false) continue;\n                const name = typeof slot2.render === \"string\" ? slot2.render : key;\n                if (node2.slots[key]) output[name] = this.node(node2.slots[key], config);\n            }\n        }\n        return output;\n    },\n    children (node2, config = {}) {\n        const children = node2.children.flatMap((child)=>this.node(child, config));\n        if (children.some(isPromise)) {\n            return Promise.all(children);\n        }\n        return children;\n    },\n    node (node2, config = {}) {\n        const schema = this.findSchema(node2, config) ?? {};\n        if (schema && schema.transform instanceof Function) return schema.transform(node2, config);\n        const children = this.children(node2, config);\n        if (!schema || !schema.render) return children;\n        const attributes = this.attributes(node2, config);\n        if (isPromise(attributes) || isPromise(children)) {\n            return Promise.all([\n                attributes,\n                children\n            ]).then((values)=>new Tag(schema.render, ...values));\n        }\n        return new Tag(schema.render, attributes, children);\n    }\n};\n// src/ast/node.ts\nvar Node = class {\n    constructor(type = \"node\", attributes = {}, children = [], tag){\n        this.$$mdtype = \"Node\";\n        this.errors = [];\n        this.lines = [];\n        this.inline = false;\n        this.attributes = attributes;\n        this.children = children;\n        this.type = type;\n        this.tag = tag;\n        this.annotations = [];\n        this.slots = {};\n    }\n    *walk() {\n        for (const child of [\n            ...Object.values(this.slots),\n            ...this.children\n        ]){\n            yield child;\n            yield* child.walk();\n        }\n    }\n    push(node2) {\n        this.children.push(node2);\n    }\n    resolve(config = {}) {\n        return Object.assign(new Node(), this, {\n            children: this.children.map((child)=>child.resolve(config)),\n            attributes: resolve(this.attributes, config),\n            slots: Object.fromEntries(Object.entries(this.slots).map(([name, slot2])=>[\n                    name,\n                    slot2.resolve(config)\n                ]))\n        });\n    }\n    findSchema(config = {}) {\n        return transformer_default.findSchema(this, config);\n    }\n    transformAttributes(config = {}) {\n        return transformer_default.attributes(this, config);\n    }\n    transformChildren(config) {\n        return transformer_default.children(this, config);\n    }\n    transform(config) {\n        return transformer_default.node(this, config);\n    }\n};\n// src/ast/index.ts\nvar AstTypes = {\n    Function: Function2,\n    Node,\n    Variable\n};\nfunction reviver(_, value) {\n    if (!value) return value;\n    const klass = AstTypes[value.$$mdtype];\n    return klass ? Object.assign(new klass(), value) : value;\n}\nfunction fromJSON(text2) {\n    return JSON.parse(text2, reviver);\n}\nvar ast_default = {\n    ...AstTypes,\n    ...base_exports,\n    fromJSON\n};\n// src/formatter.ts\nvar SPACE = \" \";\nvar SEP = \", \";\nvar NL = \"\\n\";\nvar OL = \".\";\nvar UL = \"-\";\nvar MAX_TAG_OPENING_WIDTH = 80;\nvar WRAPPING_TYPES = [\n    \"strong\",\n    \"em\",\n    \"s\"\n];\nvar max = (a, b)=>Math.max(a, b);\nvar increment = (o, n = 2)=>({\n        ...o,\n        indent: (o.indent || 0) + n\n    });\nfunction* formatChildren(a, options) {\n    for (const child of a.children){\n        yield* formatValue(child, options);\n    }\n}\nfunction* formatInline(g) {\n    yield [\n        ...g\n    ].join(\"\").trim();\n}\nfunction* formatTableRow(items) {\n    yield `| ${items.join(\" | \")} |`;\n}\nfunction formatScalar(v) {\n    if (v === void 0) {\n        return void 0;\n    }\n    if (ast_default.isAst(v)) {\n        return format(v);\n    }\n    if (v === null) {\n        return \"null\";\n    }\n    if (Array.isArray(v)) {\n        return \"[\" + v.map(formatScalar).join(SEP) + \"]\";\n    }\n    if (typeof v === \"object\") {\n        return \"{\" + Object.entries(v).map(([key, value])=>`${isIdentifier(key) ? key : `\"${key}\"`}: ${formatScalar(value)}`).join(SEP) + \"}\";\n    }\n    return JSON.stringify(v);\n}\nfunction formatAnnotationValue(a) {\n    const formattedValue = formatScalar(a.value);\n    if (formattedValue === void 0) return void 0;\n    if (a.name === \"primary\") return formattedValue;\n    if (a.name === \"id\" && typeof a.value === \"string\" && isIdentifier(a.value)) return \"#\" + a.value;\n    if (a.type === \"class\" && isIdentifier(a.name)) return \".\" + a.name;\n    return `${a.name}=${formattedValue}`;\n}\nfunction* formatAttributes(n) {\n    for (const [key, value] of Object.entries(n.attributes)){\n        if (key === \"class\" && typeof value === \"object\" && !ast_default.isAst(value)) for (const name of Object.keys(value)){\n            yield formatAnnotationValue({\n                type: \"class\",\n                name,\n                value\n            });\n        }\n        else yield formatAnnotationValue({\n            type: \"attribute\",\n            name: key,\n            value\n        });\n    }\n}\nfunction* formatAnnotations(n) {\n    if (n.annotations.length) {\n        yield OPEN + SPACE;\n        yield n.annotations.map(formatAnnotationValue).join(SPACE);\n        yield SPACE + CLOSE;\n    }\n}\nfunction* formatVariable(v) {\n    yield \"$\";\n    yield v.path.map((p, i)=>{\n        if (i === 0) return p;\n        if (isIdentifier(p)) return \".\" + p;\n        if (typeof p === \"number\") return `[${p}]`;\n        return `[\"${p}\"]`;\n    }).join(\"\");\n}\nfunction* formatFunction(f) {\n    yield f.name;\n    yield \"(\";\n    yield Object.values(f.parameters).map(formatScalar).join(SEP);\n    yield \")\";\n}\nfunction* trimStart(g) {\n    let n;\n    do {\n        const { value, done } = g.next();\n        if (done) return;\n        n = value.trimStart();\n    }while (!n.length);\n    yield n;\n    yield* g;\n}\nfunction* escapeMarkdownCharacters(s2, characters) {\n    yield s2.replace(characters, \"\\\\$&\").replace(new RegExp(\"\\xa0\", \"g\"), \"&nbsp;\");\n}\nfunction* formatNode(n, o = {}) {\n    const no = {\n        ...o,\n        parent: n\n    };\n    const indent = SPACE.repeat(no.indent || 0);\n    switch(n.type){\n        case \"document\":\n            {\n                if (n.attributes.frontmatter && n.attributes.frontmatter.length) {\n                    yield \"---\" + NL + n.attributes.frontmatter + NL + \"---\" + NL + NL;\n                }\n                yield* trimStart(formatChildren(n, no));\n                break;\n            }\n        case \"heading\":\n            {\n                yield NL;\n                yield indent;\n                yield \"#\".repeat(n.attributes.level || 1);\n                yield SPACE;\n                yield* trimStart(formatChildren(n, no));\n                yield* formatAnnotations(n);\n                yield NL;\n                break;\n            }\n        case \"paragraph\":\n            {\n                yield NL;\n                yield* formatChildren(n, no);\n                yield* formatAnnotations(n);\n                yield NL;\n                break;\n            }\n        case \"inline\":\n            {\n                yield indent;\n                yield* formatChildren(n, no);\n                break;\n            }\n        case \"image\":\n            {\n                yield \"!\";\n                yield \"[\";\n                yield* formatValue(n.attributes.alt, no);\n                yield \"]\";\n                yield \"(\";\n                yield* typeof n.attributes.src === \"string\" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no);\n                if (n.attributes.title) {\n                    yield SPACE + `\"${n.attributes.title}\"`;\n                }\n                yield \")\";\n                break;\n            }\n        case \"link\":\n            {\n                yield \"[\";\n                yield* formatChildren(n, no);\n                yield \"]\";\n                yield \"(\";\n                yield* typeof n.attributes.href === \"string\" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no);\n                if (n.attributes.title) {\n                    yield SPACE + `\"${n.attributes.title}\"`;\n                }\n                yield \")\";\n                break;\n            }\n        case \"text\":\n            {\n                const { content } = n.attributes;\n                if (ast_default.isAst(content)) {\n                    yield OPEN + SPACE;\n                    yield* formatValue(content, no);\n                    yield SPACE + CLOSE;\n                } else {\n                    if (o.parent && WRAPPING_TYPES.includes(o.parent.type)) {\n                        yield* escapeMarkdownCharacters(content, /[*_~]/g);\n                    } else {\n                        yield* escapeMarkdownCharacters(content, /^[*>#]/);\n                    }\n                }\n                break;\n            }\n        case \"blockquote\":\n            {\n                const prefix = \">\" + SPACE;\n                yield n.children.map((child)=>format(child, no).trimStart()).map((d)=>NL + indent + prefix + d).join(indent + prefix);\n                break;\n            }\n        case \"hr\":\n            {\n                yield NL;\n                yield indent;\n                yield \"---\";\n                yield NL;\n                break;\n            }\n        case \"fence\":\n            {\n                yield NL;\n                yield indent;\n                const innerFence = n.attributes.content.match(/`{3,}/g) || [];\n                const innerFenceLength = innerFence.map((s2)=>s2.length).reduce(max, 0);\n                const boundary = \"`\".repeat(innerFenceLength ? innerFenceLength + 1 : 3);\n                yield boundary;\n                if (n.attributes.language) yield n.attributes.language;\n                if (n.annotations.length) yield SPACE;\n                yield* formatAnnotations(n);\n                yield NL;\n                yield indent;\n                yield n.attributes.content.split(NL).join(NL + indent);\n                yield boundary;\n                yield NL;\n                break;\n            }\n        case \"tag\":\n            {\n                if (!n.inline) {\n                    yield NL;\n                    yield indent;\n                }\n                const open = OPEN + SPACE;\n                const attributes = [\n                    ...formatAttributes(n)\n                ].filter((v)=>v !== void 0);\n                const tag = [\n                    open + n.tag,\n                    ...attributes\n                ];\n                const inlineTag = tag.join(SPACE);\n                const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);\n                yield (!n.inline && isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? \"\" : \"/\") + CLOSE;\n                if (n.children.length) {\n                    yield* formatChildren(n, no.allowIndentation ? increment(no) : no);\n                    if (!n.inline) {\n                        yield indent;\n                    }\n                    yield OPEN + SPACE + \"/\" + n.tag + SPACE + CLOSE;\n                }\n                if (!n.inline) {\n                    yield NL;\n                }\n                break;\n            }\n        case \"list\":\n            {\n                const isLoose = n.children.some((n2)=>n2.children.some((c)=>c.type === \"paragraph\"));\n                for(let i = 0; i < n.children.length; i++){\n                    const prefix = n.attributes.ordered ? `${i === 0 ? n.attributes.start ?? \"1\" : \"1\"}${n.attributes.marker ?? OL}` : n.attributes.marker ?? UL;\n                    let d = format(n.children[i], increment(no, prefix.length + 1));\n                    if (!isLoose || i === n.children.length - 1) {\n                        d = d.trim();\n                    }\n                    yield NL + indent + prefix + \" \" + d;\n                }\n                yield NL;\n                break;\n            }\n        case \"item\":\n            {\n                for(let i = 0; i < n.children.length; i++){\n                    yield* formatValue(n.children[i], no);\n                    if (i === 0) yield* formatAnnotations(n);\n                }\n                break;\n            }\n        case \"strong\":\n            {\n                yield n.attributes.marker ?? \"**\";\n                yield* formatInline(formatChildren(n, no));\n                yield n.attributes.marker ?? \"**\";\n                break;\n            }\n        case \"em\":\n            {\n                yield n.attributes.marker ?? \"*\";\n                yield* formatInline(formatChildren(n, no));\n                yield n.attributes.marker ?? \"*\";\n                break;\n            }\n        case \"code\":\n            {\n                yield \"`\";\n                yield* formatInline(formatValue(n.attributes.content, no));\n                yield \"`\";\n                break;\n            }\n        case \"s\":\n            {\n                yield \"~~\";\n                yield* formatInline(formatChildren(n, no));\n                yield \"~~\";\n                break;\n            }\n        case \"hardbreak\":\n            {\n                yield \"\\\\\" + NL;\n                yield indent;\n                break;\n            }\n        case \"softbreak\":\n            {\n                yield NL;\n                yield indent;\n                break;\n            }\n        case \"table\":\n            {\n                const table3 = [\n                    ...formatChildren(n, increment(no))\n                ];\n                if (o.parent && o.parent.type === \"tag\" && o.parent.tag === \"table\") {\n                    for(let i = 0; i < table3.length; i++){\n                        const row = table3[i];\n                        if (typeof row === \"string\") {\n                            if (row.trim().length) {\n                                yield NL;\n                                yield row;\n                            }\n                        } else {\n                            if (i !== 0) {\n                                yield NL;\n                                yield indent + \"---\";\n                            }\n                            for (const d of row){\n                                yield NL + indent + UL + \" \" + d;\n                            }\n                        }\n                    }\n                    yield NL;\n                } else {\n                    const widths = [];\n                    for (const row of table3){\n                        for(let i = 0; i < row.length; i++){\n                            widths[i] = widths[i] ? Math.max(widths[i], row[i].length) : row[i].length;\n                        }\n                    }\n                    const [head, ...rows] = table3;\n                    yield NL;\n                    yield* formatTableRow(head.map((cell, i)=>cell + SPACE.repeat(widths[i] - cell.length)));\n                    yield NL;\n                    yield* formatTableRow(head.map((cell, i)=>\"-\".repeat(widths[i])));\n                    yield NL;\n                    for (const row of rows){\n                        yield* formatTableRow(row.map((cell, i)=>cell + SPACE.repeat(widths[i] - cell.length)));\n                        yield NL;\n                    }\n                }\n                break;\n            }\n        case \"thead\":\n            {\n                const [head] = [\n                    ...formatChildren(n, no)\n                ];\n                yield head || [];\n                break;\n            }\n        case \"tr\":\n            {\n                yield [\n                    ...formatChildren(n, no)\n                ];\n                break;\n            }\n        case \"td\":\n        case \"th\":\n            {\n                yield [\n                    ...formatChildren(n, no),\n                    ...formatAnnotations(n)\n                ].join(\"\").trim();\n                break;\n            }\n        case \"tbody\":\n            {\n                yield* formatChildren(n, no);\n                break;\n            }\n        case \"comment\":\n            {\n                yield \"<!-- \" + n.attributes.content + \" -->\\n\";\n                break;\n            }\n        case \"error\":\n        case \"node\":\n            break;\n    }\n}\nfunction* formatValue(v, o = {}) {\n    switch(typeof v){\n        case \"undefined\":\n            break;\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            {\n                yield v.toString();\n                break;\n            }\n        case \"object\":\n            {\n                if (v === null) break;\n                if (Array.isArray(v)) {\n                    for (const n of v)yield* formatValue(n, o);\n                    break;\n                }\n                switch(v.$$mdtype){\n                    case \"Function\":\n                        {\n                            yield* formatFunction(v);\n                            break;\n                        }\n                    case \"Node\":\n                        yield* formatNode(v, o);\n                        break;\n                    case \"Variable\":\n                        {\n                            yield* formatVariable(v);\n                            break;\n                        }\n                    default:\n                        throw new Error(`Unimplemented: \"${v.$$mdtype}\"`);\n                }\n                break;\n            }\n    }\n}\nfunction format(v, options) {\n    let doc = \"\";\n    for (const s2 of formatValue(v, options))doc += s2;\n    return doc.trimStart();\n}\n// src/tags/conditional.ts\nfunction truthy(value) {\n    return value !== false && value !== void 0 && value !== null;\n}\nfunction renderConditions(node2) {\n    const conditions = [\n        {\n            condition: node2.attributes.primary,\n            children: []\n        }\n    ];\n    for (const child of node2.children){\n        if (child.type === \"tag\" && child.tag === \"else\") conditions.push({\n            condition: \"primary\" in child.attributes ? child.attributes.primary : true,\n            children: []\n        });\n        else conditions[conditions.length - 1].children.push(child);\n    }\n    return conditions;\n}\nvar tagIf = {\n    attributes: {\n        primary: {\n            type: Object,\n            render: false\n        }\n    },\n    transform (node2, config) {\n        const conditions = renderConditions(node2);\n        for (const { condition, children } of conditions)if (truthy(condition)) {\n            const nodes = children.flatMap((child)=>child.transform(config));\n            if (nodes.some(isPromise)) {\n                return Promise.all(nodes).then((nodes2)=>nodes2.flat());\n            }\n            return nodes;\n        }\n        return [];\n    }\n};\nvar tagElse = {\n    selfClosing: true,\n    attributes: {\n        primary: {\n            type: Object,\n            render: false\n        }\n    }\n};\n// src/functions/index.ts\nvar and = {\n    transform (parameters) {\n        return Object.values(parameters).every((x)=>truthy(x));\n    }\n};\nvar or = {\n    transform (parameters) {\n        return Object.values(parameters).find((x)=>truthy(x)) !== void 0;\n    }\n};\nvar not = {\n    parameters: {\n        0: {\n            required: true\n        }\n    },\n    transform (parameters) {\n        return !truthy(parameters[0]);\n    }\n};\nvar equals = {\n    transform (parameters) {\n        const values = Object.values(parameters);\n        return values.every((v)=>v === values[0]);\n    }\n};\nvar debug = {\n    transform (parameters) {\n        return JSON.stringify(parameters[0], null, 2);\n    }\n};\nvar defaultFn = {\n    transform (parameters) {\n        return parameters[0] === void 0 ? parameters[1] : parameters[0];\n    }\n};\nvar functions_default = {\n    and,\n    or,\n    not,\n    equals,\n    default: defaultFn,\n    debug\n};\n// src/transforms/table.ts\nfunction convertToRow(node2, cellType = \"td\") {\n    node2.type = \"tr\";\n    node2.attributes = {};\n    for (const cell of node2.children)cell.type = cellType;\n    return node2;\n}\nfunction transform(document2) {\n    for (const node2 of document2.walk()){\n        if (node2.type !== \"tag\" || node2.tag !== \"table\") continue;\n        const [first, ...rest] = node2.children;\n        if (!first || first.type === \"table\") continue;\n        const table3 = new ast_default.Node(\"table\", node2.attributes, [\n            new ast_default.Node(\"thead\"),\n            new ast_default.Node(\"tbody\")\n        ]);\n        const [thead2, tbody2] = table3.children;\n        if (first.type === \"list\") thead2.push(convertToRow(first, \"th\"));\n        for (const row of rest){\n            if (row.type === \"list\") convertToRow(row);\n            else if (row.type === \"tag\" && row.tag === \"if\") {\n                const children = [];\n                for (const child of row.children){\n                    if (child.type === \"hr\") continue;\n                    if (child.type === \"list\") convertToRow(child);\n                    children.push(child);\n                }\n                row.children = children;\n            } else continue;\n            tbody2.push(row);\n        }\n        node2.children = [\n            table3\n        ];\n    }\n}\n// src/transforms/index.ts\nvar transforms_default = [\n    transform\n];\n// src/parser.ts\nvar mappings = {\n    ordered_list: \"list\",\n    bullet_list: \"list\",\n    code_inline: \"code\",\n    list_item: \"item\",\n    variable: \"text\"\n};\nfunction annotate(node2, attributes) {\n    for (const attribute of attributes){\n        node2.annotations.push(attribute);\n        const { name, value, type } = attribute;\n        if (type === \"attribute\") {\n            if (node2.attributes[name] !== void 0) node2.errors.push({\n                id: \"duplicate-attribute\",\n                level: \"warning\",\n                message: `Attribute '${name}' already set`\n            });\n            node2.attributes[name] = value;\n        } else if (type === \"class\") if (node2.attributes.class) node2.attributes.class[name] = value;\n        else node2.attributes.class = {\n            [name]: value\n        };\n    }\n}\nfunction handleAttrs(token, type) {\n    switch(type){\n        case \"heading\":\n            return {\n                level: Number(token.tag.replace(\"h\", \"\"))\n            };\n        case \"list\":\n            {\n                const attrs = token.attrs ? Object.fromEntries(token.attrs) : void 0;\n                const ordered = token.type.startsWith(\"ordered\");\n                return ordered && attrs?.start ? {\n                    ordered: true,\n                    start: attrs.start,\n                    marker: token.markup\n                } : {\n                    ordered,\n                    marker: token.markup\n                };\n            }\n        case \"link\":\n            {\n                const attrs = Object.fromEntries(token.attrs);\n                return attrs.title ? {\n                    href: attrs.href,\n                    title: attrs.title\n                } : {\n                    href: attrs.href\n                };\n            }\n        case \"image\":\n            {\n                const attrs = Object.fromEntries(token.attrs);\n                return attrs.title ? {\n                    alt: token.content,\n                    src: attrs.src,\n                    title: attrs.title\n                } : {\n                    alt: token.content,\n                    src: attrs.src\n                };\n            }\n        case \"em\":\n        case \"strong\":\n            return {\n                marker: token.markup\n            };\n        case \"text\":\n        case \"code\":\n        case \"comment\":\n            return {\n                content: (token.meta || {}).variable || token.content\n            };\n        case \"fence\":\n            {\n                const [language] = token.info.split(\" \", 1);\n                return language === \"\" || language === OPEN ? {\n                    content: token.content\n                } : {\n                    content: token.content,\n                    language\n                };\n            }\n        case \"td\":\n        case \"th\":\n            {\n                if (token.attrs) {\n                    const attrs = Object.fromEntries(token.attrs);\n                    let align;\n                    if (attrs.style) {\n                        if (attrs.style.includes(\"left\")) {\n                            align = \"left\";\n                        } else if (attrs.style.includes(\"center\")) {\n                            align = \"center\";\n                        } else if (attrs.style.includes(\"right\")) {\n                            align = \"right\";\n                        }\n                    }\n                    if (align) {\n                        return {\n                            align\n                        };\n                    }\n                }\n                return {};\n            }\n        default:\n            return {};\n    }\n}\nfunction handleToken(token, nodes, file, handleSlots, addLocation, inlineParent) {\n    if (token.type === \"frontmatter\") {\n        nodes[0].attributes.frontmatter = token.content;\n        return;\n    }\n    if (token.hidden || token.type === \"text\" && token.content === \"\") return;\n    const errors = token.errors || [];\n    const parent = nodes[nodes.length - 1];\n    const { tag, attributes, error: error2 } = token.meta || {};\n    if (token.type === \"annotation\") {\n        if (inlineParent) return annotate(inlineParent, attributes);\n        return parent.errors.push({\n            id: \"no-inline-annotations\",\n            level: \"error\",\n            message: `Can't apply inline annotations to '${parent.type}'`\n        });\n    }\n    let typeName = token.type.replace(/_(open|close)$/, \"\");\n    if (mappings[typeName]) typeName = mappings[typeName];\n    if (typeName === \"error\") {\n        const { message, location } = error2;\n        errors.push({\n            id: \"parse-error\",\n            level: \"critical\",\n            message,\n            location\n        });\n    }\n    if (token.nesting < 0) {\n        if (parent.type === typeName && parent.tag === tag) {\n            if (parent.lines && token.map) parent.lines.push(...token.map);\n            return nodes.pop();\n        }\n        errors.push({\n            id: \"missing-opening\",\n            level: \"critical\",\n            message: `Node '${typeName}' is missing opening`\n        });\n    }\n    const attrs = handleAttrs(token, typeName);\n    const node2 = new Node(typeName, attrs, void 0, tag || void 0);\n    const { position = {} } = token;\n    node2.errors = errors;\n    if (addLocation !== false) {\n        node2.lines = token.map || parent.lines || [];\n        node2.location = {\n            file,\n            start: {\n                line: node2.lines[0],\n                character: position.start\n            },\n            end: {\n                line: node2.lines[1],\n                character: position.end\n            }\n        };\n    }\n    if (inlineParent) node2.inline = true;\n    if (attributes && [\n        \"tag\",\n        \"fence\",\n        \"image\"\n    ].includes(typeName)) annotate(node2, attributes);\n    if (handleSlots && tag === \"slot\" && typeof node2.attributes.primary === \"string\") parent.slots[node2.attributes.primary] = node2;\n    else parent.push(node2);\n    if (token.nesting > 0) nodes.push(node2);\n    if (!Array.isArray(token.children)) return;\n    if (node2.type === \"inline\") inlineParent = parent;\n    nodes.push(node2);\n    const isLeafNode = typeName === \"image\";\n    if (!isLeafNode) {\n        for (const child of token.children)handleToken(child, nodes, file, handleSlots, addLocation, inlineParent);\n    }\n    nodes.pop();\n}\nfunction parser(tokens, args) {\n    const doc = new Node(\"document\");\n    const nodes = [\n        doc\n    ];\n    if (typeof args === \"string\") args = {\n        file: args\n    };\n    for (const token of tokens)handleToken(token, nodes, args?.file, args?.slots, args?.location);\n    if (nodes.length > 1) for (const node2 of nodes.slice(1))node2.errors.push({\n        id: \"missing-closing\",\n        level: \"critical\",\n        message: `Node '${node2.tag || node2.type}' is missing closing`\n    });\n    for (const transform3 of transforms_default)transform3(doc);\n    return doc;\n}\n// src/schema.ts\nvar schema_exports = {};\n__export(schema_exports, {\n    blockquote: ()=>blockquote,\n    code: ()=>code,\n    comment: ()=>comment,\n    document: ()=>document,\n    em: ()=>em,\n    error: ()=>error,\n    fence: ()=>fence,\n    hardbreak: ()=>hardbreak,\n    heading: ()=>heading,\n    hr: ()=>hr,\n    image: ()=>image,\n    inline: ()=>inline,\n    item: ()=>item,\n    link: ()=>link,\n    list: ()=>list,\n    node: ()=>node,\n    paragraph: ()=>paragraph,\n    s: ()=>s,\n    softbreak: ()=>softbreak,\n    strong: ()=>strong,\n    table: ()=>table,\n    tbody: ()=>tbody,\n    td: ()=>td,\n    text: ()=>text,\n    th: ()=>th,\n    thead: ()=>thead,\n    tr: ()=>tr\n});\nvar document = {\n    render: \"article\",\n    children: [\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"comment\",\n        \"list\",\n        \"hr\"\n    ],\n    attributes: {\n        frontmatter: {\n            render: false\n        }\n    }\n};\nvar heading = {\n    children: [\n        \"inline\"\n    ],\n    attributes: {\n        level: {\n            type: Number,\n            render: false,\n            required: true\n        }\n    },\n    transform (node2, config) {\n        return new Tag(`h${node2.attributes[\"level\"]}`, node2.transformAttributes(config), node2.transformChildren(config));\n    }\n};\nvar paragraph = {\n    render: \"p\",\n    children: [\n        \"inline\"\n    ]\n};\nvar image = {\n    render: \"img\",\n    attributes: {\n        src: {\n            type: String,\n            required: true\n        },\n        alt: {\n            type: String\n        },\n        title: {\n            type: String\n        }\n    }\n};\nvar fence = {\n    render: \"pre\",\n    attributes: {\n        content: {\n            type: String,\n            render: false,\n            required: true\n        },\n        language: {\n            type: String,\n            render: \"data-language\"\n        },\n        process: {\n            type: Boolean,\n            render: false,\n            default: true\n        }\n    },\n    transform (node2, config) {\n        const attributes = node2.transformAttributes(config);\n        const children = node2.children.length ? node2.transformChildren(config) : [\n            node2.attributes.content\n        ];\n        return new Tag(\"pre\", attributes, children);\n    }\n};\nvar blockquote = {\n    render: \"blockquote\",\n    children: [\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"list\",\n        \"hr\"\n    ]\n};\nvar item = {\n    render: \"li\",\n    children: [\n        \"inline\",\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"list\",\n        \"hr\"\n    ]\n};\nvar list = {\n    children: [\n        \"item\"\n    ],\n    attributes: {\n        ordered: {\n            type: Boolean,\n            render: false,\n            required: true\n        },\n        start: {\n            type: Number\n        },\n        marker: {\n            type: String,\n            render: false\n        }\n    },\n    transform (node2, config) {\n        return new Tag(node2.attributes.ordered ? \"ol\" : \"ul\", node2.transformAttributes(config), node2.transformChildren(config));\n    }\n};\nvar hr = {\n    render: \"hr\"\n};\nvar table = {\n    render: \"table\"\n};\nvar td = {\n    render: \"td\",\n    children: [\n        \"inline\",\n        \"heading\",\n        \"paragraph\",\n        \"image\",\n        \"table\",\n        \"tag\",\n        \"fence\",\n        \"blockquote\",\n        \"list\",\n        \"hr\"\n    ],\n    attributes: {\n        align: {\n            type: String\n        },\n        colspan: {\n            type: Number,\n            render: \"colSpan\"\n        },\n        rowspan: {\n            type: Number,\n            render: \"rowSpan\"\n        }\n    }\n};\nvar th = {\n    render: \"th\",\n    attributes: {\n        width: {\n            type: String\n        },\n        align: {\n            type: String\n        },\n        colspan: {\n            type: Number,\n            render: \"colSpan\"\n        },\n        rowspan: {\n            type: Number,\n            render: \"rowSpan\"\n        }\n    }\n};\nvar tr = {\n    render: \"tr\",\n    children: [\n        \"th\",\n        \"td\"\n    ]\n};\nvar tbody = {\n    render: \"tbody\",\n    children: [\n        \"tr\",\n        \"tag\"\n    ]\n};\nvar thead = {\n    render: \"thead\",\n    children: [\n        \"tr\"\n    ]\n};\nvar strong = {\n    render: \"strong\",\n    children: [\n        \"em\",\n        \"s\",\n        \"link\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ],\n    attributes: {\n        marker: {\n            type: String,\n            render: false\n        }\n    }\n};\nvar em = {\n    render: \"em\",\n    children: [\n        \"strong\",\n        \"s\",\n        \"link\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ],\n    attributes: {\n        marker: {\n            type: String,\n            render: false\n        }\n    }\n};\nvar s = {\n    render: \"s\",\n    children: [\n        \"strong\",\n        \"em\",\n        \"link\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ]\n};\nvar inline = {\n    children: [\n        \"strong\",\n        \"em\",\n        \"s\",\n        \"code\",\n        \"text\",\n        \"tag\",\n        \"link\",\n        \"image\",\n        \"hardbreak\",\n        \"softbreak\",\n        \"comment\"\n    ]\n};\nvar link = {\n    render: \"a\",\n    children: [\n        \"strong\",\n        \"em\",\n        \"s\",\n        \"code\",\n        \"text\",\n        \"tag\"\n    ],\n    attributes: {\n        href: {\n            type: String,\n            required: true\n        },\n        title: {\n            type: String\n        }\n    }\n};\nvar code = {\n    render: \"code\",\n    attributes: {\n        content: {\n            type: String,\n            render: false,\n            required: true\n        }\n    },\n    transform (node2, config) {\n        const attributes = node2.transformAttributes(config);\n        return new Tag(\"code\", attributes, [\n            node2.attributes.content\n        ]);\n    }\n};\nvar text = {\n    attributes: {\n        content: {\n            type: String,\n            required: true\n        }\n    },\n    transform (node2) {\n        return node2.attributes.content;\n    }\n};\nvar hardbreak = {\n    render: \"br\"\n};\nvar softbreak = {\n    transform () {\n        return \" \";\n    }\n};\nvar comment = {\n    attributes: {\n        content: {\n            type: String,\n            required: true\n        }\n    }\n};\nvar error = {};\nvar node = {};\n// src/renderers/html.ts\nvar import_markdown_it = __toModule(require_markdown_it());\nvar { escapeHtml } = (0, import_markdown_it.default)().utils;\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"br\",\n    \"col\",\n    \"embed\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nfunction render(node2) {\n    if (typeof node2 === \"string\" || typeof node2 === \"number\") return escapeHtml(String(node2));\n    if (Array.isArray(node2)) return node2.map(render).join(\"\");\n    if (node2 === null || typeof node2 !== \"object\" || !Tag.isTag(node2)) return \"\";\n    const { name, attributes, children = [] } = node2;\n    if (!name) return render(children);\n    let output = `<${name}`;\n    for (const [k, v] of Object.entries(attributes ?? {}))output += ` ${k.toLowerCase()}=\"${escapeHtml(String(v))}\"`;\n    output += \">\";\n    if (voidElements.has(name)) return output;\n    if (children.length) output += render(children);\n    output += `</${name}>`;\n    return output;\n}\n// src/renderers/react/react.ts\nfunction tagName(name, components) {\n    return typeof name !== \"string\" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\nfunction dynamic(node2, React, { components = {} } = {}) {\n    function deepRender2(value) {\n        if (value == null || typeof value !== \"object\") return value;\n        if (Array.isArray(value)) return value.map((item2)=>deepRender2(item2));\n        if (value.$$mdtype === \"Tag\") return render3(value);\n        if (typeof value !== \"object\") return value;\n        const output = {};\n        for (const [k, v] of Object.entries(value))output[k] = deepRender2(v);\n        return output;\n    }\n    function render3(node3) {\n        if (Array.isArray(node3)) return React.createElement(React.Fragment, null, ...node3.map(render3));\n        if (node3 === null || typeof node3 !== \"object\" || !Tag.isTag(node3)) return node3;\n        const { name, attributes: { class: className, ...attrs } = {}, children = [] } = node3;\n        if (className) attrs.className = className;\n        return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));\n    }\n    return render3(node2);\n}\n// src/renderers/react/static.ts\nfunction tagName2(name, components) {\n    return typeof name !== \"string\" ? \"Fragment\" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];\n}\nfunction renderArray(children) {\n    return children.map(render2).join(\", \");\n}\nfunction deepRender(value) {\n    if (value == null || typeof value !== \"object\") return JSON.stringify(value);\n    if (Array.isArray(value)) return `[${value.map((item2)=>deepRender(item2)).join(\", \")}]`;\n    if (value.$$mdtype === \"Tag\") return render2(value);\n    if (typeof value !== \"object\") return JSON.stringify(value);\n    const object = Object.entries(value).map(([k, v])=>[\n            JSON.stringify(k),\n            deepRender(v)\n        ].join(\": \")).join(\", \");\n    return `{${object}}`;\n}\nfunction render2(node2) {\n    if (Array.isArray(node2)) return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;\n    if (node2 === null || typeof node2 !== \"object\" || !Tag.isTag(node2)) return JSON.stringify(node2);\n    const { name, attributes: { class: className, ...attrs } = {}, children = [] } = node2;\n    if (className) attrs.className = className;\n    return `React.createElement(\n    tagName(${JSON.stringify(name)}, components),\n    ${Object.keys(attrs).length == 0 ? \"null\" : deepRender(attrs)},\n    ${renderArray(children)})`;\n}\nfunction reactStatic(node2) {\n    return `\n  (({components = {}} = {}) => {\n    ${tagName2}\n    return ${render2(node2)};\n  })\n`;\n}\n// src/renderers/index.ts\nvar renderers_default = {\n    html: render,\n    react: dynamic,\n    reactStatic\n};\n// src/tags/partial.ts\nvar PartialFile = class {\n    validate(file, config) {\n        const { partials = {} } = config;\n        const partial2 = partials[file];\n        if (!partial2) return [\n            {\n                id: \"attribute-value-invalid\",\n                level: \"error\",\n                message: `Partial \\`${file}\\` not found. The 'file' attribute must be set in \\`config.partials\\``\n            }\n        ];\n        return [];\n    }\n};\nvar partial = {\n    inline: false,\n    selfClosing: true,\n    attributes: {\n        file: {\n            type: PartialFile,\n            render: false,\n            required: true\n        },\n        variables: {\n            type: Object,\n            render: false\n        }\n    },\n    transform (node2, config) {\n        const { partials = {} } = config;\n        const { file, variables } = node2.attributes;\n        const partial2 = partials[file];\n        if (!partial2) return null;\n        const scopedConfig = {\n            ...config,\n            variables: {\n                ...config.variables,\n                ...variables,\n                [\"$$partial:filename\"]: file\n            }\n        };\n        const transformChildren = (part)=>part.resolve(scopedConfig).transformChildren(scopedConfig);\n        return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);\n    }\n};\n// src/tags/table.ts\nvar table2 = {\n    children: [\n        \"table\"\n    ],\n    inline: false\n};\n// src/tags/slot.ts\nvar slot = {\n    attributes: {\n        primary: {\n            type: String,\n            required: true\n        }\n    }\n};\n// src/tags/index.ts\nvar tags_default = {\n    else: tagElse,\n    if: tagIf,\n    partial,\n    slot,\n    table: table2\n};\n// src/tokenizer/index.ts\nvar import_lib = __toModule(require_lib());\n// src/tokenizer/plugins/annotations.ts\nvar import_tag7 = __toModule(require_tag());\nfunction createToken(state, content, contentStart) {\n    try {\n        const { type, meta, nesting = 0 } = (0, import_tag7.parse)(content, {\n            Variable,\n            Function: Function2\n        });\n        const token = state.push(type, \"\", nesting);\n        token.info = content;\n        token.meta = meta;\n        if (!state.delimiters) {\n            state.delimiters = [];\n        }\n        return token;\n    } catch (error2) {\n        if (!(error2 instanceof import_tag7.SyntaxError)) throw error2;\n        const { message, location: { start, end } } = error2;\n        const location = contentStart ? {\n            start: {\n                offset: start.offset + contentStart\n            },\n            end: {\n                offset: end.offset + contentStart\n            }\n        } : null;\n        const token = state.push(\"error\", \"\", 0);\n        token.meta = {\n            error: {\n                message,\n                location\n            }\n        };\n        return token;\n    }\n}\nfunction block(state, startLine, endLine, silent) {\n    const start = state.bMarks[startLine] + state.tShift[startLine];\n    const finish = state.eMarks[startLine];\n    if (!state.src.startsWith(OPEN, start)) return false;\n    const tagEnd = findTagEnd(state.src, start);\n    const lastPossible = state.src.slice(0, finish).trim().length;\n    if (!tagEnd || tagEnd < lastPossible - CLOSE.length) return false;\n    const contentStart = start + OPEN.length;\n    const content = state.src.slice(contentStart, tagEnd).trim();\n    const lines = state.src.slice(start, tagEnd + CLOSE.length).split(\"\\n\").length;\n    if (content[0] === \"$\") return false;\n    if (silent) return true;\n    const token = createToken(state, content, contentStart);\n    token.map = [\n        startLine,\n        startLine + lines\n    ];\n    state.line += lines;\n    return true;\n}\nfunction inline2(state, silent) {\n    if (!state.src.startsWith(OPEN, state.pos)) return false;\n    const tagEnd = findTagEnd(state.src, state.pos);\n    if (!tagEnd) return false;\n    const content = state.src.slice(state.pos + OPEN.length, tagEnd);\n    if (!silent) createToken(state, content.trim());\n    state.pos = tagEnd + CLOSE.length;\n    return true;\n}\nfunction core(state) {\n    let token;\n    for (token of state.tokens){\n        if (token.type !== \"fence\") continue;\n        if (token.info.includes(OPEN)) {\n            const start = token.info.indexOf(OPEN);\n            const end = findTagEnd(token.info, start);\n            const content = token.info.slice(start + OPEN.length, end);\n            try {\n                const { meta } = (0, import_tag7.parse)(content.trim(), {\n                    Variable,\n                    Function: Function2\n                });\n                token.meta = meta;\n            } catch (error2) {\n                if (!(error2 instanceof import_tag7.SyntaxError)) throw error2;\n                if (!token.errors) token.errors = [];\n                token.errors.push({\n                    id: \"fence-tag-error\",\n                    level: \"error\",\n                    message: `Syntax error in fence tag: ${error2.message}`\n                });\n            }\n        }\n        if (token?.meta?.attributes?.find((attr)=>attr.name === \"process\" && !attr.value)) continue;\n        token.children = parseTags(token.content, token.map[0]);\n    }\n}\nfunction plugin(md) {\n    md.block.ruler.before(\"paragraph\", \"annotations\", block, {\n        alt: [\n            \"paragraph\",\n            \"blockquote\"\n        ]\n    });\n    md.inline.ruler.push(\"containers\", inline2);\n    md.core.ruler.push(\"annotations\", core);\n}\n// src/tokenizer/plugins/frontmatter.ts\nvar fence2 = \"---\";\nfunction getLine(state, n) {\n    return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();\n}\nfunction findClose(state, endLine) {\n    for(let line = 1; line < endLine; line++)if (getLine(state, line) === fence2) return line;\n}\nfunction block2(state, startLine, endLine, silent) {\n    if (startLine != 0 || getLine(state, 0) != fence2) return false;\n    const close = findClose(state, endLine);\n    if (!close) return false;\n    if (silent) return true;\n    const token = state.push(\"frontmatter\", \"\", 0);\n    token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();\n    token.map = [\n        0,\n        close\n    ];\n    token.hidden = true;\n    state.line = close + 1;\n    return true;\n}\nfunction plugin2(md) {\n    md.block.ruler.before(\"hr\", \"frontmatter\", block2);\n}\n// src/tokenizer/plugins/comments.ts\nvar OPEN2 = \"<!--\";\nvar CLOSE2 = \"-->\";\nfunction block3(state, startLine, endLine, silent) {\n    const start = state.bMarks[startLine] + state.tShift[startLine];\n    if (!state.src.startsWith(OPEN2, start)) return false;\n    const close = state.src.indexOf(CLOSE2, start);\n    if (!close) return false;\n    if (silent) return true;\n    const content = state.src.slice(start + OPEN2.length, close);\n    const lines = content.split(\"\\n\").length;\n    const token = state.push(\"comment\", \"\", 0);\n    token.content = content.trim();\n    token.map = [\n        startLine,\n        startLine + lines\n    ];\n    state.line += lines;\n    return true;\n}\nfunction inline3(state, silent) {\n    if (!state.src.startsWith(OPEN2, state.pos)) return false;\n    const close = state.src.indexOf(CLOSE2, state.pos);\n    if (!close) return false;\n    if (silent) return true;\n    const content = state.src.slice(state.pos + OPEN2.length, close);\n    const token = state.push(\"comment\", \"\", 0);\n    token.content = content.trim();\n    state.pos = close + CLOSE2.length;\n    return true;\n}\nfunction plugin3(md) {\n    md.block.ruler.before(\"table\", \"comment\", block3, {\n        alt: [\n            \"paragraph\"\n        ]\n    });\n    md.inline.ruler.push(\"comment\", inline3);\n}\n// src/tokenizer/index.ts\nvar Tokenizer = class {\n    constructor(config = {}){\n        this.parser = new import_lib.default(config);\n        this.parser.use(plugin, \"annotations\", {});\n        this.parser.use(plugin2, \"frontmatter\", {});\n        this.parser.disable([\n            \"lheading\",\n            \"code\"\n        ]);\n        if (config.allowComments) this.parser.use(plugin3, \"comments\", {});\n    }\n    tokenize(content) {\n        return this.parser.parse(content.toString(), {});\n    }\n};\n// src/validator.ts\nvar TypeMappings = {\n    String,\n    Number,\n    Array,\n    Object,\n    Boolean\n};\nfunction validateType(type, value, config, key) {\n    if (!type) return true;\n    if (ast_default.isFunction(value) && config.validation?.validateFunctions) {\n        const schema = config.functions?.[value.name];\n        return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t)=>t === type) !== void 0 : schema.returns === type;\n    }\n    if (ast_default.isAst(value)) return true;\n    if (Array.isArray(type)) return type.some((t)=>validateType(t, value, config, key));\n    if (typeof type === \"string\") type = TypeMappings[type];\n    if (typeof type === \"function\") {\n        const instance = new type();\n        if (instance.validate) {\n            return instance.validate(value, config, key);\n        }\n    }\n    return value != null && value.constructor === type;\n}\nfunction typeToString(type) {\n    if (typeof type === \"string\") return type;\n    if (Array.isArray(type)) return type.map(typeToString).join(\" | \");\n    return type.name;\n}\nfunction validateFunction(fn, config) {\n    const schema = config.functions?.[fn.name];\n    const errors = [];\n    if (!schema) return [\n        {\n            id: \"function-undefined\",\n            level: \"critical\",\n            message: `Undefined function: '${fn.name}'`\n        }\n    ];\n    if (schema.validate) errors.push(...schema.validate(fn, config));\n    if (schema.parameters) {\n        for (const [key, value] of Object.entries(fn.parameters)){\n            const param = schema.parameters?.[key];\n            if (!param) {\n                errors.push({\n                    id: \"parameter-undefined\",\n                    level: \"error\",\n                    message: `Invalid parameter: '${key}'`\n                });\n                continue;\n            }\n            if (ast_default.isAst(value) && !ast_default.isFunction(value)) continue;\n            if (param.type) {\n                const valid = validateType(param.type, value, config, key);\n                if (valid === false) {\n                    errors.push({\n                        id: \"parameter-type-invalid\",\n                        level: \"error\",\n                        message: `Parameter '${key}' of '${fn.name}' must be type of '${typeToString(param.type)}'`\n                    });\n                } else if (Array.isArray(valid)) {\n                    errors.push(...valid);\n                }\n            }\n        }\n    }\n    for (const [key, { required }] of Object.entries(schema.parameters ?? {}))if (required && fn.parameters[key] === void 0) errors.push({\n        id: \"parameter-missing-required\",\n        level: \"error\",\n        message: `Missing required parameter: '${key}'`\n    });\n    return errors;\n}\nfunction displayMatches(matches, n) {\n    if (matches.length <= n) return JSON.stringify(matches);\n    const items = matches.slice(0, n).map((item2)=>JSON.stringify(item2));\n    return `[${items.join(\",\")}, ... ${matches.length - n} more]`;\n}\nfunction validator(node2, config) {\n    const schema = node2.findSchema(config);\n    const errors = [\n        ...node2.errors || []\n    ];\n    if (!schema) {\n        errors.push({\n            id: node2.tag ? \"tag-undefined\" : \"node-undefined\",\n            level: \"critical\",\n            message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`\n        });\n        return errors;\n    }\n    if (schema.inline != void 0 && node2.inline !== schema.inline) errors.push({\n        id: \"tag-placement-invalid\",\n        level: \"critical\",\n        message: `'${node2.tag}' tag should be ${schema.inline ? \"inline\" : \"block\"}`\n    });\n    if (schema.selfClosing && node2.children.length > 0) errors.push({\n        id: \"tag-selfclosing-has-children\",\n        level: \"critical\",\n        message: `'${node2.tag}' tag should be self-closing`\n    });\n    const attributes = {\n        ...globalAttributes,\n        ...schema.attributes\n    };\n    for (const key of Object.keys(node2.slots)){\n        const slot2 = schema.slots?.[key];\n        if (!slot2) errors.push({\n            id: \"slot-undefined\",\n            level: \"error\",\n            message: `Invalid slot: '${key}'`\n        });\n    }\n    for (let [key, value] of Object.entries(node2.attributes)){\n        const attrib = attributes[key];\n        if (!attrib) {\n            errors.push({\n                id: \"attribute-undefined\",\n                level: \"error\",\n                message: `Invalid attribute: '${key}'`\n            });\n            continue;\n        }\n        let { type, matches, errorLevel } = attrib;\n        if (ast_default.isAst(value)) {\n            if (ast_default.isFunction(value) && config.validation?.validateFunctions) errors.push(...validateFunction(value, config));\n            else if (ast_default.isVariable(value) && config.variables) {\n                let missing = false;\n                let variables = config.variables;\n                for (const key2 of value.path){\n                    if (!Object.prototype.hasOwnProperty.call(variables, key2)) {\n                        missing = true;\n                        break;\n                    }\n                    variables = variables[key2];\n                }\n                if (missing) {\n                    errors.push({\n                        id: \"variable-undefined\",\n                        level: \"error\",\n                        message: `Undefined variable: '${value.path.join(\".\")}'`\n                    });\n                }\n            } else continue;\n        }\n        value = value;\n        if (type) {\n            const valid = validateType(type, value, config, key);\n            if (valid === false) {\n                errors.push({\n                    id: \"attribute-type-invalid\",\n                    level: errorLevel || \"error\",\n                    message: `Attribute '${key}' must be type of '${typeToString(type)}'`\n                });\n            }\n            if (Array.isArray(valid)) {\n                errors.push(...valid);\n            }\n        }\n        if (typeof matches === \"function\") matches = matches(config);\n        if (Array.isArray(matches) && !matches.includes(value)) errors.push({\n            id: \"attribute-value-invalid\",\n            level: errorLevel || \"error\",\n            message: `Attribute '${key}' must match one of ${displayMatches(matches, 8)}. Got '${value}' instead.`\n        });\n        if (matches instanceof RegExp && !matches.test(value)) errors.push({\n            id: \"attribute-value-invalid\",\n            level: errorLevel || \"error\",\n            message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`\n        });\n        if (typeof attrib.validate === \"function\") {\n            const attribErrors = attrib.validate(value, config, key);\n            if (Array.isArray(attribErrors)) errors.push(...attribErrors);\n        }\n    }\n    for (const [key, { required }] of Object.entries(attributes))if (required && node2.attributes[key] === void 0) errors.push({\n        id: \"attribute-missing-required\",\n        level: \"error\",\n        message: `Missing required attribute: '${key}'`\n    });\n    if (schema.slots) {\n        for (const [key, { required }] of Object.entries(schema.slots))if (required && node2.slots[key] === void 0) errors.push({\n            id: \"slot-missing-required\",\n            level: \"error\",\n            message: `Missing required slot: '${key}'`\n        });\n    }\n    for (const { type } of node2.children){\n        if (schema.children && type !== \"error\" && !schema.children.includes(type)) errors.push({\n            id: \"child-invalid\",\n            level: \"warning\",\n            message: `Can't nest '${type}' in '${node2.tag || node2.type}'`\n        });\n    }\n    if (schema.validate) {\n        const schemaErrors = schema.validate(node2, config);\n        if (isPromise(schemaErrors)) {\n            return schemaErrors.then((e)=>errors.concat(e));\n        }\n        errors.push(...schemaErrors);\n    }\n    return errors;\n}\nfunction* walkWithParents(node2, parents = []) {\n    yield [\n        node2,\n        parents\n    ];\n    for (const child of [\n        ...Object.values(node2.slots),\n        ...node2.children\n    ])yield* walkWithParents(child, [\n        ...parents,\n        node2\n    ]);\n}\nfunction validateTree(content, config) {\n    const output = [\n        ...walkWithParents(content)\n    ].map(([node2, parents])=>{\n        const { type, lines, location } = node2;\n        const updatedConfig = {\n            ...config,\n            validation: {\n                ...config.validation,\n                parents\n            }\n        };\n        const errors = validator(node2, updatedConfig);\n        if (isPromise(errors)) {\n            return errors.then((e)=>e.map((error2)=>({\n                        type,\n                        lines,\n                        location,\n                        error: error2\n                    })));\n        }\n        return errors.map((error2)=>({\n                type,\n                lines,\n                location,\n                error: error2\n            }));\n    });\n    if (output.some(isPromise)) {\n        return Promise.all(output).then((o)=>o.flat());\n    }\n    return output.flat();\n}\n// index.ts\nvar tokenizer = new Tokenizer();\nfunction mergeConfig(config = {}) {\n    return {\n        ...config,\n        tags: {\n            ...tags_default,\n            ...config.tags\n        },\n        nodes: {\n            ...schema_exports,\n            ...config.nodes\n        },\n        functions: {\n            ...functions_default,\n            ...config.functions\n        }\n    };\n}\nfunction parse3(content, args) {\n    if (typeof content === \"string\") content = tokenizer.tokenize(content);\n    return parser(content, args);\n}\nfunction resolve2(content, config) {\n    if (Array.isArray(content)) return content.flatMap((child)=>child.resolve(config));\n    return content.resolve(config);\n}\nfunction transform2(nodes, options) {\n    const config = mergeConfig(options);\n    const content = resolve2(nodes, config);\n    if (Array.isArray(content)) return content.flatMap((child)=>child.transform(config));\n    return content.transform(config);\n}\nfunction validate(content, options) {\n    const config = mergeConfig(options);\n    return validateTree(content, config);\n}\nfunction createElement(name, attributes = {}, ...children) {\n    return {\n        name,\n        attributes,\n        children\n    };\n}\nvar Markdoc = class {\n    constructor(config){\n        this.parse = parse3;\n        this.resolve = (content)=>resolve2(content, this.config);\n        this.transform = (content)=>transform2(content, this.config);\n        this.validate = (content)=>validate(content, this.config);\n        this.config = config;\n    }\n};\nMarkdoc.nodes = schema_exports;\nMarkdoc.tags = tags_default;\nMarkdoc.functions = functions_default;\nMarkdoc.globalAttributes = globalAttributes;\nMarkdoc.renderers = renderers_default;\nMarkdoc.transforms = transforms_default;\nMarkdoc.Ast = ast_default;\nMarkdoc.Tag = Tag;\nMarkdoc.Tokenizer = Tokenizer;\nMarkdoc.parseTags = parseTags;\nMarkdoc.transformer = transformer_default;\nMarkdoc.validator = validator;\nMarkdoc.parse = parse3;\nMarkdoc.transform = transform2;\nMarkdoc.validate = validate;\nMarkdoc.createElement = createElement;\nMarkdoc.truthy = truthy;\nMarkdoc.format = format;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@markdoc/markdoc/dist/index.mjs\n");

/***/ })

};
;