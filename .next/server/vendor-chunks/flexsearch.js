"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/flexsearch";
exports.ids = ["vendor-chunks/flexsearch"];
exports.modules = {

/***/ "(ssr)/./node_modules/flexsearch/dist/flexsearch.bundle.module.min.js":
/*!**********************************************************************!*\
  !*** ./node_modules/flexsearch/dist/flexsearch.bundle.module.min.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\r\n * FlexSearch.js v0.7.41 (Bundle.module)\r\n * Author and Copyright: Thomas Wilkerling\r\n * Licence: Apache-2.0\r\n * Hosted by Nextapps GmbH\r\n * https://github.com/nextapps-de/flexsearch\r\n */ var t;\nfunction u(a) {\n    return \"undefined\" !== typeof a ? a : !0;\n}\nfunction v(a) {\n    const b = Array(a);\n    for(let c = 0; c < a; c++)b[c] = x();\n    return b;\n}\nfunction x() {\n    return Object.create(null);\n}\nfunction aa(a, b) {\n    return b.length - a.length;\n}\nfunction C(a) {\n    return \"string\" === typeof a;\n}\nfunction D(a) {\n    return \"object\" === typeof a;\n}\nfunction E(a) {\n    return \"function\" === typeof a;\n}\n;\nfunction F(a, b) {\n    var c = ba;\n    if (a && (b && (a = G(a, b)), this.H && (a = G(a, this.H)), this.J && 1 < a.length && (a = G(a, this.J)), c || \"\" === c)) {\n        b = a.split(c);\n        if (this.filter) {\n            a = this.filter;\n            c = b.length;\n            const d = [];\n            for(let e = 0, f = 0; e < c; e++){\n                const h = b[e];\n                h && !a[h] && (d[f++] = h);\n            }\n            a = d;\n        } else a = b;\n        return a;\n    }\n    return a;\n}\nconst ba = /[\\p{Z}\\p{S}\\p{P}\\p{C}]+/u, ca = /[\\u0300-\\u036f]/g;\nfunction I(a, b) {\n    const c = Object.keys(a), d = c.length, e = [];\n    let f = \"\", h = 0;\n    for(let g = 0, k, m; g < d; g++)k = c[g], (m = a[k]) ? (e[h++] = J(b ? \"(?!\\\\b)\" + k + \"(\\\\b|_)\" : k), e[h++] = m) : f += (f ? \"|\" : \"\") + k;\n    f && (e[h++] = J(b ? \"(?!\\\\b)(\" + f + \")(\\\\b|_)\" : \"(\" + f + \")\"), e[h] = \"\");\n    return e;\n}\nfunction G(a, b) {\n    for(let c = 0, d = b.length; c < d && (a = a.replace(b[c], b[c + 1]), a); c += 2);\n    return a;\n}\nfunction J(a) {\n    return new RegExp(a, \"g\");\n}\nfunction da(a) {\n    let b = \"\", c = \"\";\n    for(let d = 0, e = a.length, f; d < e; d++)(f = a[d]) !== c && (b += c = f);\n    return b;\n}\n;\nvar fa = {\n    encode: ea,\n    F: !1,\n    G: \"\"\n};\nfunction ea(a) {\n    return F.call(this, (\"\" + a).toLowerCase(), !1);\n}\n;\nconst ha = {}, K = {};\nfunction ia(a) {\n    L(a, \"add\");\n    L(a, \"append\");\n    L(a, \"search\");\n    L(a, \"update\");\n    L(a, \"remove\");\n}\nfunction L(a, b) {\n    a[b + \"Async\"] = function() {\n        const c = this, d = arguments;\n        var e = d[d.length - 1];\n        let f;\n        E(e) && (f = e, delete d[d.length - 1]);\n        e = new Promise(function(h) {\n            setTimeout(function() {\n                c.async = !0;\n                const g = c[b].apply(c, d);\n                c.async = !1;\n                h(g);\n            });\n        });\n        return f ? (e.then(f), this) : e;\n    };\n}\n;\nfunction ja(a, b, c, d) {\n    const e = a.length;\n    let f = [], h, g, k = 0;\n    d && (d = []);\n    for(let m = e - 1; 0 <= m; m--){\n        const n = a[m], w = n.length, q = x();\n        let r = !h;\n        for(let l = 0; l < w; l++){\n            const p = n[l], A = p.length;\n            if (A) for(let B = 0, z, y; B < A; B++)if (y = p[B], h) {\n                if (h[y]) {\n                    if (!m) {\n                        if (c) c--;\n                        else if (f[k++] = y, k === b) return f;\n                    }\n                    if (m || d) q[y] = 1;\n                    r = !0;\n                }\n                if (d && (z = (g[y] || 0) + 1, g[y] = z, z < e)) {\n                    const H = d[z - 2] || (d[z - 2] = []);\n                    H[H.length] = y;\n                }\n            } else q[y] = 1;\n        }\n        if (d) h || (g = q);\n        else if (!r) return [];\n        h = q;\n    }\n    if (d) for(let m = d.length - 1, n, w; 0 <= m; m--){\n        n = d[m];\n        w = n.length;\n        for(let q = 0, r; q < w; q++)if (r = n[q], !h[r]) {\n            if (c) c--;\n            else if (f[k++] = r, k === b) return f;\n            h[r] = 1;\n        }\n    }\n    return f;\n}\nfunction ka(a, b) {\n    const c = x(), d = x(), e = [];\n    for(let f = 0; f < a.length; f++)c[a[f]] = 1;\n    for(let f = 0, h; f < b.length; f++){\n        h = b[f];\n        for(let g = 0, k; g < h.length; g++)k = h[g], c[k] && !d[k] && (d[k] = 1, e[e.length] = k);\n    }\n    return e;\n}\n;\nfunction M(a) {\n    this.l = !0 !== a && a;\n    this.cache = x();\n    this.h = [];\n}\nfunction la(a, b, c) {\n    D(a) && (a = a.query);\n    let d = this.cache.get(a);\n    d || (d = this.search(a, b, c), this.cache.set(a, d));\n    return d;\n}\nM.prototype.set = function(a, b) {\n    if (!this.cache[a]) {\n        var c = this.h.length;\n        c === this.l ? delete this.cache[this.h[c - 1]] : c++;\n        for(--c; 0 < c; c--)this.h[c] = this.h[c - 1];\n        this.h[0] = a;\n    }\n    this.cache[a] = b;\n};\nM.prototype.get = function(a) {\n    const b = this.cache[a];\n    if (this.l && b && (a = this.h.indexOf(a))) {\n        const c = this.h[a - 1];\n        this.h[a - 1] = this.h[a];\n        this.h[a] = c;\n    }\n    return b;\n};\nconst na = {\n    memory: {\n        charset: \"latin:extra\",\n        D: 3,\n        B: 4,\n        m: !1\n    },\n    performance: {\n        D: 3,\n        B: 3,\n        s: !1,\n        context: {\n            depth: 2,\n            D: 1\n        }\n    },\n    match: {\n        charset: \"latin:extra\",\n        G: \"reverse\"\n    },\n    score: {\n        charset: \"latin:advanced\",\n        D: 20,\n        B: 3,\n        context: {\n            depth: 3,\n            D: 9\n        }\n    },\n    \"default\": {}\n};\nfunction oa(a, b, c, d, e, f, h, g) {\n    setTimeout(function() {\n        const k = a(c ? c + \".\" + d : d, JSON.stringify(h));\n        k && k.then ? k.then(function() {\n            b.export(a, b, c, e, f + 1, g);\n        }) : b.export(a, b, c, e, f + 1, g);\n    });\n}\n;\nfunction N(a, b) {\n    if (!(this instanceof N)) return new N(a);\n    var c;\n    if (a) {\n        C(a) ? a = na[a] : (c = a.preset) && (a = Object.assign({}, c[c], a));\n        c = a.charset;\n        var d = a.lang;\n        C(c) && (-1 === c.indexOf(\":\") && (c += \":default\"), c = K[c]);\n        C(d) && (d = ha[d]);\n    } else a = {};\n    let e, f, h = a.context || {};\n    this.encode = a.encode || c && c.encode || ea;\n    this.register = b || x();\n    this.D = e = a.resolution || 9;\n    this.G = b = c && c.G || a.tokenize || \"strict\";\n    this.depth = \"strict\" === b && h.depth;\n    this.l = u(h.bidirectional);\n    this.s = f = u(a.optimize);\n    this.m = u(a.fastupdate);\n    this.B = a.minlength || 1;\n    this.C = a.boost;\n    this.map = f ? v(e) : x();\n    this.A = e = h.resolution || 1;\n    this.h = f ? v(e) : x();\n    this.F = c && c.F || a.rtl;\n    this.H = (b = a.matcher || d && d.H) && I(b, !1);\n    this.J = (b = a.stemmer || d && d.J) && I(b, !0);\n    if (c = b = a.filter || d && d.filter) {\n        c = b;\n        d = x();\n        for(let g = 0, k = c.length; g < k; g++)d[c[g]] = 1;\n        c = d;\n    }\n    this.filter = c;\n    this.cache = (b = a.cache) && new M(b);\n}\nt = N.prototype;\nt.append = function(a, b) {\n    return this.add(a, b, !0);\n};\nt.add = function(a, b, c, d) {\n    if (b && (a || 0 === a)) {\n        if (!d && !c && this.register[a]) return this.update(a, b);\n        b = this.encode(b);\n        if (d = b.length) {\n            const m = x(), n = x(), w = this.depth, q = this.D;\n            for(let r = 0; r < d; r++){\n                let l = b[this.F ? d - 1 - r : r];\n                var e = l.length;\n                if (l && e >= this.B && (w || !n[l])) {\n                    var f = O(q, d, r), h = \"\";\n                    switch(this.G){\n                        case \"full\":\n                            if (2 < e) {\n                                for(f = 0; f < e; f++)for(var g = e; g > f; g--)if (g - f >= this.B) {\n                                    var k = O(q, d, r, e, f);\n                                    h = l.substring(f, g);\n                                    P(this, n, h, k, a, c);\n                                }\n                                break;\n                            }\n                        case \"reverse\":\n                            if (1 < e) {\n                                for(g = e - 1; 0 < g; g--)h = l[g] + h, h.length >= this.B && P(this, n, h, O(q, d, r, e, g), a, c);\n                                h = \"\";\n                            }\n                        case \"forward\":\n                            if (1 < e) {\n                                for(g = 0; g < e; g++)h += l[g], h.length >= this.B && P(this, n, h, f, a, c);\n                                break;\n                            }\n                        default:\n                            if (this.C && (f = Math.min(f / this.C(b, l, r) | 0, q - 1)), P(this, n, l, f, a, c), w && 1 < d && r < d - 1) {\n                                for(e = x(), h = this.A, f = l, g = Math.min(w + 1, d - r), e[f] = 1, k = 1; k < g; k++)if ((l = b[this.F ? d - 1 - r - k : r + k]) && l.length >= this.B && !e[l]) {\n                                    e[l] = 1;\n                                    const p = this.l && l > f;\n                                    P(this, m, p ? f : l, O(h + (d / 2 > h ? 0 : 1), d, r, g - 1, k - 1), a, c, p ? l : f);\n                                }\n                            }\n                    }\n                }\n            }\n            this.m || (this.register[a] = 1);\n        }\n    }\n    return this;\n};\nfunction O(a, b, c, d, e) {\n    return c && 1 < a ? b + (d || 0) <= a ? c + (e || 0) : (a - 1) / (b + (d || 0)) * (c + (e || 0)) + 1 | 0 : 0;\n}\nfunction P(a, b, c, d, e, f, h) {\n    let g = h ? a.h : a.map;\n    if (!b[c] || h && !b[c][h]) a.s && (g = g[d]), h ? (b = b[c] || (b[c] = x()), b[h] = 1, g = g[h] || (g[h] = x())) : b[c] = 1, g = g[c] || (g[c] = []), a.s || (g = g[d] || (g[d] = [])), f && g.includes(e) || (g[g.length] = e, a.m && (a = a.register[e] || (a.register[e] = []), a[a.length] = g));\n}\nt.search = function(a, b, c) {\n    c || (!b && D(a) ? (c = a, a = c.query) : D(b) && (c = b));\n    let d = [], e;\n    let f, h = 0;\n    if (c) {\n        a = c.query || a;\n        b = c.limit;\n        h = c.offset || 0;\n        var g = c.context;\n        f = c.suggest;\n    }\n    if (a && (a = this.encode(\"\" + a), e = a.length, 1 < e)) {\n        c = x();\n        var k = [];\n        for(let n = 0, w = 0, q; n < e; n++)if ((q = a[n]) && q.length >= this.B && !c[q]) if (this.s || f || this.map[q]) k[w++] = q, c[q] = 1;\n        else return d;\n        a = k;\n        e = a.length;\n    }\n    if (!e) return d;\n    b || (b = 100);\n    g = this.depth && 1 < e && !1 !== g;\n    c = 0;\n    let m;\n    g ? (m = a[0], c = 1) : 1 < e && a.sort(aa);\n    for(let n, w; c < e; c++){\n        w = a[c];\n        g ? (n = pa(this, d, f, b, h, 2 === e, w, m), f && !1 === n && d.length || (m = w)) : n = pa(this, d, f, b, h, 1 === e, w);\n        if (n) return n;\n        if (f && c === e - 1) {\n            k = d.length;\n            if (!k) {\n                if (g) {\n                    g = 0;\n                    c = -1;\n                    continue;\n                }\n                return d;\n            }\n            if (1 === k) return qa(d[0], b, h);\n        }\n    }\n    return ja(d, b, h, f);\n};\nfunction pa(a, b, c, d, e, f, h, g) {\n    let k = [], m = g ? a.h : a.map;\n    a.s || (m = ra(m, h, g, a.l));\n    if (m) {\n        let n = 0;\n        const w = Math.min(m.length, g ? a.A : a.D);\n        for(let q = 0, r = 0, l, p; q < w; q++)if (l = m[q]) {\n            if (a.s && (l = ra(l, h, g, a.l)), e && l && f && (p = l.length, p <= e ? (e -= p, l = null) : (l = l.slice(e), e = 0)), l && (k[n++] = l, f && (r += l.length, r >= d))) break;\n        }\n        if (n) {\n            if (f) return qa(k, d, 0);\n            b[b.length] = k;\n            return;\n        }\n    }\n    return !c && k;\n}\nfunction qa(a, b, c) {\n    a = 1 === a.length ? a[0] : [].concat.apply([], a);\n    return c || a.length > b ? a.slice(c, c + b) : a;\n}\nfunction ra(a, b, c, d) {\n    c ? (d = d && b > c, a = (a = a[d ? b : c]) && a[d ? c : b]) : a = a[b];\n    return a;\n}\nt.contain = function(a) {\n    return !!this.register[a];\n};\nt.update = function(a, b) {\n    return this.remove(a).add(a, b);\n};\nt.remove = function(a, b) {\n    const c = this.register[a];\n    if (c) {\n        if (this.m) for(let d = 0, e; d < c.length; d++)e = c[d], e.splice(e.indexOf(a), 1);\n        else Q(this.map, a, this.D, this.s), this.depth && Q(this.h, a, this.A, this.s);\n        b || delete this.register[a];\n        if (this.cache) {\n            b = this.cache;\n            for(let d = 0, e, f; d < b.h.length; d++)f = b.h[d], e = b.cache[f], e.includes(a) && (b.h.splice(d--, 1), delete b.cache[f]);\n        }\n    }\n    return this;\n};\nfunction Q(a, b, c, d, e) {\n    let f = 0;\n    if (a.constructor === Array) if (e) b = a.indexOf(b), -1 !== b ? 1 < a.length && (a.splice(b, 1), f++) : f++;\n    else {\n        e = Math.min(a.length, c);\n        for(let h = 0, g; h < e; h++)if (g = a[h]) f = Q(g, b, c, d, e), d || f || delete a[h];\n    }\n    else for(let h in a)(f = Q(a[h], b, c, d, e)) || delete a[h];\n    return f;\n}\nt.searchCache = la;\nt.export = function(a, b, c, d, e, f) {\n    let h = !0;\n    \"undefined\" === typeof f && (h = new Promise((m)=>{\n        f = m;\n    }));\n    let g, k;\n    switch(e || (e = 0)){\n        case 0:\n            g = \"reg\";\n            if (this.m) {\n                k = x();\n                for(let m in this.register)k[m] = 1;\n            } else k = this.register;\n            break;\n        case 1:\n            g = \"cfg\";\n            k = {\n                doc: 0,\n                opt: this.s ? 1 : 0\n            };\n            break;\n        case 2:\n            g = \"map\";\n            k = this.map;\n            break;\n        case 3:\n            g = \"ctx\";\n            k = this.h;\n            break;\n        default:\n            \"undefined\" === typeof c && f && f();\n            return;\n    }\n    oa(a, b || this, c, g, d, e, k, f);\n    return h;\n};\nt.import = function(a, b) {\n    if (b) switch(C(b) && (b = JSON.parse(b)), a){\n        case \"cfg\":\n            this.s = !!b.opt;\n            break;\n        case \"reg\":\n            this.m = !1;\n            this.register = b;\n            break;\n        case \"map\":\n            this.map = b;\n            break;\n        case \"ctx\":\n            this.h = b;\n    }\n};\nia(N.prototype);\nfunction sa(a) {\n    a = a.data;\n    var b = self._index;\n    const c = a.args;\n    var d = a.task;\n    switch(d){\n        case \"init\":\n            d = a.options || {};\n            a = a.factory;\n            b = d.encode;\n            d.cache = !1;\n            b && 0 === b.indexOf(\"function\") && (d.encode = Function(\"return \" + b)());\n            a ? (Function(\"return \" + a)()(self), self._index = new self.FlexSearch.Index(d), delete self.FlexSearch) : self._index = new N(d);\n            break;\n        default:\n            a = a.id, b = b[d].apply(b, c), postMessage(\"search\" === d ? {\n                id: a,\n                msg: b\n            } : {\n                id: a\n            });\n    }\n}\n;\nlet ta = 0;\nfunction S(a) {\n    if (!(this instanceof S)) return new S(a);\n    var b;\n    a ? E(b = a.encode) && (a.encode = b.toString()) : a = {};\n    (b = (self || window)._factory) && (b = b.toString());\n    const c =  true && self.exports, d = this;\n    this.o = ua(b, c, a.worker);\n    this.h = x();\n    if (this.o) {\n        if (c) this.o.on(\"message\", function(e) {\n            d.h[e.id](e.msg);\n            delete d.h[e.id];\n        });\n        else this.o.onmessage = function(e) {\n            e = e.data;\n            d.h[e.id](e.msg);\n            delete d.h[e.id];\n        };\n        this.o.postMessage({\n            task: \"init\",\n            factory: b,\n            options: a\n        });\n    }\n}\nT(\"add\");\nT(\"append\");\nT(\"search\");\nT(\"update\");\nT(\"remove\");\nfunction T(a) {\n    S.prototype[a] = S.prototype[a + \"Async\"] = function() {\n        const b = this, c = [].slice.call(arguments);\n        var d = c[c.length - 1];\n        let e;\n        E(d) && (e = d, c.splice(c.length - 1, 1));\n        d = new Promise(function(f) {\n            setTimeout(function() {\n                b.h[++ta] = f;\n                b.o.postMessage({\n                    task: a,\n                    id: ta,\n                    args: c\n                });\n            });\n        });\n        return e ? (d.then(e), this) : d;\n    };\n}\nfunction ua(a, b, c) {\n    let d;\n    try {\n        d = b ? new (__webpack_require__(/*! worker_threads */ \"worker_threads\").Worker)(__dirname + \"/node/node.js\") : a ? new Worker(URL.createObjectURL(new Blob([\n            \"onmessage=\" + sa.toString()\n        ], {\n            type: \"text/javascript\"\n        }))) : new Worker(C(c) ? c : \"worker/worker.js\", {\n            type: \"module\"\n        });\n    } catch (e) {}\n    return d;\n}\n;\nfunction U(a) {\n    if (!(this instanceof U)) return new U(a);\n    var b = a.document || a.doc || a, c;\n    this.K = [];\n    this.h = [];\n    this.A = [];\n    this.register = x();\n    this.key = (c = b.key || b.id) && V(c, this.A) || \"id\";\n    this.m = u(a.fastupdate);\n    this.C = (c = b.store) && !0 !== c && [];\n    this.store = c && x();\n    this.I = (c = b.tag) && V(c, this.A);\n    this.l = c && x();\n    this.cache = (c = a.cache) && new M(c);\n    a.cache = !1;\n    this.o = a.worker;\n    this.async = !1;\n    c = x();\n    let d = b.index || b.field || b;\n    C(d) && (d = [\n        d\n    ]);\n    for(let e = 0, f, h; e < d.length; e++)f = d[e], C(f) || (h = f, f = f.field), h = D(h) ? Object.assign({}, a, h) : a, this.o && (c[f] = new S(h), c[f].o || (this.o = !1)), this.o || (c[f] = new N(h, this.register)), this.K[e] = V(f, this.A), this.h[e] = f;\n    if (this.C) for(a = b.store, C(a) && (a = [\n        a\n    ]), b = 0; b < a.length; b++)this.C[b] = V(a[b], this.A);\n    this.index = c;\n}\nfunction V(a, b) {\n    const c = a.split(\":\");\n    let d = 0;\n    for(let e = 0; e < c.length; e++)a = c[e], 0 <= a.indexOf(\"[]\") && (a = a.substring(0, a.length - 2)) && (b[d] = !0), a && (c[d++] = a);\n    d < c.length && (c.length = d);\n    return 1 < d ? c : c[0];\n}\nfunction X(a, b) {\n    if (C(b)) a = a[b];\n    else for(let c = 0; a && c < b.length; c++)a = a[b[c]];\n    return a;\n}\nfunction Y(a, b, c, d, e) {\n    a = a[e];\n    if (d === c.length - 1) b[e] = a;\n    else if (a) if (a.constructor === Array) for(b = b[e] = Array(a.length), e = 0; e < a.length; e++)Y(a, b, c, d, e);\n    else b = b[e] || (b[e] = x()), e = c[++d], Y(a, b, c, d, e);\n}\nfunction Z(a, b, c, d, e, f, h, g) {\n    if (a = a[h]) if (d === b.length - 1) {\n        if (a.constructor === Array) {\n            if (c[d]) {\n                for(b = 0; b < a.length; b++)e.add(f, a[b], !0, !0);\n                return;\n            }\n            a = a.join(\" \");\n        }\n        e.add(f, a, g, !0);\n    } else if (a.constructor === Array) for(h = 0; h < a.length; h++)Z(a, b, c, d, e, f, h, g);\n    else h = b[++d], Z(a, b, c, d, e, f, h, g);\n}\nt = U.prototype;\nt.add = function(a, b, c) {\n    D(a) && (b = a, a = X(b, this.key));\n    if (b && (a || 0 === a)) {\n        if (!c && this.register[a]) return this.update(a, b);\n        for(let d = 0, e, f; d < this.h.length; d++)f = this.h[d], e = this.K[d], C(e) && (e = [\n            e\n        ]), Z(b, e, this.A, 0, this.index[f], a, e[0], c);\n        if (this.I) {\n            let d = X(b, this.I), e = x();\n            C(d) && (d = [\n                d\n            ]);\n            for(let f = 0, h, g; f < d.length; f++)if (h = d[f], !e[h] && (e[h] = 1, g = this.l[h] || (this.l[h] = []), !c || !g.includes(a))) {\n                if (g[g.length] = a, this.m) {\n                    const k = this.register[a] || (this.register[a] = []);\n                    k[k.length] = g;\n                }\n            }\n        }\n        if (this.store && (!c || !this.store[a])) {\n            let d;\n            if (this.C) {\n                d = x();\n                for(let e = 0, f; e < this.C.length; e++)f = this.C[e], C(f) ? d[f] = b[f] : Y(b, d, f, 0, f[0]);\n            }\n            this.store[a] = d || b;\n        }\n    }\n    return this;\n};\nt.append = function(a, b) {\n    return this.add(a, b, !0);\n};\nt.update = function(a, b) {\n    return this.remove(a).add(a, b);\n};\nt.remove = function(a) {\n    D(a) && (a = X(a, this.key));\n    if (this.register[a]) {\n        for(var b = 0; b < this.h.length && (this.index[this.h[b]].remove(a, !this.o), !this.m); b++);\n        if (this.I && !this.m) for(let c in this.l){\n            b = this.l[c];\n            const d = b.indexOf(a);\n            -1 !== d && (1 < b.length ? b.splice(d, 1) : delete this.l[c]);\n        }\n        this.store && delete this.store[a];\n        delete this.register[a];\n    }\n    return this;\n};\nt.search = function(a, b, c, d) {\n    c || (!b && D(a) ? (c = a, a = \"\") : D(b) && (c = b, b = 0));\n    let e = [], f = [], h, g, k, m, n, w, q = 0;\n    if (c) if (c.constructor === Array) k = c, c = null;\n    else {\n        a = c.query || a;\n        k = (h = c.pluck) || c.index || c.field;\n        m = c.tag;\n        g = this.store && c.enrich;\n        n = \"and\" === c.bool;\n        b = c.limit || b || 100;\n        w = c.offset || 0;\n        if (m && (C(m) && (m = [\n            m\n        ]), !a)) {\n            for(let l = 0, p; l < m.length; l++)if (p = va.call(this, m[l], b, w, g)) e[e.length] = p, q++;\n            return q ? e : [];\n        }\n        C(k) && (k = [\n            k\n        ]);\n    }\n    k || (k = this.h);\n    n = n && (1 < k.length || m && 1 < m.length);\n    const r = !d && (this.o || this.async) && [];\n    for(let l = 0, p, A, B; l < k.length; l++){\n        let z;\n        A = k[l];\n        C(A) || (z = A, A = z.field, a = z.query || a, b = z.limit || b, g = z.enrich || g);\n        if (r) r[l] = this.index[A].searchAsync(a, b, z || c);\n        else {\n            d ? p = d[l] : p = this.index[A].search(a, b, z || c);\n            B = p && p.length;\n            if (m && B) {\n                const y = [];\n                let H = 0;\n                n && (y[0] = [\n                    p\n                ]);\n                for(let W = 0, ma, R; W < m.length; W++)if (ma = m[W], B = (R = this.l[ma]) && R.length) H++, y[y.length] = n ? [\n                    R\n                ] : R;\n                H && (p = n ? ja(y, b || 100, w || 0) : ka(p, y), B = p.length);\n            }\n            if (B) f[q] = A, e[q++] = p;\n            else if (n) return [];\n        }\n    }\n    if (r) {\n        const l = this;\n        return new Promise(function(p) {\n            Promise.all(r).then(function(A) {\n                p(l.search(a, b, c, A));\n            });\n        });\n    }\n    if (!q) return [];\n    if (h && (!g || !this.store)) return e[0];\n    for(let l = 0, p; l < f.length; l++){\n        p = e[l];\n        p.length && g && (p = wa.call(this, p));\n        if (h) return p;\n        e[l] = {\n            field: f[l],\n            result: p\n        };\n    }\n    return e;\n};\nfunction va(a, b, c, d) {\n    let e = this.l[a], f = e && e.length - c;\n    if (f && 0 < f) {\n        if (f > b || c) e = e.slice(c, c + b);\n        d && (e = wa.call(this, e));\n        return {\n            tag: a,\n            result: e\n        };\n    }\n}\nfunction wa(a) {\n    const b = Array(a.length);\n    for(let c = 0, d; c < a.length; c++)d = a[c], b[c] = {\n        id: d,\n        doc: this.store[d]\n    };\n    return b;\n}\nt.contain = function(a) {\n    return !!this.register[a];\n};\nt.get = function(a) {\n    return this.store[a];\n};\nt.set = function(a, b) {\n    this.store[a] = b;\n    return this;\n};\nt.searchCache = la;\nt.export = function(a, b, c, d, e, f) {\n    let h;\n    \"undefined\" === typeof f && (h = new Promise((g)=>{\n        f = g;\n    }));\n    e || (e = 0);\n    d || (d = 0);\n    if (d < this.h.length) {\n        const g = this.h[d], k = this.index[g];\n        b = this;\n        setTimeout(function() {\n            k.export(a, b, e ? g : \"\", d, e++, f) || (d++, e = 1, b.export(a, b, g, d, e, f));\n        });\n    } else {\n        let g, k;\n        switch(e){\n            case 1:\n                g = \"tag\";\n                k = this.l;\n                c = null;\n                break;\n            case 2:\n                g = \"store\";\n                k = this.store;\n                c = null;\n                break;\n            default:\n                f();\n                return;\n        }\n        oa(a, this, c, g, d, e, k, f);\n    }\n    return h;\n};\nt.import = function(a, b) {\n    if (b) switch(C(b) && (b = JSON.parse(b)), a){\n        case \"tag\":\n            this.l = b;\n            break;\n        case \"reg\":\n            this.m = !1;\n            this.register = b;\n            for(let d = 0, e; d < this.h.length; d++)e = this.index[this.h[d]], e.register = b, e.m = !1;\n            break;\n        case \"store\":\n            this.store = b;\n            break;\n        default:\n            a = a.split(\".\");\n            const c = a[0];\n            a = a[1];\n            c && a && this.index[c].import(a, b);\n    }\n};\nia(U.prototype);\nvar ya = {\n    encode: xa,\n    F: !1,\n    G: \"\"\n};\nconst za = [\n    J(\"[\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5]\"),\n    \"a\",\n    J(\"[\\xe8\\xe9\\xea\\xeb]\"),\n    \"e\",\n    J(\"[\\xec\\xed\\xee\\xef]\"),\n    \"i\",\n    J(\"[\\xf2\\xf3\\xf4\\xf5\\xf6ő]\"),\n    \"o\",\n    J(\"[\\xf9\\xfa\\xfb\\xfcű]\"),\n    \"u\",\n    J(\"[\\xfdŷ\\xff]\"),\n    \"y\",\n    J(\"\\xf1\"),\n    \"n\",\n    J(\"[\\xe7c]\"),\n    \"k\",\n    J(\"\\xdf\"),\n    \"s\",\n    J(\" & \"),\n    \" and \"\n];\nfunction xa(a) {\n    var b = a = \"\" + a;\n    b.normalize && (b = b.normalize(\"NFD\").replace(ca, \"\"));\n    return F.call(this, b.toLowerCase(), !a.normalize && za);\n}\n;\nvar Ba = {\n    encode: Aa,\n    F: !1,\n    G: \"strict\"\n};\nconst Ca = /[^a-z0-9]+/, Da = {\n    b: \"p\",\n    v: \"f\",\n    w: \"f\",\n    z: \"s\",\n    x: \"s\",\n    \"\\xdf\": \"s\",\n    d: \"t\",\n    n: \"m\",\n    c: \"k\",\n    g: \"k\",\n    j: \"k\",\n    q: \"k\",\n    i: \"e\",\n    y: \"e\",\n    u: \"o\"\n};\nfunction Aa(a) {\n    a = xa.call(this, a).join(\" \");\n    const b = [];\n    if (a) {\n        const c = a.split(Ca), d = c.length;\n        for(let e = 0, f, h = 0; e < d; e++)if ((a = c[e]) && (!this.filter || !this.filter[a])) {\n            f = a[0];\n            let g = Da[f] || f, k = g;\n            for(let m = 1; m < a.length; m++){\n                f = a[m];\n                const n = Da[f] || f;\n                n && n !== k && (g += n, k = n);\n            }\n            b[h++] = g;\n        }\n    }\n    return b;\n}\n;\nvar Fa = {\n    encode: Ea,\n    F: !1,\n    G: \"\"\n};\nconst Ga = [\n    J(\"ae\"),\n    \"a\",\n    J(\"oe\"),\n    \"o\",\n    J(\"sh\"),\n    \"s\",\n    J(\"th\"),\n    \"t\",\n    J(\"ph\"),\n    \"f\",\n    J(\"pf\"),\n    \"f\",\n    J(\"(?![aeo])h(?![aeo])\"),\n    \"\",\n    J(\"(?!^[aeo])h(?!^[aeo])\"),\n    \"\"\n];\nfunction Ea(a, b) {\n    a && (a = Aa.call(this, a).join(\" \"), 2 < a.length && (a = G(a, Ga)), b || (1 < a.length && (a = da(a)), a && (a = a.split(\" \"))));\n    return a || [];\n}\n;\nvar Ia = {\n    encode: Ha,\n    F: !1,\n    G: \"\"\n};\nconst Ja = J(\"(?!\\\\b)[aeo]\");\nfunction Ha(a) {\n    a && (a = Ea.call(this, a, !0), 1 < a.length && (a = a.replace(Ja, \"\")), 1 < a.length && (a = da(a)), a && (a = a.split(\" \")));\n    return a || [];\n}\n;\nK[\"latin:default\"] = fa;\nK[\"latin:simple\"] = ya;\nK[\"latin:balance\"] = Ba;\nK[\"latin:advanced\"] = Fa;\nK[\"latin:extra\"] = Ia;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    Index: N,\n    Document: U,\n    Worker: S,\n    registerCharset: function(a, b) {\n        K[a] = b;\n    },\n    registerLanguage: function(a, b) {\n        ha[a] = b;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/flexsearch/dist/flexsearch.bundle.module.min.js\n");

/***/ })

};
;