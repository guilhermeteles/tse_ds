"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-yaml";
exports.ids = ["vendor-chunks/js-yaml"];
exports.modules = {

/***/ "(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs":
/*!***********************************************!*\
  !*** ./node_modules/js-yaml/dist/js-yaml.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_SCHEMA: () => (/* binding */ CORE_SCHEMA),\n/* harmony export */   DEFAULT_SCHEMA: () => (/* binding */ DEFAULT_SCHEMA),\n/* harmony export */   FAILSAFE_SCHEMA: () => (/* binding */ FAILSAFE_SCHEMA),\n/* harmony export */   JSON_SCHEMA: () => (/* binding */ JSON_SCHEMA),\n/* harmony export */   Schema: () => (/* binding */ Schema),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   YAMLException: () => (/* binding */ YAMLException),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   dump: () => (/* binding */ dump),\n/* harmony export */   load: () => (/* binding */ load),\n/* harmony export */   loadAll: () => (/* binding */ loadAll),\n/* harmony export */   safeDump: () => (/* binding */ safeDump),\n/* harmony export */   safeLoad: () => (/* binding */ safeLoad),\n/* harmony export */   safeLoadAll: () => (/* binding */ safeLoadAll),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */ function isNothing(subject) {\n    return typeof subject === \"undefined\" || subject === null;\n}\nfunction isObject(subject) {\n    return typeof subject === \"object\" && subject !== null;\n}\nfunction toArray(sequence) {\n    if (Array.isArray(sequence)) return sequence;\n    else if (isNothing(sequence)) return [];\n    return [\n        sequence\n    ];\n}\nfunction extend(target, source) {\n    var index, length, key, sourceKeys;\n    if (source) {\n        sourceKeys = Object.keys(source);\n        for(index = 0, length = sourceKeys.length; index < length; index += 1){\n            key = sourceKeys[index];\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction repeat(string, count) {\n    var result = \"\", cycle;\n    for(cycle = 0; cycle < count; cycle += 1){\n        result += string;\n    }\n    return result;\n}\nfunction isNegativeZero(number) {\n    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\nvar isNothing_1 = isNothing;\nvar isObject_1 = isObject;\nvar toArray_1 = toArray;\nvar repeat_1 = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1 = extend;\nvar common = {\n    isNothing: isNothing_1,\n    isObject: isObject_1,\n    toArray: toArray_1,\n    repeat: repeat_1,\n    isNegativeZero: isNegativeZero_1,\n    extend: extend_1\n};\n// YAML error class. http://stackoverflow.com/questions/8458984\nfunction formatError(exception, compact) {\n    var where = \"\", message = exception.reason || \"(unknown reason)\";\n    if (!exception.mark) return message;\n    if (exception.mark.name) {\n        where += 'in \"' + exception.mark.name + '\" ';\n    }\n    where += \"(\" + (exception.mark.line + 1) + \":\" + (exception.mark.column + 1) + \")\";\n    if (!compact && exception.mark.snippet) {\n        where += \"\\n\\n\" + exception.mark.snippet;\n    }\n    return message + \" \" + where;\n}\nfunction YAMLException$1(reason, mark) {\n    // Super constructor\n    Error.call(this);\n    this.name = \"YAMLException\";\n    this.reason = reason;\n    this.mark = mark;\n    this.message = formatError(this, false);\n    // Include stack trace in error object\n    if (Error.captureStackTrace) {\n        // Chrome and NodeJS\n        Error.captureStackTrace(this, this.constructor);\n    } else {\n        // FF, IE 10+ and Safari 6+. Fallback for others\n        this.stack = new Error().stack || \"\";\n    }\n}\n// Inherit from Error\nYAMLException$1.prototype = Object.create(Error.prototype);\nYAMLException$1.prototype.constructor = YAMLException$1;\nYAMLException$1.prototype.toString = function toString(compact) {\n    return this.name + \": \" + formatError(this, compact);\n};\nvar exception = YAMLException$1;\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n    var head = \"\";\n    var tail = \"\";\n    var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n    if (position - lineStart > maxHalfLength) {\n        head = \" ... \";\n        lineStart = position - maxHalfLength + head.length;\n    }\n    if (lineEnd - position > maxHalfLength) {\n        tail = \" ...\";\n        lineEnd = position + maxHalfLength - tail.length;\n    }\n    return {\n        str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, \"→\") + tail,\n        pos: position - lineStart + head.length // relative position\n    };\n}\nfunction padStart(string, max) {\n    return common.repeat(\" \", max - string.length) + string;\n}\nfunction makeSnippet(mark, options) {\n    options = Object.create(options || null);\n    if (!mark.buffer) return null;\n    if (!options.maxLength) options.maxLength = 79;\n    if (typeof options.indent !== \"number\") options.indent = 1;\n    if (typeof options.linesBefore !== \"number\") options.linesBefore = 3;\n    if (typeof options.linesAfter !== \"number\") options.linesAfter = 2;\n    var re = /\\r?\\n|\\r|\\0/g;\n    var lineStarts = [\n        0\n    ];\n    var lineEnds = [];\n    var match;\n    var foundLineNo = -1;\n    while(match = re.exec(mark.buffer)){\n        lineEnds.push(match.index);\n        lineStarts.push(match.index + match[0].length);\n        if (mark.position <= match.index && foundLineNo < 0) {\n            foundLineNo = lineStarts.length - 2;\n        }\n    }\n    if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n    var result = \"\", i, line;\n    var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n    var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n    for(i = 1; i <= options.linesBefore; i++){\n        if (foundLineNo - i < 0) break;\n        line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);\n        result = common.repeat(\" \", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + \" | \" + line.str + \"\\n\" + result;\n    }\n    line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n    result += common.repeat(\" \", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + \" | \" + line.str + \"\\n\";\n    result += common.repeat(\"-\", options.indent + lineNoLength + 3 + line.pos) + \"^\" + \"\\n\";\n    for(i = 1; i <= options.linesAfter; i++){\n        if (foundLineNo + i >= lineEnds.length) break;\n        line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);\n        result += common.repeat(\" \", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + \" | \" + line.str + \"\\n\";\n    }\n    return result.replace(/\\n$/, \"\");\n}\nvar snippet = makeSnippet;\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n    \"kind\",\n    \"multi\",\n    \"resolve\",\n    \"construct\",\n    \"instanceOf\",\n    \"predicate\",\n    \"represent\",\n    \"representName\",\n    \"defaultStyle\",\n    \"styleAliases\"\n];\nvar YAML_NODE_KINDS = [\n    \"scalar\",\n    \"sequence\",\n    \"mapping\"\n];\nfunction compileStyleAliases(map) {\n    var result = {};\n    if (map !== null) {\n        Object.keys(map).forEach(function(style) {\n            map[style].forEach(function(alias) {\n                result[String(alias)] = style;\n            });\n        });\n    }\n    return result;\n}\nfunction Type$1(tag, options) {\n    options = options || {};\n    Object.keys(options).forEach(function(name) {\n        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n            throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n        }\n    });\n    // TODO: Add tag format check.\n    this.options = options; // keep original options in case user wants to extend this type later\n    this.tag = tag;\n    this.kind = options[\"kind\"] || null;\n    this.resolve = options[\"resolve\"] || function() {\n        return true;\n    };\n    this.construct = options[\"construct\"] || function(data) {\n        return data;\n    };\n    this.instanceOf = options[\"instanceOf\"] || null;\n    this.predicate = options[\"predicate\"] || null;\n    this.represent = options[\"represent\"] || null;\n    this.representName = options[\"representName\"] || null;\n    this.defaultStyle = options[\"defaultStyle\"] || null;\n    this.multi = options[\"multi\"] || false;\n    this.styleAliases = compileStyleAliases(options[\"styleAliases\"] || null);\n    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n        throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n    }\n}\nvar type = Type$1;\n/*eslint-disable max-len*/ function compileList(schema, name) {\n    var result = [];\n    schema[name].forEach(function(currentType) {\n        var newIndex = result.length;\n        result.forEach(function(previousType, previousIndex) {\n            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {\n                newIndex = previousIndex;\n            }\n        });\n        result[newIndex] = currentType;\n    });\n    return result;\n}\nfunction compileMap() {\n    var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n            scalar: [],\n            sequence: [],\n            mapping: [],\n            fallback: []\n        }\n    }, index, length;\n    function collectType(type) {\n        if (type.multi) {\n            result.multi[type.kind].push(type);\n            result.multi[\"fallback\"].push(type);\n        } else {\n            result[type.kind][type.tag] = result[\"fallback\"][type.tag] = type;\n        }\n    }\n    for(index = 0, length = arguments.length; index < length; index += 1){\n        arguments[index].forEach(collectType);\n    }\n    return result;\n}\nfunction Schema$1(definition) {\n    return this.extend(definition);\n}\nSchema$1.prototype.extend = function extend(definition) {\n    var implicit = [];\n    var explicit = [];\n    if (definition instanceof type) {\n        // Schema.extend(type)\n        explicit.push(definition);\n    } else if (Array.isArray(definition)) {\n        // Schema.extend([ type1, type2, ... ])\n        explicit = explicit.concat(definition);\n    } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n        // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n        if (definition.implicit) implicit = implicit.concat(definition.implicit);\n        if (definition.explicit) explicit = explicit.concat(definition.explicit);\n    } else {\n        throw new exception(\"Schema.extend argument should be a Type, [ Type ], \" + \"or a schema definition ({ implicit: [...], explicit: [...] })\");\n    }\n    implicit.forEach(function(type$1) {\n        if (!(type$1 instanceof type)) {\n            throw new exception(\"Specified list of YAML types (or a single Type object) contains a non-Type object.\");\n        }\n        if (type$1.loadKind && type$1.loadKind !== \"scalar\") {\n            throw new exception(\"There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.\");\n        }\n        if (type$1.multi) {\n            throw new exception(\"There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.\");\n        }\n    });\n    explicit.forEach(function(type$1) {\n        if (!(type$1 instanceof type)) {\n            throw new exception(\"Specified list of YAML types (or a single Type object) contains a non-Type object.\");\n        }\n    });\n    var result = Object.create(Schema$1.prototype);\n    result.implicit = (this.implicit || []).concat(implicit);\n    result.explicit = (this.explicit || []).concat(explicit);\n    result.compiledImplicit = compileList(result, \"implicit\");\n    result.compiledExplicit = compileList(result, \"explicit\");\n    result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);\n    return result;\n};\nvar schema = Schema$1;\nvar str = new type(\"tag:yaml.org,2002:str\", {\n    kind: \"scalar\",\n    construct: function(data) {\n        return data !== null ? data : \"\";\n    }\n});\nvar seq = new type(\"tag:yaml.org,2002:seq\", {\n    kind: \"sequence\",\n    construct: function(data) {\n        return data !== null ? data : [];\n    }\n});\nvar map = new type(\"tag:yaml.org,2002:map\", {\n    kind: \"mapping\",\n    construct: function(data) {\n        return data !== null ? data : {};\n    }\n});\nvar failsafe = new schema({\n    explicit: [\n        str,\n        seq,\n        map\n    ]\n});\nfunction resolveYamlNull(data) {\n    if (data === null) return true;\n    var max = data.length;\n    return max === 1 && data === \"~\" || max === 4 && (data === \"null\" || data === \"Null\" || data === \"NULL\");\n}\nfunction constructYamlNull() {\n    return null;\n}\nfunction isNull(object) {\n    return object === null;\n}\nvar _null = new type(\"tag:yaml.org,2002:null\", {\n    kind: \"scalar\",\n    resolve: resolveYamlNull,\n    construct: constructYamlNull,\n    predicate: isNull,\n    represent: {\n        canonical: function() {\n            return \"~\";\n        },\n        lowercase: function() {\n            return \"null\";\n        },\n        uppercase: function() {\n            return \"NULL\";\n        },\n        camelcase: function() {\n            return \"Null\";\n        },\n        empty: function() {\n            return \"\";\n        }\n    },\n    defaultStyle: \"lowercase\"\n});\nfunction resolveYamlBoolean(data) {\n    if (data === null) return false;\n    var max = data.length;\n    return max === 4 && (data === \"true\" || data === \"True\" || data === \"TRUE\") || max === 5 && (data === \"false\" || data === \"False\" || data === \"FALSE\");\n}\nfunction constructYamlBoolean(data) {\n    return data === \"true\" || data === \"True\" || data === \"TRUE\";\n}\nfunction isBoolean(object) {\n    return Object.prototype.toString.call(object) === \"[object Boolean]\";\n}\nvar bool = new type(\"tag:yaml.org,2002:bool\", {\n    kind: \"scalar\",\n    resolve: resolveYamlBoolean,\n    construct: constructYamlBoolean,\n    predicate: isBoolean,\n    represent: {\n        lowercase: function(object) {\n            return object ? \"true\" : \"false\";\n        },\n        uppercase: function(object) {\n            return object ? \"TRUE\" : \"FALSE\";\n        },\n        camelcase: function(object) {\n            return object ? \"True\" : \"False\";\n        }\n    },\n    defaultStyle: \"lowercase\"\n});\nfunction isHexCode(c) {\n    return 0x30 /* 0 */  <= c && c <= 0x39 /* 9 */  || 0x41 /* A */  <= c && c <= 0x46 /* F */  || 0x61 /* a */  <= c && c <= 0x66 /* f */ ;\n}\nfunction isOctCode(c) {\n    return 0x30 /* 0 */  <= c && c <= 0x37 /* 7 */ ;\n}\nfunction isDecCode(c) {\n    return 0x30 /* 0 */  <= c && c <= 0x39 /* 9 */ ;\n}\nfunction resolveYamlInteger(data) {\n    if (data === null) return false;\n    var max = data.length, index = 0, hasDigits = false, ch;\n    if (!max) return false;\n    ch = data[index];\n    // sign\n    if (ch === \"-\" || ch === \"+\") {\n        ch = data[++index];\n    }\n    if (ch === \"0\") {\n        // 0\n        if (index + 1 === max) return true;\n        ch = data[++index];\n        // base 2, base 8, base 16\n        if (ch === \"b\") {\n            // base 2\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (ch !== \"0\" && ch !== \"1\") return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n        if (ch === \"x\") {\n            // base 16\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (!isHexCode(data.charCodeAt(index))) return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n        if (ch === \"o\") {\n            // base 8\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (!isOctCode(data.charCodeAt(index))) return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n    }\n    // base 10 (except 0)\n    // value should not start with `_`;\n    if (ch === \"_\") return false;\n    for(; index < max; index++){\n        ch = data[index];\n        if (ch === \"_\") continue;\n        if (!isDecCode(data.charCodeAt(index))) {\n            return false;\n        }\n        hasDigits = true;\n    }\n    // Should have digits and should not end with `_`\n    if (!hasDigits || ch === \"_\") return false;\n    return true;\n}\nfunction constructYamlInteger(data) {\n    var value = data, sign = 1, ch;\n    if (value.indexOf(\"_\") !== -1) {\n        value = value.replace(/_/g, \"\");\n    }\n    ch = value[0];\n    if (ch === \"-\" || ch === \"+\") {\n        if (ch === \"-\") sign = -1;\n        value = value.slice(1);\n        ch = value[0];\n    }\n    if (value === \"0\") return 0;\n    if (ch === \"0\") {\n        if (value[1] === \"b\") return sign * parseInt(value.slice(2), 2);\n        if (value[1] === \"x\") return sign * parseInt(value.slice(2), 16);\n        if (value[1] === \"o\") return sign * parseInt(value.slice(2), 8);\n    }\n    return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n    return Object.prototype.toString.call(object) === \"[object Number]\" && object % 1 === 0 && !common.isNegativeZero(object);\n}\nvar int = new type(\"tag:yaml.org,2002:int\", {\n    kind: \"scalar\",\n    resolve: resolveYamlInteger,\n    construct: constructYamlInteger,\n    predicate: isInteger,\n    represent: {\n        binary: function(obj) {\n            return obj >= 0 ? \"0b\" + obj.toString(2) : \"-0b\" + obj.toString(2).slice(1);\n        },\n        octal: function(obj) {\n            return obj >= 0 ? \"0o\" + obj.toString(8) : \"-0o\" + obj.toString(8).slice(1);\n        },\n        decimal: function(obj) {\n            return obj.toString(10);\n        },\n        /* eslint-disable max-len */ hexadecimal: function(obj) {\n            return obj >= 0 ? \"0x\" + obj.toString(16).toUpperCase() : \"-0x\" + obj.toString(16).toUpperCase().slice(1);\n        }\n    },\n    defaultStyle: \"decimal\",\n    styleAliases: {\n        binary: [\n            2,\n            \"bin\"\n        ],\n        octal: [\n            8,\n            \"oct\"\n        ],\n        decimal: [\n            10,\n            \"dec\"\n        ],\n        hexadecimal: [\n            16,\n            \"hex\"\n        ]\n    }\n});\nvar YAML_FLOAT_PATTERN = new RegExp(// 2.5e4, 2.5 and integers\n\"^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?\" + // .2e4, .2\n// special case, seems not from spec\n\"|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?\" + // .inf\n\"|[-+]?\\\\.(?:inf|Inf|INF)\" + // .nan\n\"|\\\\.(?:nan|NaN|NAN))$\");\nfunction resolveYamlFloat(data) {\n    if (data === null) return false;\n    if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n    // Probably should update regexp & check speed\n    data[data.length - 1] === \"_\") {\n        return false;\n    }\n    return true;\n}\nfunction constructYamlFloat(data) {\n    var value, sign;\n    value = data.replace(/_/g, \"\").toLowerCase();\n    sign = value[0] === \"-\" ? -1 : 1;\n    if (\"+-\".indexOf(value[0]) >= 0) {\n        value = value.slice(1);\n    }\n    if (value === \".inf\") {\n        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n    } else if (value === \".nan\") {\n        return NaN;\n    }\n    return sign * parseFloat(value, 10);\n}\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\nfunction representYamlFloat(object, style) {\n    var res;\n    if (isNaN(object)) {\n        switch(style){\n            case \"lowercase\":\n                return \".nan\";\n            case \"uppercase\":\n                return \".NAN\";\n            case \"camelcase\":\n                return \".NaN\";\n        }\n    } else if (Number.POSITIVE_INFINITY === object) {\n        switch(style){\n            case \"lowercase\":\n                return \".inf\";\n            case \"uppercase\":\n                return \".INF\";\n            case \"camelcase\":\n                return \".Inf\";\n        }\n    } else if (Number.NEGATIVE_INFINITY === object) {\n        switch(style){\n            case \"lowercase\":\n                return \"-.inf\";\n            case \"uppercase\":\n                return \"-.INF\";\n            case \"camelcase\":\n                return \"-.Inf\";\n        }\n    } else if (common.isNegativeZero(object)) {\n        return \"-0.0\";\n    }\n    res = object.toString(10);\n    // JS stringifier can build scientific format without dots: 5e-100,\n    // while YAML requres dot: 5.e-100. Fix it with simple hack\n    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace(\"e\", \".e\") : res;\n}\nfunction isFloat(object) {\n    return Object.prototype.toString.call(object) === \"[object Number]\" && (object % 1 !== 0 || common.isNegativeZero(object));\n}\nvar float = new type(\"tag:yaml.org,2002:float\", {\n    kind: \"scalar\",\n    resolve: resolveYamlFloat,\n    construct: constructYamlFloat,\n    predicate: isFloat,\n    represent: representYamlFloat,\n    defaultStyle: \"lowercase\"\n});\nvar json = failsafe.extend({\n    implicit: [\n        _null,\n        bool,\n        int,\n        float\n    ]\n});\nvar core = json;\nvar YAML_DATE_REGEXP = new RegExp(\"^([0-9][0-9][0-9][0-9])\" + // [1] year\n\"-([0-9][0-9])\" + // [2] month\n\"-([0-9][0-9])$\"); // [3] day\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\"^([0-9][0-9][0-9][0-9])\" + // [1] year\n\"-([0-9][0-9]?)\" + // [2] month\n\"-([0-9][0-9]?)\" + // [3] day\n\"(?:[Tt]|[ \\\\t]+)\" + // ...\n\"([0-9][0-9]?)\" + // [4] hour\n\":([0-9][0-9])\" + // [5] minute\n\":([0-9][0-9])\" + // [6] second\n\"(?:\\\\.([0-9]*))?\" + // [7] fraction\n\"(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)\" + // [8] tz [9] tz_sign [10] tz_hour\n\"(?::([0-9][0-9]))?))?$\"); // [11] tz_minute\nfunction resolveYamlTimestamp(data) {\n    if (data === null) return false;\n    if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n    return false;\n}\nfunction constructYamlTimestamp(data) {\n    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;\n    match = YAML_DATE_REGEXP.exec(data);\n    if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n    if (match === null) throw new Error(\"Date resolve error\");\n    // match: [1] year [2] month [3] day\n    year = +match[1];\n    month = +match[2] - 1; // JS month starts with 0\n    day = +match[3];\n    if (!match[4]) {\n        return new Date(Date.UTC(year, month, day));\n    }\n    // match: [4] hour [5] minute [6] second [7] fraction\n    hour = +match[4];\n    minute = +match[5];\n    second = +match[6];\n    if (match[7]) {\n        fraction = match[7].slice(0, 3);\n        while(fraction.length < 3){\n            fraction += \"0\";\n        }\n        fraction = +fraction;\n    }\n    // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n    if (match[9]) {\n        tz_hour = +match[10];\n        tz_minute = +(match[11] || 0);\n        delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n        if (match[9] === \"-\") delta = -delta;\n    }\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n    if (delta) date.setTime(date.getTime() - delta);\n    return date;\n}\nfunction representYamlTimestamp(object /*, style*/ ) {\n    return object.toISOString();\n}\nvar timestamp = new type(\"tag:yaml.org,2002:timestamp\", {\n    kind: \"scalar\",\n    resolve: resolveYamlTimestamp,\n    construct: constructYamlTimestamp,\n    instanceOf: Date,\n    represent: representYamlTimestamp\n});\nfunction resolveYamlMerge(data) {\n    return data === \"<<\" || data === null;\n}\nvar merge = new type(\"tag:yaml.org,2002:merge\", {\n    kind: \"scalar\",\n    resolve: resolveYamlMerge\n});\n/*eslint-disable no-bitwise*/ // [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r\";\nfunction resolveYamlBinary(data) {\n    if (data === null) return false;\n    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n    // Convert one by one.\n    for(idx = 0; idx < max; idx++){\n        code = map.indexOf(data.charAt(idx));\n        // Skip CR/LF\n        if (code > 64) continue;\n        // Fail on illegal characters\n        if (code < 0) return false;\n        bitlen += 6;\n    }\n    // If there are any bits left, source was corrupted\n    return bitlen % 8 === 0;\n}\nfunction constructYamlBinary(data) {\n    var idx, tailbits, input = data.replace(/[\\r\\n=]/g, \"\"), max = input.length, map = BASE64_MAP, bits = 0, result = [];\n    // Collect by 6*4 bits (3 bytes)\n    for(idx = 0; idx < max; idx++){\n        if (idx % 4 === 0 && idx) {\n            result.push(bits >> 16 & 0xFF);\n            result.push(bits >> 8 & 0xFF);\n            result.push(bits & 0xFF);\n        }\n        bits = bits << 6 | map.indexOf(input.charAt(idx));\n    }\n    // Dump tail\n    tailbits = max % 4 * 6;\n    if (tailbits === 0) {\n        result.push(bits >> 16 & 0xFF);\n        result.push(bits >> 8 & 0xFF);\n        result.push(bits & 0xFF);\n    } else if (tailbits === 18) {\n        result.push(bits >> 10 & 0xFF);\n        result.push(bits >> 2 & 0xFF);\n    } else if (tailbits === 12) {\n        result.push(bits >> 4 & 0xFF);\n    }\n    return new Uint8Array(result);\n}\nfunction representYamlBinary(object /*, style*/ ) {\n    var result = \"\", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;\n    // Convert every three bytes to 4 ASCII characters.\n    for(idx = 0; idx < max; idx++){\n        if (idx % 3 === 0 && idx) {\n            result += map[bits >> 18 & 0x3F];\n            result += map[bits >> 12 & 0x3F];\n            result += map[bits >> 6 & 0x3F];\n            result += map[bits & 0x3F];\n        }\n        bits = (bits << 8) + object[idx];\n    }\n    // Dump tail\n    tail = max % 3;\n    if (tail === 0) {\n        result += map[bits >> 18 & 0x3F];\n        result += map[bits >> 12 & 0x3F];\n        result += map[bits >> 6 & 0x3F];\n        result += map[bits & 0x3F];\n    } else if (tail === 2) {\n        result += map[bits >> 10 & 0x3F];\n        result += map[bits >> 4 & 0x3F];\n        result += map[bits << 2 & 0x3F];\n        result += map[64];\n    } else if (tail === 1) {\n        result += map[bits >> 2 & 0x3F];\n        result += map[bits << 4 & 0x3F];\n        result += map[64];\n        result += map[64];\n    }\n    return result;\n}\nfunction isBinary(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Uint8Array]\";\n}\nvar binary = new type(\"tag:yaml.org,2002:binary\", {\n    kind: \"scalar\",\n    resolve: resolveYamlBinary,\n    construct: constructYamlBinary,\n    predicate: isBinary,\n    represent: representYamlBinary\n});\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _toString$2 = Object.prototype.toString;\nfunction resolveYamlOmap(data) {\n    if (data === null) return true;\n    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        pairHasKey = false;\n        if (_toString$2.call(pair) !== \"[object Object]\") return false;\n        for(pairKey in pair){\n            if (_hasOwnProperty$3.call(pair, pairKey)) {\n                if (!pairHasKey) pairHasKey = true;\n                else return false;\n            }\n        }\n        if (!pairHasKey) return false;\n        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n        else return false;\n    }\n    return true;\n}\nfunction constructYamlOmap(data) {\n    return data !== null ? data : [];\n}\nvar omap = new type(\"tag:yaml.org,2002:omap\", {\n    kind: \"sequence\",\n    resolve: resolveYamlOmap,\n    construct: constructYamlOmap\n});\nvar _toString$1 = Object.prototype.toString;\nfunction resolveYamlPairs(data) {\n    if (data === null) return true;\n    var index, length, pair, keys, result, object = data;\n    result = new Array(object.length);\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        if (_toString$1.call(pair) !== \"[object Object]\") return false;\n        keys = Object.keys(pair);\n        if (keys.length !== 1) return false;\n        result[index] = [\n            keys[0],\n            pair[keys[0]]\n        ];\n    }\n    return true;\n}\nfunction constructYamlPairs(data) {\n    if (data === null) return [];\n    var index, length, pair, keys, result, object = data;\n    result = new Array(object.length);\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        keys = Object.keys(pair);\n        result[index] = [\n            keys[0],\n            pair[keys[0]]\n        ];\n    }\n    return result;\n}\nvar pairs = new type(\"tag:yaml.org,2002:pairs\", {\n    kind: \"sequence\",\n    resolve: resolveYamlPairs,\n    construct: constructYamlPairs\n});\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nfunction resolveYamlSet(data) {\n    if (data === null) return true;\n    var key, object = data;\n    for(key in object){\n        if (_hasOwnProperty$2.call(object, key)) {\n            if (object[key] !== null) return false;\n        }\n    }\n    return true;\n}\nfunction constructYamlSet(data) {\n    return data !== null ? data : {};\n}\nvar set = new type(\"tag:yaml.org,2002:set\", {\n    kind: \"mapping\",\n    resolve: resolveYamlSet,\n    construct: constructYamlSet\n});\nvar _default = core.extend({\n    implicit: [\n        timestamp,\n        merge\n    ],\n    explicit: [\n        binary,\n        omap,\n        pairs,\n        set\n    ]\n});\n/*eslint-disable max-len,no-use-before-define*/ var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction _class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction is_EOL(c) {\n    return c === 0x0A /* LF */  || c === 0x0D /* CR */ ;\n}\nfunction is_WHITE_SPACE(c) {\n    return c === 0x09 /* Tab */  || c === 0x20 /* Space */ ;\n}\nfunction is_WS_OR_EOL(c) {\n    return c === 0x09 /* Tab */  || c === 0x20 /* Space */  || c === 0x0A /* LF */  || c === 0x0D /* CR */ ;\n}\nfunction is_FLOW_INDICATOR(c) {\n    return c === 0x2C /* , */  || c === 0x5B /* [ */  || c === 0x5D /* ] */  || c === 0x7B /* { */  || c === 0x7D /* } */ ;\n}\nfunction fromHexCode(c) {\n    var lc;\n    if (0x30 /* 0 */  <= c && c <= 0x39 /* 9 */ ) {\n        return c - 0x30;\n    }\n    /*eslint-disable no-bitwise*/ lc = c | 0x20;\n    if (0x61 /* a */  <= lc && lc <= 0x66 /* f */ ) {\n        return lc - 0x61 + 10;\n    }\n    return -1;\n}\nfunction escapedHexLen(c) {\n    if (c === 0x78 /* x */ ) {\n        return 2;\n    }\n    if (c === 0x75 /* u */ ) {\n        return 4;\n    }\n    if (c === 0x55 /* U */ ) {\n        return 8;\n    }\n    return 0;\n}\nfunction fromDecimalCode(c) {\n    if (0x30 /* 0 */  <= c && c <= 0x39 /* 9 */ ) {\n        return c - 0x30;\n    }\n    return -1;\n}\nfunction simpleEscapeSequence(c) {\n    /* eslint-disable indent */ return c === 0x30 /* 0 */  ? \"\\x00\" : c === 0x61 /* a */  ? \"\\x07\" : c === 0x62 /* b */  ? \"\\b\" : c === 0x74 /* t */  ? \"\t\" : c === 0x09 /* Tab */  ? \"\t\" : c === 0x6E /* n */  ? \"\\n\" : c === 0x76 /* v */  ? \"\\v\" : c === 0x66 /* f */  ? \"\\f\" : c === 0x72 /* r */  ? \"\\r\" : c === 0x65 /* e */  ? \"\\x1b\" : c === 0x20 /* Space */  ? \" \" : c === 0x22 /* \" */  ? '\"' : c === 0x2F /* / */  ? \"/\" : c === 0x5C /* \\ */  ? \"\\\\\" : c === 0x4E /* N */  ? \"\\x85\" : c === 0x5F /* _ */  ? \"\\xa0\" : c === 0x4C /* L */  ? \"\\u2028\" : c === 0x50 /* P */  ? \"\\u2029\" : \"\";\n}\nfunction charFromCodepoint(c) {\n    if (c <= 0xFFFF) {\n        return String.fromCharCode(c);\n    }\n    // Encode UTF-16 surrogate pair\n    // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n    return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor(var i = 0; i < 256; i++){\n    simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n    simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\nfunction State$1(input, options) {\n    this.input = input;\n    this.filename = options[\"filename\"] || null;\n    this.schema = options[\"schema\"] || _default;\n    this.onWarning = options[\"onWarning\"] || null;\n    // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n    // if such documents have no explicit %YAML directive\n    this.legacy = options[\"legacy\"] || false;\n    this.json = options[\"json\"] || false;\n    this.listener = options[\"listener\"] || null;\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.typeMap = this.schema.compiledTypeMap;\n    this.length = input.length;\n    this.position = 0;\n    this.line = 0;\n    this.lineStart = 0;\n    this.lineIndent = 0;\n    // position of first leading tab in the current line,\n    // used to make sure there are no tabs in the indentation\n    this.firstTabInLine = -1;\n    this.documents = [];\n/*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/ }\nfunction generateError(state, message) {\n    var mark = {\n        name: state.filename,\n        buffer: state.input.slice(0, -1),\n        position: state.position,\n        line: state.line,\n        column: state.position - state.lineStart\n    };\n    mark.snippet = snippet(mark);\n    return new exception(message, mark);\n}\nfunction throwError(state, message) {\n    throw generateError(state, message);\n}\nfunction throwWarning(state, message) {\n    if (state.onWarning) {\n        state.onWarning.call(null, generateError(state, message));\n    }\n}\nvar directiveHandlers = {\n    YAML: function handleYamlDirective(state, name, args) {\n        var match, major, minor;\n        if (state.version !== null) {\n            throwError(state, \"duplication of %YAML directive\");\n        }\n        if (args.length !== 1) {\n            throwError(state, \"YAML directive accepts exactly one argument\");\n        }\n        match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n        if (match === null) {\n            throwError(state, \"ill-formed argument of the YAML directive\");\n        }\n        major = parseInt(match[1], 10);\n        minor = parseInt(match[2], 10);\n        if (major !== 1) {\n            throwError(state, \"unacceptable YAML version of the document\");\n        }\n        state.version = args[0];\n        state.checkLineBreaks = minor < 2;\n        if (minor !== 1 && minor !== 2) {\n            throwWarning(state, \"unsupported YAML version of the document\");\n        }\n    },\n    TAG: function handleTagDirective(state, name, args) {\n        var handle, prefix;\n        if (args.length !== 2) {\n            throwError(state, \"TAG directive accepts exactly two arguments\");\n        }\n        handle = args[0];\n        prefix = args[1];\n        if (!PATTERN_TAG_HANDLE.test(handle)) {\n            throwError(state, \"ill-formed tag handle (first argument) of the TAG directive\");\n        }\n        if (_hasOwnProperty$1.call(state.tagMap, handle)) {\n            throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n        }\n        if (!PATTERN_TAG_URI.test(prefix)) {\n            throwError(state, \"ill-formed tag prefix (second argument) of the TAG directive\");\n        }\n        try {\n            prefix = decodeURIComponent(prefix);\n        } catch (err) {\n            throwError(state, \"tag prefix is malformed: \" + prefix);\n        }\n        state.tagMap[handle] = prefix;\n    }\n};\nfunction captureSegment(state, start, end, checkJson) {\n    var _position, _length, _character, _result;\n    if (start < end) {\n        _result = state.input.slice(start, end);\n        if (checkJson) {\n            for(_position = 0, _length = _result.length; _position < _length; _position += 1){\n                _character = _result.charCodeAt(_position);\n                if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n                    throwError(state, \"expected valid JSON character\");\n                }\n            }\n        } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n            throwError(state, \"the stream contains non-printable characters\");\n        }\n        state.result += _result;\n    }\n}\nfunction mergeMappings(state, destination, source, overridableKeys) {\n    var sourceKeys, key, index, quantity;\n    if (!common.isObject(source)) {\n        throwError(state, \"cannot merge mappings; the provided source object is unacceptable\");\n    }\n    sourceKeys = Object.keys(source);\n    for(index = 0, quantity = sourceKeys.length; index < quantity; index += 1){\n        key = sourceKeys[index];\n        if (!_hasOwnProperty$1.call(destination, key)) {\n            destination[key] = source[key];\n            overridableKeys[key] = true;\n        }\n    }\n}\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {\n    var index, quantity;\n    // The output is a plain object here, so keys can only be strings.\n    // We need to convert keyNode to a string, but doing so can hang the process\n    // (deeply nested arrays that explode exponentially using aliases).\n    if (Array.isArray(keyNode)) {\n        keyNode = Array.prototype.slice.call(keyNode);\n        for(index = 0, quantity = keyNode.length; index < quantity; index += 1){\n            if (Array.isArray(keyNode[index])) {\n                throwError(state, \"nested arrays are not supported inside keys\");\n            }\n            if (typeof keyNode === \"object\" && _class(keyNode[index]) === \"[object Object]\") {\n                keyNode[index] = \"[object Object]\";\n            }\n        }\n    }\n    // Avoid code execution in load() via toString property\n    // (still use its own toString for arrays, timestamps,\n    // and whatever user schema extensions happen to have @@toStringTag)\n    if (typeof keyNode === \"object\" && _class(keyNode) === \"[object Object]\") {\n        keyNode = \"[object Object]\";\n    }\n    keyNode = String(keyNode);\n    if (_result === null) {\n        _result = {};\n    }\n    if (keyTag === \"tag:yaml.org,2002:merge\") {\n        if (Array.isArray(valueNode)) {\n            for(index = 0, quantity = valueNode.length; index < quantity; index += 1){\n                mergeMappings(state, _result, valueNode[index], overridableKeys);\n            }\n        } else {\n            mergeMappings(state, _result, valueNode, overridableKeys);\n        }\n    } else {\n        if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {\n            state.line = startLine || state.line;\n            state.lineStart = startLineStart || state.lineStart;\n            state.position = startPos || state.position;\n            throwError(state, \"duplicated mapping key\");\n        }\n        // used for this specific key only because Object.defineProperty is slow\n        if (keyNode === \"__proto__\") {\n            Object.defineProperty(_result, keyNode, {\n                configurable: true,\n                enumerable: true,\n                writable: true,\n                value: valueNode\n            });\n        } else {\n            _result[keyNode] = valueNode;\n        }\n        delete overridableKeys[keyNode];\n    }\n    return _result;\n}\nfunction readLineBreak(state) {\n    var ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x0A /* LF */ ) {\n        state.position++;\n    } else if (ch === 0x0D /* CR */ ) {\n        state.position++;\n        if (state.input.charCodeAt(state.position) === 0x0A /* LF */ ) {\n            state.position++;\n        }\n    } else {\n        throwError(state, \"a line break is expected\");\n    }\n    state.line += 1;\n    state.lineStart = state.position;\n    state.firstTabInLine = -1;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        while(is_WHITE_SPACE(ch)){\n            if (ch === 0x09 /* Tab */  && state.firstTabInLine === -1) {\n                state.firstTabInLine = state.position;\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (allowComments && ch === 0x23 /* # */ ) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            }while (ch !== 0x0A /* LF */  && ch !== 0x0D /* CR */  && ch !== 0);\n        }\n        if (is_EOL(ch)) {\n            readLineBreak(state);\n            ch = state.input.charCodeAt(state.position);\n            lineBreaks++;\n            state.lineIndent = 0;\n            while(ch === 0x20 /* Space */ ){\n                state.lineIndent++;\n                ch = state.input.charCodeAt(++state.position);\n            }\n        } else {\n            break;\n        }\n    }\n    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n        throwWarning(state, \"deficient indentation\");\n    }\n    return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n    var _position = state.position, ch;\n    ch = state.input.charCodeAt(_position);\n    // Condition state.position === state.lineStart is tested\n    // in parent on each call, for efficiency. No needs to test here again.\n    if ((ch === 0x2D /* - */  || ch === 0x2E /* . */ ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n        _position += 3;\n        ch = state.input.charCodeAt(_position);\n        if (ch === 0 || is_WS_OR_EOL(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction writeFoldedLines(state, count) {\n    if (count === 1) {\n        state.result += \" \";\n    } else if (count > 1) {\n        state.result += common.repeat(\"\\n\", count - 1);\n    }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 /* # */  || ch === 0x26 /* & */  || ch === 0x2A /* * */  || ch === 0x21 /* ! */  || ch === 0x7C /* | */  || ch === 0x3E /* > */  || ch === 0x27 /* ' */  || ch === 0x22 /* \" */  || ch === 0x25 /* % */  || ch === 0x40 /* @ */  || ch === 0x60 /* ` */ ) {\n        return false;\n    }\n    if (ch === 0x3F /* ? */  || ch === 0x2D /* - */ ) {\n        following = state.input.charCodeAt(state.position + 1);\n        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n            return false;\n        }\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    captureStart = captureEnd = state.position;\n    hasPendingContent = false;\n    while(ch !== 0){\n        if (ch === 0x3A /* : */ ) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n                break;\n            }\n        } else if (ch === 0x23 /* # */ ) {\n            preceding = state.input.charCodeAt(state.position - 1);\n            if (is_WS_OR_EOL(preceding)) {\n                break;\n            }\n        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n            break;\n        } else if (is_EOL(ch)) {\n            _line = state.line;\n            _lineStart = state.lineStart;\n            _lineIndent = state.lineIndent;\n            skipSeparationSpace(state, false, -1);\n            if (state.lineIndent >= nodeIndent) {\n                hasPendingContent = true;\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            } else {\n                state.position = captureEnd;\n                state.line = _line;\n                state.lineStart = _lineStart;\n                state.lineIndent = _lineIndent;\n                break;\n            }\n        }\n        if (hasPendingContent) {\n            captureSegment(state, captureStart, captureEnd, false);\n            writeFoldedLines(state, state.line - _line);\n            captureStart = captureEnd = state.position;\n            hasPendingContent = false;\n        }\n        if (!is_WHITE_SPACE(ch)) {\n            captureEnd = state.position + 1;\n        }\n        ch = state.input.charCodeAt(++state.position);\n    }\n    captureSegment(state, captureStart, captureEnd, false);\n    if (state.result) {\n        return true;\n    }\n    state.kind = _kind;\n    state.result = _result;\n    return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n    var ch, captureStart, captureEnd;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x27 /* ' */ ) {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        if (ch === 0x27 /* ' */ ) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (ch === 0x27 /* ' */ ) {\n                captureStart = state.position;\n                state.position++;\n                captureEnd = state.position;\n            } else {\n                return true;\n            }\n        } else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, \"unexpected end of the document within a single quoted scalar\");\n        } else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a single quoted scalar\");\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x22 /* \" */ ) {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        if (ch === 0x22 /* \" */ ) {\n            captureSegment(state, captureStart, state.position, true);\n            state.position++;\n            return true;\n        } else if (ch === 0x5C /* \\ */ ) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (is_EOL(ch)) {\n                skipSeparationSpace(state, false, nodeIndent);\n            // TODO: rework to inline fn with no type cast?\n            } else if (ch < 256 && simpleEscapeCheck[ch]) {\n                state.result += simpleEscapeMap[ch];\n                state.position++;\n            } else if ((tmp = escapedHexLen(ch)) > 0) {\n                hexLength = tmp;\n                hexResult = 0;\n                for(; hexLength > 0; hexLength--){\n                    ch = state.input.charCodeAt(++state.position);\n                    if ((tmp = fromHexCode(ch)) >= 0) {\n                        hexResult = (hexResult << 4) + tmp;\n                    } else {\n                        throwError(state, \"expected hexadecimal character\");\n                    }\n                }\n                state.result += charFromCodepoint(hexResult);\n                state.position++;\n            } else {\n                throwError(state, \"unknown escape sequence\");\n            }\n            captureStart = captureEnd = state.position;\n        } else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, \"unexpected end of the document within a double quoted scalar\");\n        } else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a double quoted scalar\");\n}\nfunction readFlowCollection(state, nodeIndent) {\n    var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x5B /* [ */ ) {\n        terminator = 0x5D; /* ] */ \n        isMapping = false;\n        _result = [];\n    } else if (ch === 0x7B /* { */ ) {\n        terminator = 0x7D; /* } */ \n        isMapping = true;\n        _result = {};\n    } else {\n        return false;\n    }\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(++state.position);\n    while(ch !== 0){\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === terminator) {\n            state.position++;\n            state.tag = _tag;\n            state.anchor = _anchor;\n            state.kind = isMapping ? \"mapping\" : \"sequence\";\n            state.result = _result;\n            return true;\n        } else if (!readNext) {\n            throwError(state, \"missed comma between flow collection entries\");\n        } else if (ch === 0x2C /* , */ ) {\n            // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n            throwError(state, \"expected the node content, but found ','\");\n        }\n        keyTag = keyNode = valueNode = null;\n        isPair = isExplicitPair = false;\n        if (ch === 0x3F /* ? */ ) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following)) {\n                isPair = isExplicitPair = true;\n                state.position++;\n                skipSeparationSpace(state, true, nodeIndent);\n            }\n        }\n        _line = state.line; // Save the current line.\n        _lineStart = state.lineStart;\n        _pos = state.position;\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        keyTag = state.tag;\n        keyNode = state.result;\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if ((isExplicitPair || state.line === _line) && ch === 0x3A /* : */ ) {\n            isPair = true;\n            ch = state.input.charCodeAt(++state.position);\n            skipSeparationSpace(state, true, nodeIndent);\n            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n            valueNode = state.result;\n        }\n        if (isMapping) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n        } else if (isPair) {\n            _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n        } else {\n            _result.push(keyNode);\n        }\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === 0x2C /* , */ ) {\n            readNext = true;\n            ch = state.input.charCodeAt(++state.position);\n        } else {\n            readNext = false;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a flow collection\");\n}\nfunction readBlockScalar(state, nodeIndent) {\n    var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x7C /* | */ ) {\n        folding = false;\n    } else if (ch === 0x3E /* > */ ) {\n        folding = true;\n    } else {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    while(ch !== 0){\n        ch = state.input.charCodeAt(++state.position);\n        if (ch === 0x2B /* + */  || ch === 0x2D /* - */ ) {\n            if (CHOMPING_CLIP === chomping) {\n                chomping = ch === 0x2B /* + */  ? CHOMPING_KEEP : CHOMPING_STRIP;\n            } else {\n                throwError(state, \"repeat of a chomping mode identifier\");\n            }\n        } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n            if (tmp === 0) {\n                throwError(state, \"bad explicit indentation width of a block scalar; it cannot be less than one\");\n            } else if (!detectedIndent) {\n                textIndent = nodeIndent + tmp - 1;\n                detectedIndent = true;\n            } else {\n                throwError(state, \"repeat of an indentation width identifier\");\n            }\n        } else {\n            break;\n        }\n    }\n    if (is_WHITE_SPACE(ch)) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        }while (is_WHITE_SPACE(ch));\n        if (ch === 0x23 /* # */ ) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            }while (!is_EOL(ch) && ch !== 0);\n        }\n    }\n    while(ch !== 0){\n        readLineBreak(state);\n        state.lineIndent = 0;\n        ch = state.input.charCodeAt(state.position);\n        while((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20 /* Space */ ){\n            state.lineIndent++;\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (!detectedIndent && state.lineIndent > textIndent) {\n            textIndent = state.lineIndent;\n        }\n        if (is_EOL(ch)) {\n            emptyLines++;\n            continue;\n        }\n        // End of the scalar.\n        if (state.lineIndent < textIndent) {\n            // Perform the chomping.\n            if (chomping === CHOMPING_KEEP) {\n                state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n            } else if (chomping === CHOMPING_CLIP) {\n                if (didReadContent) {\n                    state.result += \"\\n\";\n                }\n            }\n            break;\n        }\n        // Folded style: use fancy rules to handle line breaks.\n        if (folding) {\n            // Lines starting with white space characters (more-indented lines) are not folded.\n            if (is_WHITE_SPACE(ch)) {\n                atMoreIndented = true;\n                // except for the first content line (cf. Example 8.1)\n                state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n            // End of more-indented block.\n            } else if (atMoreIndented) {\n                atMoreIndented = false;\n                state.result += common.repeat(\"\\n\", emptyLines + 1);\n            // Just one line break - perceive as the same line.\n            } else if (emptyLines === 0) {\n                if (didReadContent) {\n                    state.result += \" \";\n                }\n            // Several line breaks - perceive as different lines.\n            } else {\n                state.result += common.repeat(\"\\n\", emptyLines);\n            }\n        // Literal style: just add exact number of line breaks between content lines.\n        } else {\n            // Keep all line breaks except the header line break.\n            state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n        }\n        didReadContent = true;\n        detectedIndent = true;\n        emptyLines = 0;\n        captureStart = state.position;\n        while(!is_EOL(ch) && ch !== 0){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        captureSegment(state, captureStart, state.position, false);\n    }\n    return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;\n    // there is a leading tab before this token, so it can't be a block sequence/mapping;\n    // it can still be flow sequence/mapping or a scalar\n    if (state.firstTabInLine !== -1) return false;\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        if (state.firstTabInLine !== -1) {\n            state.position = state.firstTabInLine;\n            throwError(state, \"tab characters must not be used in indentation\");\n        }\n        if (ch !== 0x2D /* - */ ) {\n            break;\n        }\n        following = state.input.charCodeAt(state.position + 1);\n        if (!is_WS_OR_EOL(following)) {\n            break;\n        }\n        detected = true;\n        state.position++;\n        if (skipSeparationSpace(state, true, -1)) {\n            if (state.lineIndent <= nodeIndent) {\n                _result.push(null);\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            }\n        }\n        _line = state.line;\n        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n        _result.push(state.result);\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n            throwError(state, \"bad indentation of a sequence entry\");\n        } else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = \"sequence\";\n        state.result = _result;\n        return true;\n    }\n    return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n    var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;\n    // there is a leading tab before this token, so it can't be a block sequence/mapping;\n    // it can still be flow sequence/mapping or a scalar\n    if (state.firstTabInLine !== -1) return false;\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        if (!atExplicitKey && state.firstTabInLine !== -1) {\n            state.position = state.firstTabInLine;\n            throwError(state, \"tab characters must not be used in indentation\");\n        }\n        following = state.input.charCodeAt(state.position + 1);\n        _line = state.line; // Save the current line.\n        //\n        // Explicit notation case. There are two separate blocks:\n        // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n        //\n        if ((ch === 0x3F /* ? */  || ch === 0x3A /* : */ ) && is_WS_OR_EOL(following)) {\n            if (ch === 0x3F /* ? */ ) {\n                if (atExplicitKey) {\n                    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n                    keyTag = keyNode = valueNode = null;\n                }\n                detected = true;\n                atExplicitKey = true;\n                allowCompact = true;\n            } else if (atExplicitKey) {\n                // i.e. 0x3A/* : */ === character after the explicit key.\n                atExplicitKey = false;\n                allowCompact = true;\n            } else {\n                throwError(state, \"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line\");\n            }\n            state.position += 1;\n            ch = following;\n        //\n        // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n        //\n        } else {\n            _keyLine = state.line;\n            _keyLineStart = state.lineStart;\n            _keyPos = state.position;\n            if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n                break;\n            }\n            if (state.line === _line) {\n                ch = state.input.charCodeAt(state.position);\n                while(is_WHITE_SPACE(ch)){\n                    ch = state.input.charCodeAt(++state.position);\n                }\n                if (ch === 0x3A /* : */ ) {\n                    ch = state.input.charCodeAt(++state.position);\n                    if (!is_WS_OR_EOL(ch)) {\n                        throwError(state, \"a whitespace character is expected after the key-value separator within a block mapping\");\n                    }\n                    if (atExplicitKey) {\n                        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n                        keyTag = keyNode = valueNode = null;\n                    }\n                    detected = true;\n                    atExplicitKey = false;\n                    allowCompact = false;\n                    keyTag = state.tag;\n                    keyNode = state.result;\n                } else if (detected) {\n                    throwError(state, \"can not read an implicit mapping pair; a colon is missed\");\n                } else {\n                    state.tag = _tag;\n                    state.anchor = _anchor;\n                    return true; // Keep the result of `composeNode`.\n                }\n            } else if (detected) {\n                throwError(state, \"can not read a block mapping entry; a multiline key may not be an implicit key\");\n            } else {\n                state.tag = _tag;\n                state.anchor = _anchor;\n                return true; // Keep the result of `composeNode`.\n            }\n        }\n        //\n        // Common reading code for both explicit and implicit notations.\n        //\n        if (state.line === _line || state.lineIndent > nodeIndent) {\n            if (atExplicitKey) {\n                _keyLine = state.line;\n                _keyLineStart = state.lineStart;\n                _keyPos = state.position;\n            }\n            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n                if (atExplicitKey) {\n                    keyNode = state.result;\n                } else {\n                    valueNode = state.result;\n                }\n            }\n            if (!atExplicitKey) {\n                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n                keyTag = keyNode = valueNode = null;\n            }\n            skipSeparationSpace(state, true, -1);\n            ch = state.input.charCodeAt(state.position);\n        }\n        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n            throwError(state, \"bad indentation of a mapping entry\");\n        } else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    //\n    // Epilogue.\n    //\n    // Special case: last mapping's node contains only the key in explicit notation.\n    if (atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n    }\n    // Expose the resulting mapping.\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = \"mapping\";\n        state.result = _result;\n    }\n    return detected;\n}\nfunction readTagProperty(state) {\n    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x21 /* ! */ ) return false;\n    if (state.tag !== null) {\n        throwError(state, \"duplication of a tag property\");\n    }\n    ch = state.input.charCodeAt(++state.position);\n    if (ch === 0x3C /* < */ ) {\n        isVerbatim = true;\n        ch = state.input.charCodeAt(++state.position);\n    } else if (ch === 0x21 /* ! */ ) {\n        isNamed = true;\n        tagHandle = \"!!\";\n        ch = state.input.charCodeAt(++state.position);\n    } else {\n        tagHandle = \"!\";\n    }\n    _position = state.position;\n    if (isVerbatim) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        }while (ch !== 0 && ch !== 0x3E /* > */ );\n        if (state.position < state.length) {\n            tagName = state.input.slice(_position, state.position);\n            ch = state.input.charCodeAt(++state.position);\n        } else {\n            throwError(state, \"unexpected end of the stream within a verbatim tag\");\n        }\n    } else {\n        while(ch !== 0 && !is_WS_OR_EOL(ch)){\n            if (ch === 0x21 /* ! */ ) {\n                if (!isNamed) {\n                    tagHandle = state.input.slice(_position - 1, state.position + 1);\n                    if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n                        throwError(state, \"named tag handle cannot contain such characters\");\n                    }\n                    isNamed = true;\n                    _position = state.position + 1;\n                } else {\n                    throwError(state, \"tag suffix cannot contain exclamation marks\");\n                }\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        tagName = state.input.slice(_position, state.position);\n        if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n            throwError(state, \"tag suffix cannot contain flow indicator characters\");\n        }\n    }\n    if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n        throwError(state, \"tag name cannot contain such characters: \" + tagName);\n    }\n    try {\n        tagName = decodeURIComponent(tagName);\n    } catch (err) {\n        throwError(state, \"tag name is malformed: \" + tagName);\n    }\n    if (isVerbatim) {\n        state.tag = tagName;\n    } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {\n        state.tag = state.tagMap[tagHandle] + tagName;\n    } else if (tagHandle === \"!\") {\n        state.tag = \"!\" + tagName;\n    } else if (tagHandle === \"!!\") {\n        state.tag = \"tag:yaml.org,2002:\" + tagName;\n    } else {\n        throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n    }\n    return true;\n}\nfunction readAnchorProperty(state) {\n    var _position, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x26 /* & */ ) return false;\n    if (state.anchor !== null) {\n        throwError(state, \"duplication of an anchor property\");\n    }\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)){\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, \"name of an anchor node must contain at least one character\");\n    }\n    state.anchor = state.input.slice(_position, state.position);\n    return true;\n}\nfunction readAlias(state) {\n    var _position, alias, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x2A /* * */ ) return false;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)){\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, \"name of an alias node must contain at least one character\");\n    }\n    alias = state.input.slice(_position, state.position);\n    if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {\n        throwError(state, 'unidentified alias \"' + alias + '\"');\n    }\n    state.result = state.anchorMap[alias];\n    skipSeparationSpace(state, true, -1);\n    return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;\n    if (state.listener !== null) {\n        state.listener(\"open\", state);\n    }\n    state.tag = null;\n    state.anchor = null;\n    state.kind = null;\n    state.result = null;\n    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n    if (allowToSeek) {\n        if (skipSeparationSpace(state, true, -1)) {\n            atNewLine = true;\n            if (state.lineIndent > parentIndent) {\n                indentStatus = 1;\n            } else if (state.lineIndent === parentIndent) {\n                indentStatus = 0;\n            } else if (state.lineIndent < parentIndent) {\n                indentStatus = -1;\n            }\n        }\n    }\n    if (indentStatus === 1) {\n        while(readTagProperty(state) || readAnchorProperty(state)){\n            if (skipSeparationSpace(state, true, -1)) {\n                atNewLine = true;\n                allowBlockCollections = allowBlockStyles;\n                if (state.lineIndent > parentIndent) {\n                    indentStatus = 1;\n                } else if (state.lineIndent === parentIndent) {\n                    indentStatus = 0;\n                } else if (state.lineIndent < parentIndent) {\n                    indentStatus = -1;\n                }\n            } else {\n                allowBlockCollections = false;\n            }\n        }\n    }\n    if (allowBlockCollections) {\n        allowBlockCollections = atNewLine || allowCompact;\n    }\n    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n            flowIndent = parentIndent;\n        } else {\n            flowIndent = parentIndent + 1;\n        }\n        blockIndent = state.position - state.lineStart;\n        if (indentStatus === 1) {\n            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n                hasContent = true;\n            } else {\n                if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n                    hasContent = true;\n                } else if (readAlias(state)) {\n                    hasContent = true;\n                    if (state.tag !== null || state.anchor !== null) {\n                        throwError(state, \"alias node should not have any properties\");\n                    }\n                } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n                    hasContent = true;\n                    if (state.tag === null) {\n                        state.tag = \"?\";\n                    }\n                }\n                if (state.anchor !== null) {\n                    state.anchorMap[state.anchor] = state.result;\n                }\n            }\n        } else if (indentStatus === 0) {\n            // Special case: block sequences are allowed to have same indentation level as the parent.\n            // http://www.yaml.org/spec/1.2/spec.html#id2799784\n            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n        }\n    }\n    if (state.tag === null) {\n        if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n        }\n    } else if (state.tag === \"?\") {\n        // Implicit resolving is not allowed for non-scalar types, and '?'\n        // non-specific tag is only automatically assigned to plain scalars.\n        //\n        // We only need to check kind conformity in case user explicitly assigns '?'\n        // tag, for example like this: \"!<?> [0]\"\n        //\n        if (state.result !== null && state.kind !== \"scalar\") {\n            throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n        }\n        for(typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1){\n            type = state.implicitTypes[typeIndex];\n            if (type.resolve(state.result)) {\n                state.result = type.construct(state.result);\n                state.tag = type.tag;\n                if (state.anchor !== null) {\n                    state.anchorMap[state.anchor] = state.result;\n                }\n                break;\n            }\n        }\n    } else if (state.tag !== \"!\") {\n        if (_hasOwnProperty$1.call(state.typeMap[state.kind || \"fallback\"], state.tag)) {\n            type = state.typeMap[state.kind || \"fallback\"][state.tag];\n        } else {\n            // looking for multi type\n            type = null;\n            typeList = state.typeMap.multi[state.kind || \"fallback\"];\n            for(typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1){\n                if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n                    type = typeList[typeIndex];\n                    break;\n                }\n            }\n        }\n        if (!type) {\n            throwError(state, \"unknown tag !<\" + state.tag + \">\");\n        }\n        if (state.result !== null && type.kind !== state.kind) {\n            throwError(state, \"unacceptable node kind for !<\" + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n        }\n        if (!type.resolve(state.result, state.tag)) {\n            throwError(state, \"cannot resolve a node with !<\" + state.tag + \"> explicit tag\");\n        } else {\n            state.result = type.construct(state.result, state.tag);\n            if (state.anchor !== null) {\n                state.anchorMap[state.anchor] = state.result;\n            }\n        }\n    }\n    if (state.listener !== null) {\n        state.listener(\"close\", state);\n    }\n    return state.tag !== null || state.anchor !== null || hasContent;\n}\nfunction readDocument(state) {\n    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;\n    state.version = null;\n    state.checkLineBreaks = state.legacy;\n    state.tagMap = Object.create(null);\n    state.anchorMap = Object.create(null);\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if (state.lineIndent > 0 || ch !== 0x25 /* % */ ) {\n            break;\n        }\n        hasDirectives = true;\n        ch = state.input.charCodeAt(++state.position);\n        _position = state.position;\n        while(ch !== 0 && !is_WS_OR_EOL(ch)){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        directiveName = state.input.slice(_position, state.position);\n        directiveArgs = [];\n        if (directiveName.length < 1) {\n            throwError(state, \"directive name must not be less than one character in length\");\n        }\n        while(ch !== 0){\n            while(is_WHITE_SPACE(ch)){\n                ch = state.input.charCodeAt(++state.position);\n            }\n            if (ch === 0x23 /* # */ ) {\n                do {\n                    ch = state.input.charCodeAt(++state.position);\n                }while (ch !== 0 && !is_EOL(ch));\n                break;\n            }\n            if (is_EOL(ch)) break;\n            _position = state.position;\n            while(ch !== 0 && !is_WS_OR_EOL(ch)){\n                ch = state.input.charCodeAt(++state.position);\n            }\n            directiveArgs.push(state.input.slice(_position, state.position));\n        }\n        if (ch !== 0) readLineBreak(state);\n        if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {\n            directiveHandlers[directiveName](state, directiveName, directiveArgs);\n        } else {\n            throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n        }\n    }\n    skipSeparationSpace(state, true, -1);\n    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D /* - */  && state.input.charCodeAt(state.position + 1) === 0x2D /* - */  && state.input.charCodeAt(state.position + 2) === 0x2D /* - */ ) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n    } else if (hasDirectives) {\n        throwError(state, \"directives end mark is expected\");\n    }\n    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n    skipSeparationSpace(state, true, -1);\n    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n        throwWarning(state, \"non-ASCII line breaks are interpreted as content\");\n    }\n    state.documents.push(state.result);\n    if (state.position === state.lineStart && testDocumentSeparator(state)) {\n        if (state.input.charCodeAt(state.position) === 0x2E /* . */ ) {\n            state.position += 3;\n            skipSeparationSpace(state, true, -1);\n        }\n        return;\n    }\n    if (state.position < state.length - 1) {\n        throwError(state, \"end of the stream or a document separator is expected\");\n    } else {\n        return;\n    }\n}\nfunction loadDocuments(input, options) {\n    input = String(input);\n    options = options || {};\n    if (input.length !== 0) {\n        // Add tailing `\\n` if not exists\n        if (input.charCodeAt(input.length - 1) !== 0x0A /* LF */  && input.charCodeAt(input.length - 1) !== 0x0D /* CR */ ) {\n            input += \"\\n\";\n        }\n        // Strip BOM\n        if (input.charCodeAt(0) === 0xFEFF) {\n            input = input.slice(1);\n        }\n    }\n    var state = new State$1(input, options);\n    var nullpos = input.indexOf(\"\\x00\");\n    if (nullpos !== -1) {\n        state.position = nullpos;\n        throwError(state, \"null byte is not allowed in input\");\n    }\n    // Use 0 as string terminator. That significantly simplifies bounds check.\n    state.input += \"\\x00\";\n    while(state.input.charCodeAt(state.position) === 0x20 /* Space */ ){\n        state.lineIndent += 1;\n        state.position += 1;\n    }\n    while(state.position < state.length - 1){\n        readDocument(state);\n    }\n    return state.documents;\n}\nfunction loadAll$1(input, iterator, options) {\n    if (iterator !== null && typeof iterator === \"object\" && typeof options === \"undefined\") {\n        options = iterator;\n        iterator = null;\n    }\n    var documents = loadDocuments(input, options);\n    if (typeof iterator !== \"function\") {\n        return documents;\n    }\n    for(var index = 0, length = documents.length; index < length; index += 1){\n        iterator(documents[index]);\n    }\n}\nfunction load$1(input, options) {\n    var documents = loadDocuments(input, options);\n    if (documents.length === 0) {\n        /*eslint-disable no-undefined*/ return undefined;\n    } else if (documents.length === 1) {\n        return documents[0];\n    }\n    throw new exception(\"expected a single document in the stream, but found more\");\n}\nvar loadAll_1 = loadAll$1;\nvar load_1 = load$1;\nvar loader = {\n    loadAll: loadAll_1,\n    load: load_1\n};\n/*eslint-disable no-use-before-define*/ var _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_BOM = 0xFEFF;\nvar CHAR_TAB = 0x09; /* Tab */ \nvar CHAR_LINE_FEED = 0x0A; /* LF */ \nvar CHAR_CARRIAGE_RETURN = 0x0D; /* CR */ \nvar CHAR_SPACE = 0x20; /* Space */ \nvar CHAR_EXCLAMATION = 0x21; /* ! */ \nvar CHAR_DOUBLE_QUOTE = 0x22; /* \" */ \nvar CHAR_SHARP = 0x23; /* # */ \nvar CHAR_PERCENT = 0x25; /* % */ \nvar CHAR_AMPERSAND = 0x26; /* & */ \nvar CHAR_SINGLE_QUOTE = 0x27; /* ' */ \nvar CHAR_ASTERISK = 0x2A; /* * */ \nvar CHAR_COMMA = 0x2C; /* , */ \nvar CHAR_MINUS = 0x2D; /* - */ \nvar CHAR_COLON = 0x3A; /* : */ \nvar CHAR_EQUALS = 0x3D; /* = */ \nvar CHAR_GREATER_THAN = 0x3E; /* > */ \nvar CHAR_QUESTION = 0x3F; /* ? */ \nvar CHAR_COMMERCIAL_AT = 0x40; /* @ */ \nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B; /* [ */ \nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */ \nvar CHAR_GRAVE_ACCENT = 0x60; /* ` */ \nvar CHAR_LEFT_CURLY_BRACKET = 0x7B; /* { */ \nvar CHAR_VERTICAL_LINE = 0x7C; /* | */ \nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D; /* } */ \nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = \"\\\\0\";\nESCAPE_SEQUENCES[0x07] = \"\\\\a\";\nESCAPE_SEQUENCES[0x08] = \"\\\\b\";\nESCAPE_SEQUENCES[0x09] = \"\\\\t\";\nESCAPE_SEQUENCES[0x0A] = \"\\\\n\";\nESCAPE_SEQUENCES[0x0B] = \"\\\\v\";\nESCAPE_SEQUENCES[0x0C] = \"\\\\f\";\nESCAPE_SEQUENCES[0x0D] = \"\\\\r\";\nESCAPE_SEQUENCES[0x1B] = \"\\\\e\";\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = \"\\\\\\\\\";\nESCAPE_SEQUENCES[0x85] = \"\\\\N\";\nESCAPE_SEQUENCES[0xA0] = \"\\\\_\";\nESCAPE_SEQUENCES[0x2028] = \"\\\\L\";\nESCAPE_SEQUENCES[0x2029] = \"\\\\P\";\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n    \"y\",\n    \"Y\",\n    \"yes\",\n    \"Yes\",\n    \"YES\",\n    \"on\",\n    \"On\",\n    \"ON\",\n    \"n\",\n    \"N\",\n    \"no\",\n    \"No\",\n    \"NO\",\n    \"off\",\n    \"Off\",\n    \"OFF\"\n];\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\nfunction compileStyleMap(schema, map) {\n    var result, keys, index, length, tag, style, type;\n    if (map === null) return {};\n    result = {};\n    keys = Object.keys(map);\n    for(index = 0, length = keys.length; index < length; index += 1){\n        tag = keys[index];\n        style = String(map[tag]);\n        if (tag.slice(0, 2) === \"!!\") {\n            tag = \"tag:yaml.org,2002:\" + tag.slice(2);\n        }\n        type = schema.compiledTypeMap[\"fallback\"][tag];\n        if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n            style = type.styleAliases[style];\n        }\n        result[tag] = style;\n    }\n    return result;\n}\nfunction encodeHex(character) {\n    var string, handle, length;\n    string = character.toString(16).toUpperCase();\n    if (character <= 0xFF) {\n        handle = \"x\";\n        length = 2;\n    } else if (character <= 0xFFFF) {\n        handle = \"u\";\n        length = 4;\n    } else if (character <= 0xFFFFFFFF) {\n        handle = \"U\";\n        length = 8;\n    } else {\n        throw new exception(\"code point within a string may not be greater than 0xFFFFFFFF\");\n    }\n    return \"\\\\\" + handle + common.repeat(\"0\", length - string.length) + string;\n}\nvar QUOTING_TYPE_SINGLE = 1, QUOTING_TYPE_DOUBLE = 2;\nfunction State(options) {\n    this.schema = options[\"schema\"] || _default;\n    this.indent = Math.max(1, options[\"indent\"] || 2);\n    this.noArrayIndent = options[\"noArrayIndent\"] || false;\n    this.skipInvalid = options[\"skipInvalid\"] || false;\n    this.flowLevel = common.isNothing(options[\"flowLevel\"]) ? -1 : options[\"flowLevel\"];\n    this.styleMap = compileStyleMap(this.schema, options[\"styles\"] || null);\n    this.sortKeys = options[\"sortKeys\"] || false;\n    this.lineWidth = options[\"lineWidth\"] || 80;\n    this.noRefs = options[\"noRefs\"] || false;\n    this.noCompatMode = options[\"noCompatMode\"] || false;\n    this.condenseFlow = options[\"condenseFlow\"] || false;\n    this.quotingType = options[\"quotingType\"] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n    this.forceQuotes = options[\"forceQuotes\"] || false;\n    this.replacer = typeof options[\"replacer\"] === \"function\" ? options[\"replacer\"] : null;\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.explicitTypes = this.schema.compiledExplicit;\n    this.tag = null;\n    this.result = \"\";\n    this.duplicates = [];\n    this.usedDuplicates = null;\n}\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n    var ind = common.repeat(\" \", spaces), position = 0, next = -1, result = \"\", line, length = string.length;\n    while(position < length){\n        next = string.indexOf(\"\\n\", position);\n        if (next === -1) {\n            line = string.slice(position);\n            position = length;\n        } else {\n            line = string.slice(position, next + 1);\n            position = next + 1;\n        }\n        if (line.length && line !== \"\\n\") result += ind;\n        result += line;\n    }\n    return result;\n}\nfunction generateNextLine(state, level) {\n    return \"\\n\" + common.repeat(\" \", state.indent * level);\n}\nfunction testImplicitResolving(state, str) {\n    var index, length, type;\n    for(index = 0, length = state.implicitTypes.length; index < length; index += 1){\n        type = state.implicitTypes[index];\n        if (type.resolve(str)) {\n            return true;\n        }\n    }\n    return false;\n}\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n    return c === CHAR_SPACE || c === CHAR_TAB;\n}\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n    return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== CHAR_BOM || 0x10000 <= c && c <= 0x10FFFF;\n}\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\nfunction isNsCharOrWhitespace(c) {\n    return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n}\n// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n//                             c = flow-in   ⇒ ns-plain-safe-in\n//                             c = block-key ⇒ ns-plain-safe-out\n//                             c = flow-key  ⇒ ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n//                            | ( /* An ns-char preceding */ “#” )\n//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\nfunction isPlainSafe(c, prev, inblock) {\n    var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n    var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n    return(// ns-plain-safe\n    (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP // false on '#'\n     && !(prev === CHAR_COLON && !cIsNsChar // false on ': '\n    ) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP // change to true on '[^ ]#'\n     || prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n}\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n    // Uses a subset of ns-char - c-indicator\n    // where ns-char = nb-char - s-white.\n    // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n    return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) // - s-white\n     && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n}\n// Simplified test for values allowed as the last character in plain style.\nfunction isPlainSafeLast(c) {\n    // just not whitespace or colon, it will be checked to be plain character later\n    return !isWhitespace(c) && c !== CHAR_COLON;\n}\n// Same as 'string'.codePointAt(pos), but works in older browsers.\nfunction codePointAt(string, pos) {\n    var first = string.charCodeAt(pos), second;\n    if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n        second = string.charCodeAt(pos + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n    return first;\n}\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n    var leadingSpaceRe = /^\\n* /;\n    return leadingSpaceRe.test(string);\n}\nvar STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {\n    var i;\n    var char = 0;\n    var prevChar = null;\n    var hasLineBreak = false;\n    var hasFoldableLine = false; // only checked if shouldTrackWidth\n    var shouldTrackWidth = lineWidth !== -1;\n    var previousLineBreak = -1; // count the first line correctly\n    var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));\n    if (singleLineOnly || forceQuotes) {\n        // Case: no block styles.\n        // Check for disallowed characters to rule out plain and single.\n        for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){\n            char = codePointAt(string, i);\n            if (!isPrintable(char)) {\n                return STYLE_DOUBLE;\n            }\n            plain = plain && isPlainSafe(char, prevChar, inblock);\n            prevChar = char;\n        }\n    } else {\n        // Case: block styles permitted.\n        for(i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){\n            char = codePointAt(string, i);\n            if (char === CHAR_LINE_FEED) {\n                hasLineBreak = true;\n                // Check if any line can be folded.\n                if (shouldTrackWidth) {\n                    hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n                    i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== \" \";\n                    previousLineBreak = i;\n                }\n            } else if (!isPrintable(char)) {\n                return STYLE_DOUBLE;\n            }\n            plain = plain && isPlainSafe(char, prevChar, inblock);\n            prevChar = char;\n        }\n        // in case the end is missing a \\n\n        hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== \" \";\n    }\n    // Although every style can represent \\n without escaping, prefer block styles\n    // for multiline, since they're more readable and they don't add empty lines.\n    // Also prefer folding a super-long line.\n    if (!hasLineBreak && !hasFoldableLine) {\n        // Strings interpretable as another type have to be quoted;\n        // e.g. the string 'true' vs. the boolean true.\n        if (plain && !forceQuotes && !testAmbiguousType(string)) {\n            return STYLE_PLAIN;\n        }\n        return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n    }\n    // Edge case: block indentation indicator can only have one digit.\n    if (indentPerLevel > 9 && needIndentIndicator(string)) {\n        return STYLE_DOUBLE;\n    }\n    // At this point we know block styles are valid.\n    // Prefer literal style unless we want to fold.\n    if (!forceQuotes) {\n        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey, inblock) {\n    state.dump = function() {\n        if (string.length === 0) {\n            return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n        }\n        if (!state.noCompatMode) {\n            if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n                return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"' + string + '\"' : \"'\" + string + \"'\";\n            }\n        }\n        var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n        // As indentation gets deeper, let the width decrease monotonically\n        // to the lower bound min(state.lineWidth, 40).\n        // Note that this implies\n        //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n        //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n        // This behaves better than a constant minimum width which disallows narrower options,\n        // or an indent threshold which causes the width to suddenly increase.\n        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n        // Without knowing if keys are implicit/explicit, assume implicit for safety.\n        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;\n        function testAmbiguity(string) {\n            return testImplicitResolving(state, string);\n        }\n        switch(chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)){\n            case STYLE_PLAIN:\n                return string;\n            case STYLE_SINGLE:\n                return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n            case STYLE_LITERAL:\n                return \"|\" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n            case STYLE_FOLDED:\n                return \">\" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n            case STYLE_DOUBLE:\n                return '\"' + escapeString(string) + '\"';\n            default:\n                throw new exception(\"impossible error: invalid scalar style\");\n        }\n    }();\n}\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : \"\";\n    // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n    var clip = string[string.length - 1] === \"\\n\";\n    var keep = clip && (string[string.length - 2] === \"\\n\" || string === \"\\n\");\n    var chomp = keep ? \"+\" : clip ? \"\" : \"-\";\n    return indentIndicator + chomp + \"\\n\";\n}\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n    return string[string.length - 1] === \"\\n\" ? string.slice(0, -1) : string;\n}\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n    // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n    // unless they're before or after a more-indented line, or at the very\n    // beginning or end, in which case $k$ maps to $k$.\n    // Therefore, parse each chunk as newline(s) followed by a content line.\n    var lineRe = /(\\n+)([^\\n]*)/g;\n    // first line (possibly an empty line)\n    var result = function() {\n        var nextLF = string.indexOf(\"\\n\");\n        nextLF = nextLF !== -1 ? nextLF : string.length;\n        lineRe.lastIndex = nextLF;\n        return foldLine(string.slice(0, nextLF), width);\n    }();\n    // If we haven't reached the first content line yet, don't add an extra \\n.\n    var prevMoreIndented = string[0] === \"\\n\" || string[0] === \" \";\n    var moreIndented;\n    // rest of the lines\n    var match;\n    while(match = lineRe.exec(string)){\n        var prefix = match[1], line = match[2];\n        moreIndented = line[0] === \" \";\n        result += prefix + (!prevMoreIndented && !moreIndented && line !== \"\" ? \"\\n\" : \"\") + foldLine(line, width);\n        prevMoreIndented = moreIndented;\n    }\n    return result;\n}\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n    if (line === \"\" || line[0] === \" \") return line;\n    // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n    var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n    var match;\n    // start is an inclusive index. end, curr, and next are exclusive.\n    var start = 0, end, curr = 0, next = 0;\n    var result = \"\";\n    // Invariants: 0 <= start <= length-1.\n    //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n    // Inside the loop:\n    //   A match implies length >= 2, so curr and next are <= length-2.\n    while(match = breakRe.exec(line)){\n        next = match.index;\n        // maintain invariant: curr - start <= width\n        if (next - start > width) {\n            end = curr > start ? curr : next; // derive end <= length-2\n            result += \"\\n\" + line.slice(start, end);\n            // skip the space that was output as \\n\n            start = end + 1; // derive start <= length-1\n        }\n        curr = next;\n    }\n    // By the invariants, start <= length-1, so there is something left over.\n    // It is either the whole string or a part starting from non-whitespace.\n    result += \"\\n\";\n    // Insert a break if the remainder is too long and there is a break available.\n    if (line.length - start > width && curr > start) {\n        result += line.slice(start, curr) + \"\\n\" + line.slice(curr + 1);\n    } else {\n        result += line.slice(start);\n    }\n    return result.slice(1); // drop extra \\n joiner\n}\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n    var result = \"\";\n    var char = 0;\n    var escapeSeq;\n    for(var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++){\n        char = codePointAt(string, i);\n        escapeSeq = ESCAPE_SEQUENCES[char];\n        if (!escapeSeq && isPrintable(char)) {\n            result += string[i];\n            if (char >= 0x10000) result += string[i + 1];\n        } else {\n            result += escapeSeq || encodeHex(char);\n        }\n    }\n    return result;\n}\nfunction writeFlowSequence(state, level, object) {\n    var _result = \"\", _tag = state.tag, index, length, value;\n    for(index = 0, length = object.length; index < length; index += 1){\n        value = object[index];\n        if (state.replacer) {\n            value = state.replacer.call(object, String(index), value);\n        }\n        // Write only valid elements, put null instead of invalid elements.\n        if (writeNode(state, level, value, false, false) || typeof value === \"undefined\" && writeNode(state, level, null, false, false)) {\n            if (_result !== \"\") _result += \",\" + (!state.condenseFlow ? \" \" : \"\");\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = \"[\" + _result + \"]\";\n}\nfunction writeBlockSequence(state, level, object, compact) {\n    var _result = \"\", _tag = state.tag, index, length, value;\n    for(index = 0, length = object.length; index < length; index += 1){\n        value = object[index];\n        if (state.replacer) {\n            value = state.replacer.call(object, String(index), value);\n        }\n        // Write only valid elements, put null instead of invalid elements.\n        if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === \"undefined\" && writeNode(state, level + 1, null, true, true, false, true)) {\n            if (!compact || _result !== \"\") {\n                _result += generateNextLine(state, level);\n            }\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                _result += \"-\";\n            } else {\n                _result += \"- \";\n            }\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = _result || \"[]\"; // Empty sequence if no valid values.\n}\nfunction writeFlowMapping(state, level, object) {\n    var _result = \"\", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;\n    for(index = 0, length = objectKeyList.length; index < length; index += 1){\n        pairBuffer = \"\";\n        if (_result !== \"\") pairBuffer += \", \";\n        if (state.condenseFlow) pairBuffer += '\"';\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (state.replacer) {\n            objectValue = state.replacer.call(object, objectKey, objectValue);\n        }\n        if (!writeNode(state, level, objectKey, false, false)) {\n            continue; // Skip this pair because of invalid key;\n        }\n        if (state.dump.length > 1024) pairBuffer += \"? \";\n        pairBuffer += state.dump + (state.condenseFlow ? '\"' : \"\") + \":\" + (state.condenseFlow ? \"\" : \" \");\n        if (!writeNode(state, level, objectValue, false, false)) {\n            continue; // Skip this pair because of invalid value.\n        }\n        pairBuffer += state.dump;\n        // Both key and value are valid.\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = \"{\" + _result + \"}\";\n}\nfunction writeBlockMapping(state, level, object, compact) {\n    var _result = \"\", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;\n    // Allow sorting keys so that the output file is deterministic\n    if (state.sortKeys === true) {\n        // Default sorting\n        objectKeyList.sort();\n    } else if (typeof state.sortKeys === \"function\") {\n        // Custom sort function\n        objectKeyList.sort(state.sortKeys);\n    } else if (state.sortKeys) {\n        // Something is wrong\n        throw new exception(\"sortKeys must be a boolean or a function\");\n    }\n    for(index = 0, length = objectKeyList.length; index < length; index += 1){\n        pairBuffer = \"\";\n        if (!compact || _result !== \"\") {\n            pairBuffer += generateNextLine(state, level);\n        }\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (state.replacer) {\n            objectValue = state.replacer.call(object, objectKey, objectValue);\n        }\n        if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n            continue; // Skip this pair because of invalid key.\n        }\n        explicitPair = state.tag !== null && state.tag !== \"?\" || state.dump && state.dump.length > 1024;\n        if (explicitPair) {\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                pairBuffer += \"?\";\n            } else {\n                pairBuffer += \"? \";\n            }\n        }\n        pairBuffer += state.dump;\n        if (explicitPair) {\n            pairBuffer += generateNextLine(state, level);\n        }\n        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n            continue; // Skip this pair because of invalid value.\n        }\n        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n            pairBuffer += \":\";\n        } else {\n            pairBuffer += \": \";\n        }\n        pairBuffer += state.dump;\n        // Both key and value are valid.\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = _result || \"{}\"; // Empty mapping if no valid pairs.\n}\nfunction detectType(state, object, explicit) {\n    var _result, typeList, index, length, type, style;\n    typeList = explicit ? state.explicitTypes : state.implicitTypes;\n    for(index = 0, length = typeList.length; index < length; index += 1){\n        type = typeList[index];\n        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === \"object\" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n            if (explicit) {\n                if (type.multi && type.representName) {\n                    state.tag = type.representName(object);\n                } else {\n                    state.tag = type.tag;\n                }\n            } else {\n                state.tag = \"?\";\n            }\n            if (type.represent) {\n                style = state.styleMap[type.tag] || type.defaultStyle;\n                if (_toString.call(type.represent) === \"[object Function]\") {\n                    _result = type.represent(object, style);\n                } else if (_hasOwnProperty.call(type.represent, style)) {\n                    _result = type.represent[style](object, style);\n                } else {\n                    throw new exception(\"!<\" + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n                }\n                state.dump = _result;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n    state.tag = null;\n    state.dump = object;\n    if (!detectType(state, object, false)) {\n        detectType(state, object, true);\n    }\n    var type = _toString.call(state.dump);\n    var inblock = block;\n    var tagStr;\n    if (block) {\n        block = state.flowLevel < 0 || state.flowLevel > level;\n    }\n    var objectOrArray = type === \"[object Object]\" || type === \"[object Array]\", duplicateIndex, duplicate;\n    if (objectOrArray) {\n        duplicateIndex = state.duplicates.indexOf(object);\n        duplicate = duplicateIndex !== -1;\n    }\n    if (state.tag !== null && state.tag !== \"?\" || duplicate || state.indent !== 2 && level > 0) {\n        compact = false;\n    }\n    if (duplicate && state.usedDuplicates[duplicateIndex]) {\n        state.dump = \"*ref_\" + duplicateIndex;\n    } else {\n        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n            state.usedDuplicates[duplicateIndex] = true;\n        }\n        if (type === \"[object Object]\") {\n            if (block && Object.keys(state.dump).length !== 0) {\n                writeBlockMapping(state, level, state.dump, compact);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + state.dump;\n                }\n            } else {\n                writeFlowMapping(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + \" \" + state.dump;\n                }\n            }\n        } else if (type === \"[object Array]\") {\n            if (block && state.dump.length !== 0) {\n                if (state.noArrayIndent && !isblockseq && level > 0) {\n                    writeBlockSequence(state, level - 1, state.dump, compact);\n                } else {\n                    writeBlockSequence(state, level, state.dump, compact);\n                }\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + state.dump;\n                }\n            } else {\n                writeFlowSequence(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + \" \" + state.dump;\n                }\n            }\n        } else if (type === \"[object String]\") {\n            if (state.tag !== \"?\") {\n                writeScalar(state, state.dump, level, iskey, inblock);\n            }\n        } else if (type === \"[object Undefined]\") {\n            return false;\n        } else {\n            if (state.skipInvalid) return false;\n            throw new exception(\"unacceptable kind of an object to dump \" + type);\n        }\n        if (state.tag !== null && state.tag !== \"?\") {\n            // Need to encode all characters except those allowed by the spec:\n            //\n            // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n            // [36] ns-hex-digit    ::=  ns-dec-digit\n            //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n            // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n            // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n            // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n            //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n            //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n            //\n            // Also need to encode '!' because it has special meaning (end of tag prefix).\n            //\n            tagStr = encodeURI(state.tag[0] === \"!\" ? state.tag.slice(1) : state.tag).replace(/!/g, \"%21\");\n            if (state.tag[0] === \"!\") {\n                tagStr = \"!\" + tagStr;\n            } else if (tagStr.slice(0, 18) === \"tag:yaml.org,2002:\") {\n                tagStr = \"!!\" + tagStr.slice(18);\n            } else {\n                tagStr = \"!<\" + tagStr + \">\";\n            }\n            state.dump = tagStr + \" \" + state.dump;\n        }\n    }\n    return true;\n}\nfunction getDuplicateReferences(object, state) {\n    var objects = [], duplicatesIndexes = [], index, length;\n    inspectNode(object, objects, duplicatesIndexes);\n    for(index = 0, length = duplicatesIndexes.length; index < length; index += 1){\n        state.duplicates.push(objects[duplicatesIndexes[index]]);\n    }\n    state.usedDuplicates = new Array(length);\n}\nfunction inspectNode(object, objects, duplicatesIndexes) {\n    var objectKeyList, index, length;\n    if (object !== null && typeof object === \"object\") {\n        index = objects.indexOf(object);\n        if (index !== -1) {\n            if (duplicatesIndexes.indexOf(index) === -1) {\n                duplicatesIndexes.push(index);\n            }\n        } else {\n            objects.push(object);\n            if (Array.isArray(object)) {\n                for(index = 0, length = object.length; index < length; index += 1){\n                    inspectNode(object[index], objects, duplicatesIndexes);\n                }\n            } else {\n                objectKeyList = Object.keys(object);\n                for(index = 0, length = objectKeyList.length; index < length; index += 1){\n                    inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n                }\n            }\n        }\n    }\n}\nfunction dump$1(input, options) {\n    options = options || {};\n    var state = new State(options);\n    if (!state.noRefs) getDuplicateReferences(input, state);\n    var value = input;\n    if (state.replacer) {\n        value = state.replacer.call({\n            \"\": value\n        }, \"\", value);\n    }\n    if (writeNode(state, 0, value, true, true)) return state.dump + \"\\n\";\n    return \"\";\n}\nvar dump_1 = dump$1;\nvar dumper = {\n    dump: dump_1\n};\nfunction renamed(from, to) {\n    return function() {\n        throw new Error(\"Function yaml.\" + from + \" is removed in js-yaml 4. \" + \"Use yaml.\" + to + \" instead, which is now safe by default.\");\n    };\n}\nvar Type = type;\nvar Schema = schema;\nvar FAILSAFE_SCHEMA = failsafe;\nvar JSON_SCHEMA = json;\nvar CORE_SCHEMA = core;\nvar DEFAULT_SCHEMA = _default;\nvar load = loader.load;\nvar loadAll = loader.loadAll;\nvar dump = dumper.dump;\nvar YAMLException = exception;\n// Re-export all types in case user wants to create custom schema\nvar types = {\n    binary: binary,\n    float: float,\n    map: map,\n    null: _null,\n    pairs: pairs,\n    set: set,\n    timestamp: timestamp,\n    bool: bool,\n    int: int,\n    merge: merge,\n    omap: omap,\n    seq: seq,\n    str: str\n};\n// Removed functions from JS-YAML 3.0.x\nvar safeLoad = renamed(\"safeLoad\", \"load\");\nvar safeLoadAll = renamed(\"safeLoadAll\", \"loadAll\");\nvar safeDump = renamed(\"safeDump\", \"dump\");\nvar jsYaml = {\n    Type: Type,\n    Schema: Schema,\n    FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n    JSON_SCHEMA: JSON_SCHEMA,\n    CORE_SCHEMA: CORE_SCHEMA,\n    DEFAULT_SCHEMA: DEFAULT_SCHEMA,\n    load: load,\n    loadAll: loadAll,\n    dump: dump,\n    YAMLException: YAMLException,\n    types: types,\n    safeLoad: safeLoad,\n    safeLoadAll: safeLoadAll,\n    safeDump: safeDump\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (jsYaml);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-yaml/dist/js-yaml.mjs\n");

/***/ })

};
;